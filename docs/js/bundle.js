!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=26)}([function(t,e,n){"use strict";const r=n(3),i={number:n(6),string:n(7),object:n(8)},a=({validators:t=[],predicates:e=i,type:n=null}={})=>{const s=new Proxy(function(){},{get:(i,o)=>{if(o===r.validate)return(e,r="argument")=>{if(!n)return new Error("missing required type specifier");for(let i=0;i<t.length;++i){const a=t[i];if(!a.fn(e))throw 0===i?new Error(`Expected ${r} \`${e}\` to be of type \`${n}\`, but received type \`${typeof e}\``):new Error(`Expected ${n} \`${r}\` \`${e}\` failed predicate \`${a.key}\``)}};const c=e[o];if(c)return"function"==typeof c?(t.push({key:o,fn:c}),s):a({type:o,validators:[{key:o,fn:c.validator}],predicates:c.predicates});{const n=e[r.func]&&e[r.func][o];return n?new Proxy(function(){},{get:()=>{throw new Error(`invalid use of functional predicate "${o}"`)},apply:(e,r,i)=>(t.push({key:o,fn:n(...i)}),s)}):s}},apply:(t,e,n)=>{if(2!==n.length&&3!==n.length)throw new Error('invalid number of arguments to "ow"');n[1][r.validate](n[0],n[2])}});return s};t.exports=a()},function(t,e,n){"use strict";const r=Object.prototype.toString;t.exports=function(t){return r.call(t).endsWith("Array]")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"next",value:function(){throw new Error("RNG.next must be overridden")}},{key:"seed",value:function(t,e){throw new Error("RNG.seed must be overridden")}},{key:"clone",value:function(t,e){throw new Error("RNG.clone must be overridden")}},{key:"_seed",value:function(t,e){if(t===(0|t))return t;for(var n=""+t,r=0,i=0;i<n.length;++i)r^=0|n.charCodeAt(i);return r}},{key:"name",get:function(){throw new Error("RNG.name must be overridden")}}]),t}();e.default=i},function(t,e,n){"use strict";e.func=Symbol("func"),e.validate=Symbol("validate")},function(t,e,n){"use strict";t.exports=n(5).default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=y(n(0)),a=y(n(2)),s=y(n(9)),o=y(n(13)),c=y(n(14)),u=y(n(15)),f=y(n(16)),l=y(n(17)),h=y(n(18)),d=y(n(19)),p=y(n(20)),g=y(n(21)),v=y(n(22)),m=y(n(23)),x=y(n(24)),b=y(n(25));function y(t){return t&&t.__esModule?t:{default:t}}var _=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e&&(0,i.default)(e,i.default.object.instanceOf(a.default)),this._cache={},this.use(e)}return r(t,[{key:"clone",value:function(){var e;return new t((e=this.rng).clone.apply(e,arguments))}},{key:"use",value:function(){this._rng=s.default.apply(void 0,arguments)}},{key:"patch",value:function(){if(this._patch)throw new Error("Math.random already patched");this._patch=Math.random,Math.random=this.uniform()}},{key:"unpatch",value:function(){this._patch&&(Math.random=this._patch,delete this._patch)}},{key:"next",value:function(){return this._rng.next()}},{key:"float",value:function(t,e){return this.uniform(t,e)()}},{key:"int",value:function(t,e){return this.uniformInt(t,e)()}},{key:"integer",value:function(t,e){return this.uniformInt(t,e)()}},{key:"bool",value:function(){return this.uniformBoolean()()}},{key:"boolean",value:function(){return this.uniformBoolean()()}},{key:"uniform",value:function(t,e){return this._memoize("uniform",o.default,t,e)}},{key:"uniformInt",value:function(t,e){return this._memoize("uniformInt",c.default,t,e)}},{key:"uniformBoolean",value:function(){return this._memoize("uniformBoolean",u.default)}},{key:"normal",value:function(t,e){return(0,f.default)(this,t,e)}},{key:"logNormal",value:function(t,e){return(0,l.default)(this,t,e)}},{key:"bernoulli",value:function(t){return(0,h.default)(this,t)}},{key:"binomial",value:function(t,e){return(0,d.default)(this,t,e)}},{key:"geometric",value:function(t){return(0,p.default)(this,t)}},{key:"poisson",value:function(t){return(0,g.default)(this,t)}},{key:"exponential",value:function(t){return(0,v.default)(this,t)}},{key:"irwinHall",value:function(t){return(0,m.default)(this,t)}},{key:"bates",value:function(t){return(0,x.default)(this,t)}},{key:"pareto",value:function(t){return(0,b.default)(this,t)}},{key:"_memoize",value:function(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var a=""+r.join(";"),s=this._cache[t];return void 0!==s&&s.key===a||(s={key:a,distribution:e.apply(void 0,[this].concat(r))},this._cache[t]=s),s.distribution}},{key:"rng",get:function(){return this._rng}}]),t}();e.default=new _},function(t,e,n){"use strict";const{func:r}=n(3),i={positive:t=>t>0,negative:t=>t<0,nonNegative:t=>t>=0,integer:t=>t===(0|t),[r]:{is:t=>t,eq:t=>e=>e===t,gt:t=>e=>e>t,gte:t=>e=>e>=t,lt:t=>e=>e<t,lte:t=>e=>e<=t}};t.exports={predicates:i,validator:t=>"number"==typeof t}},function(t,e,n){"use strict";const{func:r}=n(3),i={empty:t=>""===t,nonEmpty:t=>""!==t,[r]:{is:t=>t,eq:t=>e=>e===t,length:t=>e=>e.length===t,minLength:t=>e=>e.length>=t,maxLength:t=>e=>e.length<=t,matches:t=>e=>t.test(e),startsWith:t=>e=>e.startsWith(t),endsWith:t=>e=>e.endsWith(t)}};t.exports={predicates:i,validator:t=>"string"==typeof t}},function(t,e,n){"use strict";const{func:r}=n(3),i={plain:t=>{if("object"!=typeof t)return!1;const e=Object.getPrototypeOf(t);return null===e||e===Object.getPrototypeOf({})},empty:t=>0===Object.keys(t).length,nonEmpty:t=>Object.keys(t).length>0,[r]:{is:t=>t,instanceOf:t=>e=>e instanceof t}};t.exports={predicates:i,validator:t=>"object"==typeof t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=c(n(2)),a=c(n(10)),s=c(n(11)),o=c(n(12));function c(t){return t&&t.__esModule?t:{default:t}}var u={xor128:a.default,function:s.default,default:o.default};e.default=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var a=e[0],o=void 0===a?"default":a,c=e.slice(1);switch(void 0===o?"undefined":r(o)){case"object":if(o instanceof i.default)return o;break;case"function":return new s.default(o);case"string":var f=u[o];if(f)return new(Function.prototype.bind.apply(f,[null].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(c))))}throw new Error('invalid RNG "'+o+'"')}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(2),s=(r=a)&&r.__esModule?r:{default:r};var o=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.x=0,r.y=0,r.z=0,r.w=0,r.seed(t,n),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default),i(e,[{key:"next",value:function(){var t=this.x^this.x<<1;return this.x=this.y,this.y=this.z,this.z=this.w,this.w=this.w^this.w>>>19^t^t>>>8,(this.w>>>0)/4294967296}},{key:"seed",value:function(t,e){this.x=this._seed(t,e);for(var n=0;n<64;++n)this.next()}},{key:"clone",value:function(t,n){return new e(t,n)}},{key:"name",get:function(){return"xor128"}}]),e}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(0)),a=s(n(2));function s(t){return t&&t.__esModule?t:{default:t}}var o=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.seed(t,n),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,a.default),r(e,[{key:"next",value:function(){return this._rng()}},{key:"seed",value:function(t){(0,i.default)(t,i.default.function),this._rng=t}},{key:"clone",value:function(t,n){return new e(t,n)}},{key:"name",get:function(){return"function"}}]),e}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(2),s=(r=a)&&r.__esModule?r:{default:r};var o=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.default),i(e,[{key:"next",value:function(){return Math.random()}},{key:"seed",value:function(t,e){}},{key:"clone",value:function(){return new e}},{key:"name",get:function(){return"default"}}]),e}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t,e,n){return void 0===n&&(n=void 0===e?1:e,e=0),(0,a.default)(e,a.default.number),(0,a.default)(n,a.default.number),function(){return t.next()*(n-e)+e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t,e,n){return void 0===n&&(n=void 0===e?1:e,e=0),(0,a.default)(e,a.default.number.integer),(0,a.default)(n,a.default.number.integer),function(){return t.next()*(n-e+1)+e|0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(){return t.next()>=.5}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return(0,a.default)(e,a.default.number),(0,a.default)(n,a.default.number),function(){var r=void 0,i=void 0,a=void 0;do{a=(r=2*t.next()-1)*r+(i=2*t.next()-1)*i}while(!a||a>1);return e+n*i*Math.sqrt(-2*Math.log(a)/a)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];var i=t.normal.apply(t,n);return function(){return Math.exp(i())}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;return(0,a.default)(e,a.default.number.gte(0).lt(1)),function(){return t.next()+e|0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.5;return(0,a.default)(e,a.default.number.positive.integer),(0,a.default)(n,a.default.number.gte(0).lte(1)),function(){for(var r=0,i=0;r++<e;)i+=t.next()<n;return i}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;(0,a.default)(e,a.default.number.gt(0).lte(1));var n=1/Math.log(1-e);return function(){return 1+Math.log(t.next())*n|0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};var s=[0,0,.6931471805599453,1.791759469228055,3.1780538303479458,4.787491742782046,6.579251212010101,8.525161361065415,10.60460290274525,12.801827480081469],o=function(t){return s[t]};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if((0,a.default)(e,a.default.number.positive),e<10){var n=Math.exp(-e);return function(){for(var r=n,i=0,a=t.next();a>r;)a-=r,r=e*r/++i;return i}}var r=Math.sqrt(e),i=.931+2.53*r,s=.02483*i-.059,c=1.1239+1.1328/(i-3.4),u=.9277-3.6224/(i-2);return function(){for(;;){var n=void 0,a=t.next();if(a<=.86*u)return n=a/u-.43,Math.floor((2*s/(.5-Math.abs(n))+i)*n+e+.445);a>=u?n=t.next()-.5:(n=((n=a/u-.93)<0?-.5:.5)-n,a=t.next()*u);var f=.5-Math.abs(n);if(!(f<.013&&a>f)){var l=0|Math.floor((2*s/f+i)*n+e+.445);if(a=a*c/(s/(f*f)+i),l>=10){var h=(l+.5)*Math.log(e/l)-e-.9189385332046727+l-(1/12-(1/360-1/(1260*l*l))/(l*l))/l;if(Math.log(a*r)<=h)return l}else if(l>=0&&Math.log(a)<=l*Math.log(e)-e-o(l))return l}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(0,a.default)(e,a.default.number.positive),function(){return-Math.log(1-t.next())/e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return(0,a.default)(e,a.default.number.integer.gte(0)),function(){for(var n=0,r=0;r<e;++r)n+=t.next();return n}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;(0,a.default)(e,a.default.number.integer.positive);var n=t.irwinHall(e);return function(){return n()/e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r};e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;(0,a.default)(e,a.default.number.gte(0));var n=1/e;return function(){return 1/Math.pow(1-t.next(),n)}}},function(t,e,n){"use strict";function r(){}function i(t,e){for(var n in e)t[n]=e[n];return t}function a(t,e){for(var n in e)t[n]=1;return t}function s(t,e){t.appendChild(e)}function o(t,e,n){t.insertBefore(e,n)}function c(t){t.parentNode.removeChild(t)}function u(t,e){for(var n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function f(t){return document.createElement(t)}function l(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function h(t){return document.createTextNode(t)}function d(){return document.createComment("")}function p(t,e,n,r){t.addEventListener(e,n,r)}function g(t,e,n,r){t.removeEventListener(e,n,r)}function v(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function m(t,e){t.data=""+e}function x(t,e,n){t.style.setProperty(e,n)}n.r(e);function b(){return Object.create(null)}function y(t){this.destroy=r,this.fire("destroy"),this.set=r,this._fragment.d(!1!==t),this._fragment=null,this._state={}}function _(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function w(t,e){var n=t in this._handlers&&this._handlers[t].slice();if(n)for(var r=0;r<n.length;r+=1){var i=n[r];if(!i.__calling)try{i.__calling=!0,i.call(this,e)}finally{i.__calling=!1}}}function M(t){t._lock=!0,T(t._beforecreate),T(t._oncreate),T(t._aftercreate),t._lock=!1}function k(){return this._state}function S(t,e){t._handlers=b(),t._slots=b(),t._bind=e._bind,t._staged={},t.options=e,t.root=e.root||t,t.store=e.store||t.root.store,e.root||(t._beforecreate=[],t._oncreate=[],t._aftercreate=[])}function A(t,e){var n=this._handlers[t]||(this._handlers[t]=[]);return n.push(e),{cancel:function(){var t=n.indexOf(e);~t&&n.splice(t,1)}}}function P(t){this._set(i({},t)),this.root._lock||M(this.root)}function C(t){var e=this._state,n={},r=!1;for(var a in t=i(this._staged,t),this._staged={},t)this._differs(t[a],e[a])&&(n[a]=r=!0);r&&(this._state=i(i({},e),t),this._recompute(n,this._state),this._bind&&this._bind(n,this._state),this._fragment&&(this.fire("state",{changed:n,current:this._state,previous:e}),this._fragment.p(n,this._state),this.fire("update",{changed:n,current:this._state,previous:e})))}function N(t){i(this._staged,t)}function T(t){for(;t&&t.length;)t.shift()()}function E(t,e){this._fragment[this._fragment.i?"i":"m"](t,e||null)}var z={destroy:y,get:k,fire:w,on:A,set:P,_recompute:r,_set:C,_stage:N,_mount:E,_differs:_},R=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},j=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return R(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)<0?r=a+1:i=a}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)>0?i=a:r=a+1}return r}}};var q=j(R),L=q.right,D=(q.left,L);var O=Array.prototype,U=(O.slice,O.map,function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a}),I=Math.sqrt(50),V=Math.sqrt(10),F=Math.sqrt(2),B=function(t,e,n){var r,i,a,s,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(s=Y(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),a=new Array(i=Math.ceil(e-t+1));++o<i;)a[o]=(t+o)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),a=new Array(i=Math.ceil(t-e+1));++o<i;)a[o]=(t-o)/s;return r&&a.reverse(),a};function Y(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=I?10:a>=V?5:a>=F?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=I?10:a>=V?5:a>=F?2:1)}function $(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=I?i*=10:a>=V?i*=5:a>=F&&(i*=2),e<t?-i:i}var G=function(t){for(var e,n,r,i=t.length,a=-1,s=0;++a<i;)s+=t[a].length;for(n=new Array(s);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--s]=r[e];return n};function H(t){return t.length}var X=function(){return function(t){if(!(i=t.length))return[];for(var e=-1,n=function(t,e){var n,r,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=n;++a<i;)null!=(n=t[a])&&r>n&&(r=n)}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=n;++a<i;)null!=(n=e(t[a],a,t))&&r>n&&(r=n);return r}(t,H),r=new Array(n);++e<n;)for(var i,a=-1,s=r[e]=new Array(i);++a<i;)s[a]=t[a][e];return r}(arguments)},W=Array.prototype.slice,K=function(t){return t},Z=1,Q=2,J=3,tt=4,et=1e-6;function nt(t){return"translate("+(t+.5)+",0)"}function rt(t){return"translate(0,"+(t+.5)+")"}function it(){return!this.__axis}function at(t,e){var n=[],r=null,i=null,a=6,s=6,o=3,c=t===Z||t===tt?-1:1,u=t===tt||t===Q?"x":"y",f=t===Z||t===J?nt:rt;function l(l){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):K:i,p=Math.max(a,0)+o,g=e.range(),v=+g[0]+.5,m=+g[g.length-1]+.5,x=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),b=l.selection?l.selection():l,y=b.selectAll(".domain").data([null]),_=b.selectAll(".tick").data(h,e).order(),w=_.exit(),M=_.enter().append("g").attr("class","tick"),k=_.select("line"),S=_.select("text");y=y.merge(y.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),_=_.merge(M),k=k.merge(M.append("line").attr("stroke","currentColor").attr(u+"2",c*a)),S=S.merge(M.append("text").attr("fill","currentColor").attr(u,c*p).attr("dy",t===Z?"0em":t===J?"0.71em":"0.32em")),l!==b&&(y=y.transition(l),_=_.transition(l),k=k.transition(l),S=S.transition(l),w=w.transition(l).attr("opacity",et).attr("transform",function(t){return isFinite(t=x(t))?f(t):this.getAttribute("transform")}),M.attr("opacity",et).attr("transform",function(t){var e=this.parentNode.__axis;return f(e&&isFinite(e=e(t))?e:x(t))})),w.remove(),y.attr("d",t===tt||t==Q?s?"M"+c*s+","+v+"H0.5V"+m+"H"+c*s:"M0.5,"+v+"V"+m:s?"M"+v+","+c*s+"V0.5H"+m+"V"+c*s:"M"+v+",0.5H"+m),_.attr("opacity",1).attr("transform",function(t){return f(x(t))}),k.attr(u+"2",c*a),S.attr(u,c*p).text(d),b.filter(it).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Q?"start":t===tt?"end":"middle"),b.each(function(){this.__axis=x})}return l.scale=function(t){return arguments.length?(e=t,l):e},l.ticks=function(){return n=W.call(arguments),l},l.tickArguments=function(t){return arguments.length?(n=null==t?[]:W.call(t),l):n.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:W.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(a=s=+t,l):a},l.tickSizeInner=function(t){return arguments.length?(a=+t,l):a},l.tickSizeOuter=function(t){return arguments.length?(s=+t,l):s},l.tickPadding=function(t){return arguments.length?(o=+t,l):o},l}var st={value:function(){}};function ot(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function ut(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function ft(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=st,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}ct.prototype=ot.prototype={constructor:ct,on:function(t,e){var n,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),s=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++s<o;)if(n=(t=a[s]).type)i[n]=ft(i[n],t.name,e);else if(null==e)for(n in i)i[n]=ft(i[n],t.name,null);return this}for(;++s<o;)if((n=(t=a[s]).type)&&(n=ut(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new ct(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var lt=ot,ht="http://www.w3.org/1999/xhtml",dt={svg:"http://www.w3.org/2000/svg",xhtml:ht,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},pt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),dt.hasOwnProperty(e)?{space:dt[e],local:t}:t};var gt=function(t){var e=pt(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===ht&&e.documentElement.namespaceURI===ht?e.createElement(t):e.createElementNS(n,t)}})(e)};function vt(){}var mt=function(t){return null==t?vt:function(){return this.querySelector(t)}};function xt(){return[]}var bt=function(t){return null==t?xt:function(){return this.querySelectorAll(t)}},yt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var _t=document.documentElement;if(!_t.matches){var wt=_t.webkitMatchesSelector||_t.msMatchesSelector||_t.mozMatchesSelector||_t.oMatchesSelector;yt=function(t){return function(){return wt.call(this,t)}}}}var Mt=yt,kt=function(t){return new Array(t.length)};function St(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}St.prototype={constructor:St,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var At="$";function Pt(t,e,n,r,i,a){for(var s,o=0,c=e.length,u=a.length;o<u;++o)(s=e[o])?(s.__data__=a[o],r[o]=s):n[o]=new St(t,a[o]);for(;o<c;++o)(s=e[o])&&(i[o]=s)}function Ct(t,e,n,r,i,a,s){var o,c,u,f={},l=e.length,h=a.length,d=new Array(l);for(o=0;o<l;++o)(c=e[o])&&(d[o]=u=At+s.call(c,c.__data__,o,e),u in f?i[o]=c:f[u]=c);for(o=0;o<h;++o)(c=f[u=At+s.call(t,a[o],o,a)])?(r[o]=c,c.__data__=a[o],f[u]=null):n[o]=new St(t,a[o]);for(o=0;o<l;++o)(c=e[o])&&f[d[o]]===c&&(i[o]=c)}function Nt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Tt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Et(t,e){return t.style.getPropertyValue(e)||Tt(t).getComputedStyle(t,null).getPropertyValue(e)}function zt(t){return t.trim().split(/^|\s+/)}function Rt(t){return t.classList||new jt(t)}function jt(t){this._node=t,this._names=zt(t.getAttribute("class")||"")}function qt(t,e){for(var n=Rt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function Lt(t,e){for(var n=Rt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}jt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Dt(){this.textContent=""}function Ot(){this.innerHTML=""}function Ut(){this.nextSibling&&this.parentNode.appendChild(this)}function It(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Vt(){return null}function Ft(){var t=this.parentNode;t&&t.removeChild(this)}function Bt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Yt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var $t={},Gt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||($t={mouseenter:"mouseover",mouseleave:"mouseout"}));function Ht(t,e,n){return t=Xt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Xt(t,e,n){return function(r){var i=Gt;Gt=r;try{t.call(this,this.__data__,e,n)}finally{Gt=i}}}function Wt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function Kt(t,e,n){var r=$t.hasOwnProperty(t.type)?Ht:Xt;return function(i,a,s){var o,c=this.__on,u=r(e,a,s);if(c)for(var f=0,l=c.length;f<l;++f)if((o=c[f]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=n),void(o.value=e);this.addEventListener(t.type,u,n),o={type:t.type,name:t.name,value:e,listener:u,capture:n},c?c.push(o):this.__on=[o]}}function Zt(t,e,n,r){var i=Gt;t.sourceEvent=Gt,Gt=t;try{return e.apply(n,r)}finally{Gt=i}}function Qt(t,e,n){var r=Tt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var Jt=[null];function te(t,e){this._groups=t,this._parents=e}function ee(){return new te([[document.documentElement]],Jt)}te.prototype=ee.prototype={constructor:te,select:function(t){"function"!=typeof t&&(t=mt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,s,o=e[i],c=o.length,u=r[i]=new Array(c),f=0;f<c;++f)(a=o[f])&&(s=t.call(a,a.__data__,f,o))&&("__data__"in a&&(s.__data__=a.__data__),u[f]=s);return new te(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=bt(t));for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var s,o=e[a],c=o.length,u=0;u<c;++u)(s=o[u])&&(r.push(t.call(s,s.__data__,u,o)),i.push(s));return new te(r,i)},filter:function(t){"function"!=typeof t&&(t=Mt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,s=e[i],o=s.length,c=r[i]=[],u=0;u<o;++u)(a=s[u])&&t.call(a,a.__data__,u,s)&&c.push(a);return new te(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),f=-1,this.each(function(t){p[++f]=t}),p;var n,r=e?Ct:Pt,i=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=a.length,o=new Array(s),c=new Array(s),u=new Array(s),f=0;f<s;++f){var l=i[f],h=a[f],d=h.length,p=t.call(l,l&&l.__data__,f,i),g=p.length,v=c[f]=new Array(g),m=o[f]=new Array(g);r(l,h,v,m,u[f]=new Array(d),p,e);for(var x,b,y=0,_=0;y<g;++y)if(x=v[y]){for(y>=_&&(_=y+1);!(b=m[_])&&++_<g;);x._next=b||null}}return(o=new te(o,i))._enter=c,o._exit=u,o},enter:function(){return new te(this._enter||this._groups.map(kt),this._parents)},exit:function(){return new te(this._exit||this._groups.map(kt),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),s=new Array(r),o=0;o<a;++o)for(var c,u=e[o],f=n[o],l=u.length,h=s[o]=new Array(l),d=0;d<l;++d)(c=u[d]||f[d])&&(h[d]=c);for(;o<r;++o)s[o]=e[o];return new te(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,s=i[a];--a>=0;)(r=i[a])&&(s&&s!==r.nextSibling&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Nt);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var s,o=n[a],c=o.length,u=i[a]=new Array(c),f=0;f<c;++f)(s=o[f])&&(u[f]=s);u.sort(e)}return new te(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var s=r[i];if(s)return s}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],s=0,o=a.length;s<o;++s)(i=a[s])&&t.call(i,i.__data__,s,a);return this},attr:function(t,e){var n=pt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):Et(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=zt(t+"");if(arguments.length<2){for(var r=Rt(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?qt:Lt)(this,t)}}:e?function(t){return function(){qt(this,t)}}:function(t){return function(){Lt(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?Dt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ot:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Ut)},lower:function(){return this.each(It)},append:function(t){var e="function"==typeof t?t:gt(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:gt(t),r=null==e?Vt:"function"==typeof e?e:mt(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Ft)},clone:function(t){return this.select(t?Yt:Bt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),s=a.length;if(!(arguments.length<2)){for(o=e?Kt:Wt,null==n&&(n=!1),r=0;r<s;++r)this.each(o(a[r],e,n));return this}var o=this.node().__on;if(o)for(var c,u=0,f=o.length;u<f;++u)for(r=0,c=o[u];r<s;++r)if((i=a[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return Qt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return Qt(this,t,e)}})(t,e))}};var ne=ee,re=function(t){return"string"==typeof t?new te([[document.querySelector(t)]],[document.documentElement]):new te([[t]],Jt)},ie=0;function ae(){this._="@"+(++ie).toString(36)}ae.prototype=function(){return new ae}.prototype={constructor:ae,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var se=function(){for(var t,e=Gt;t=e.sourceEvent;)e=t;return e},oe=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},ce=function(t){var e=se();return e.changedTouches&&(e=e.changedTouches[0]),oe(t,e)},ue=function(t,e,n){arguments.length<3&&(n=e,e=se().changedTouches);for(var r,i=0,a=e?e.length:0;i<a;++i)if((r=e[i]).identifier===n)return oe(t,r);return null};function fe(){Gt.stopImmediatePropagation()}var le=function(){Gt.preventDefault(),Gt.stopImmediatePropagation()},he=function(t){var e=t.document.documentElement,n=re(t).on("dragstart.drag",le,!0);"onselectstart"in e?n.on("selectstart.drag",le,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function de(t,e){var n=t.document.documentElement,r=re(t).on("dragstart.drag",null);e&&(r.on("click.drag",le,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var pe=function(t){return function(){return t}};function ge(t,e,n,r,i,a,s,o,c,u){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=a,this.y=s,this.dx=o,this.dy=c,this._=u}function ve(){return!Gt.button}function me(){return this.parentNode}function xe(t){return null==t?{x:Gt.x,y:Gt.y}:t}function be(){return"ontouchstart"in this}ge.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var ye=function(){var t,e,n,r,i=ve,a=me,s=xe,o=be,c={},u=lt("start","drag","end"),f=0,l=0;function h(t){t.on("mousedown.drag",d).filter(o).on("touchstart.drag",v).on("touchmove.drag",m).on("touchend.drag touchcancel.drag",x).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var s=b("mouse",a.apply(this,arguments),ce,this,arguments);s&&(re(Gt.view).on("mousemove.drag",p,!0).on("mouseup.drag",g,!0),he(Gt.view),fe(),n=!1,t=Gt.clientX,e=Gt.clientY,s("start"))}}function p(){if(le(),!n){var r=Gt.clientX-t,i=Gt.clientY-e;n=r*r+i*i>l}c.mouse("drag")}function g(){re(Gt.view).on("mousemove.drag mouseup.drag",null),de(Gt.view,n),le(),c.mouse("end")}function v(){if(i.apply(this,arguments)){var t,e,n=Gt.changedTouches,r=a.apply(this,arguments),s=n.length;for(t=0;t<s;++t)(e=b(n[t].identifier,r,ue,this,arguments))&&(fe(),e("start"))}}function m(){var t,e,n=Gt.changedTouches,r=n.length;for(t=0;t<r;++t)(e=c[n[t].identifier])&&(le(),e("drag"))}function x(){var t,e,n=Gt.changedTouches,i=n.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),t=0;t<i;++t)(e=c[n[t].identifier])&&(fe(),e("end"))}function b(t,e,n,r,i){var a,o,l,d=n(e,t),p=u.copy();if(Zt(new ge(h,"beforestart",a,t,f,d[0],d[1],0,0,p),function(){return null!=(Gt.subject=a=s.apply(r,i))&&(o=a.x-d[0]||0,l=a.y-d[1]||0,!0)}))return function s(u){var g,v=d;switch(u){case"start":c[t]=s,g=f++;break;case"end":delete c[t],--f;case"drag":d=n(e,t),g=f}Zt(new ge(h,u,a,t,g,d[0]+o,d[1]+l,d[0]-v[0],d[1]-v[1],p),p.apply,p,[u,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:pe(!!t),h):i},h.container=function(t){return arguments.length?(a="function"==typeof t?t:pe(t),h):a},h.subject=function(t){return arguments.length?(s="function"==typeof t?t:pe(t),h):s},h.touchable=function(t){return arguments.length?(o="function"==typeof t?t:pe(!!t),h):o},h.on=function(){var t=u.on.apply(u,arguments);return t===u?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h},_e=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function we(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Me(){}var ke="\\s*([+-]?\\d+)\\s*",Se="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ae="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Pe=/^#([0-9a-f]{3})$/,Ce=/^#([0-9a-f]{6})$/,Ne=new RegExp("^rgb\\("+[ke,ke,ke]+"\\)$"),Te=new RegExp("^rgb\\("+[Ae,Ae,Ae]+"\\)$"),Ee=new RegExp("^rgba\\("+[ke,ke,ke,Se]+"\\)$"),ze=new RegExp("^rgba\\("+[Ae,Ae,Ae,Se]+"\\)$"),Re=new RegExp("^hsl\\("+[Se,Ae,Ae]+"\\)$"),je=new RegExp("^hsla\\("+[Se,Ae,Ae,Se]+"\\)$"),qe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Le(t){var e;return t=(t+"").trim().toLowerCase(),(e=Pe.exec(t))?new Ve((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Ce.exec(t))?De(parseInt(e[1],16)):(e=Ne.exec(t))?new Ve(e[1],e[2],e[3],1):(e=Te.exec(t))?new Ve(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ee.exec(t))?Oe(e[1],e[2],e[3],e[4]):(e=ze.exec(t))?Oe(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Re.exec(t))?Be(e[1],e[2]/100,e[3]/100,1):(e=je.exec(t))?Be(e[1],e[2]/100,e[3]/100,e[4]):qe.hasOwnProperty(t)?De(qe[t]):"transparent"===t?new Ve(NaN,NaN,NaN,0):null}function De(t){return new Ve(t>>16&255,t>>8&255,255&t,1)}function Oe(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ve(t,e,n,r)}function Ue(t){return t instanceof Me||(t=Le(t)),t?new Ve((t=t.rgb()).r,t.g,t.b,t.opacity):new Ve}function Ie(t,e,n,r){return 1===arguments.length?Ue(t):new Ve(t,e,n,null==r?1:r)}function Ve(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Fe(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Be(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new $e(t,e,n,r)}function Ye(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof $e)return new $e(t.h,t.s,t.l,t.opacity);if(t instanceof Me||(t=Le(t)),!t)return new $e;if(t instanceof $e)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),s=NaN,o=a-i,c=(a+i)/2;return o?(s=e===a?(n-r)/o+6*(n<r):n===a?(r-e)/o+2:(e-n)/o+4,o/=c<.5?a+i:2-a-i,s*=60):o=c>0&&c<1?0:s,new $e(s,o,c,t.opacity)}(t):new $e(t,e,n,null==r?1:r)}function $e(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ge(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}_e(Me,Le,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),_e(Ve,Ie,we(Me,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ve(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ve(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Fe(this.r)+Fe(this.g)+Fe(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),_e($e,Ye,we(Me,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new $e(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new $e(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ve(Ge(t>=240?t-240:t+120,i,r),Ge(t,i,r),Ge(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var He=Math.PI/180,Xe=180/Math.PI,We=.96422,Ke=1,Ze=.82521,Qe=4/29,Je=6/29,tn=3*Je*Je,en=Je*Je*Je;function nn(t){if(t instanceof an)return new an(t.l,t.a,t.b,t.opacity);if(t instanceof hn){if(isNaN(t.h))return new an(t.l,0,0,t.opacity);var e=t.h*He;return new an(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof Ve||(t=Ue(t));var n,r,i=un(t.r),a=un(t.g),s=un(t.b),o=sn((.2225045*i+.7168786*a+.0606169*s)/Ke);return i===a&&a===s?n=r=o:(n=sn((.4360747*i+.3850649*a+.1430804*s)/We),r=sn((.0139322*i+.0971045*a+.7141733*s)/Ze)),new an(116*o-16,500*(n-o),200*(o-r),t.opacity)}function rn(t,e,n,r){return 1===arguments.length?nn(t):new an(t,e,n,null==r?1:r)}function an(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function sn(t){return t>en?Math.pow(t,1/3):t/tn+Qe}function on(t){return t>Je?t*t*t:tn*(t-Qe)}function cn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function un(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function fn(t){if(t instanceof hn)return new hn(t.h,t.c,t.l,t.opacity);if(t instanceof an||(t=nn(t)),0===t.a&&0===t.b)return new hn(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Xe;return new hn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function ln(t,e,n,r){return 1===arguments.length?fn(t):new hn(t,e,n,null==r?1:r)}function hn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}_e(an,rn,we(Me,{brighter:function(t){return new an(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new an(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Ve(cn(3.1338561*(e=We*on(e))-1.6168667*(t=Ke*on(t))-.4906146*(n=Ze*on(n))),cn(-.9787684*e+1.9161415*t+.033454*n),cn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),_e(hn,ln,we(Me,{brighter:function(t){return new hn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new hn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return nn(this).rgb()}}));var dn=-.29227,pn=-.90649,gn=1.97294,vn=gn*pn,mn=1.78277*gn,xn=1.78277*dn- -.14861*pn;function bn(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof yn)return new yn(t.h,t.s,t.l,t.opacity);t instanceof Ve||(t=Ue(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(xn*r+vn*e-mn*n)/(xn+vn-mn),a=r-i,s=(gn*(n-i)-dn*a)/pn,o=Math.sqrt(s*s+a*a)/(gn*i*(1-i)),c=o?Math.atan2(s,a)*Xe-120:NaN;return new yn(c<0?c+360:c,o,i,t.opacity)}(t):new yn(t,e,n,null==r?1:r)}function yn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function _n(t,e,n,r,i){var a=t*t,s=a*t;return((1-3*t+3*a-s)*e+(4-6*a+3*s)*n+(1+3*t+3*a-3*s)*r+s*i)/6}_e(yn,bn,we(Me,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new yn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new yn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*He,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new Ve(255*(e+n*(-.14861*r+1.78277*i)),255*(e+n*(dn*r+pn*i)),255*(e+n*(gn*r)),this.opacity)}}));var wn=function(t){return function(){return t}};function Mn(t,e){return function(n){return t+n*e}}function kn(t,e){var n=e-t;return n?Mn(t,n>180||n<-180?n-360*Math.round(n/360):n):wn(isNaN(t)?e:t)}function Sn(t){return 1==(t=+t)?An:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):wn(isNaN(e)?n:e)}}function An(t,e){var n=e-t;return n?Mn(t,n):wn(isNaN(t)?e:t)}var Pn=function t(e){var n=Sn(e);function r(t,e){var r=n((t=Ie(t)).r,(e=Ie(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),s=An(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function Cn(t){return function(e){var n,r,i=e.length,a=new Array(i),s=new Array(i),o=new Array(i);for(n=0;n<i;++n)r=Ie(e[n]),a[n]=r.r||0,s[n]=r.g||0,o[n]=r.b||0;return a=t(a),s=t(s),o=t(o),r.opacity=1,function(t){return r.r=a(t),r.g=s(t),r.b=o(t),r+""}}}var Nn=Cn(function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],s=r>0?t[r-1]:2*i-a,o=r<e-1?t[r+2]:2*a-i;return _n((n-r/e)*e,s,i,a,o)}}),Tn=(Cn(function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],s=t[(r+1)%e],o=t[(r+2)%e];return _n((n-r/e)*e,i,a,s,o)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),En=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,zn=new RegExp(En.source,"g");var Rn,jn,qn,Ln,Dn=function(t,e){var n,r,i,a=En.lastIndex=zn.lastIndex=0,s=-1,o=[],c=[];for(t+="",e+="";(n=En.exec(t))&&(r=zn.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),o[s]?o[s]+=i:o[++s]=i),(n=n[0])===(r=r[0])?o[s]?o[s]+=r:o[++s]=r:(o[++s]=null,c.push({i:s,x:Tn(n,r)})),a=zn.lastIndex;return a<e.length&&(i=e.slice(a),o[s]?o[s]+=i:o[++s]=i),o.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,r=0;r<e;++r)o[(n=c[r]).i]=n.x(t);return o.join("")})},On=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?wn(e):("number"===r?Tn:"string"===r?(n=Le(e))?(e=n,Pn):Dn:e instanceof Le?Pn:e instanceof Date?function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}:Array.isArray(e)?function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),s=new Array(r);for(n=0;n<i;++n)a[n]=On(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<i;++n)s[n]=a[n](t);return s}}:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=On(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}:Tn)(t,e)},Un=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},In=180/Math.PI,Vn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Fn=function(t,e,n,r,i,a){var s,o,c;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(c=t*n+e*r)&&(n-=t*c,r-=e*c),(o=Math.sqrt(n*n+r*r))&&(n/=o,r/=o,c/=o),t*r<e*n&&(t=-t,e=-e,c=-c,s=-s),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*In,skewX:Math.atan(c)*In,scaleX:s,scaleY:o}};function Bn(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,s){var o=[],c=[];return a=t(a),s=t(s),function(t,r,i,a,s,o){if(t!==i||r!==a){var c=s.push("translate(",null,e,null,n);o.push({i:c-4,x:Tn(t,i)},{i:c-2,x:Tn(r,a)})}else(i||a)&&s.push("translate("+i+e+a+n)}(a.translateX,a.translateY,s.translateX,s.translateY,o,c),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Tn(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,s.rotate,o,c),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Tn(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,s.skewX,o,c),function(t,e,n,r,a,s){if(t!==n||e!==r){var o=a.push(i(a)+"scale(",null,",",null,")");s.push({i:o-4,x:Tn(t,n)},{i:o-2,x:Tn(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,s.scaleX,s.scaleY,o,c),a=s=null,function(t){for(var e,n=-1,r=c.length;++n<r;)o[(e=c[n]).i]=e.x(t);return o.join("")}}}var Yn=Bn(function(t){return"none"===t?Vn:(Rn||(Rn=document.createElement("DIV"),jn=document.documentElement,qn=document.defaultView),Rn.style.transform=t,t=qn.getComputedStyle(jn.appendChild(Rn),null).getPropertyValue("transform"),jn.removeChild(Rn),t=t.slice(7,-1).split(","),Fn(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),$n=Bn(function(t){return null==t?Vn:(Ln||(Ln=document.createElementNS("http://www.w3.org/2000/svg","g")),Ln.setAttribute("transform",t),(t=Ln.transform.baseVal.consolidate())?(t=t.matrix,Fn(t.a,t.b,t.c,t.d,t.e,t.f)):Vn)},", ",")",")");Math.SQRT2;function Gn(t){return function(e,n){var r=t((e=Ye(e)).h,(n=Ye(n)).h),i=An(e.s,n.s),a=An(e.l,n.l),s=An(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=a(t),e.opacity=s(t),e+""}}}Gn(kn),Gn(An);function Hn(t){return function(e,n){var r=t((e=ln(e)).h,(n=ln(n)).h),i=An(e.c,n.c),a=An(e.l,n.l),s=An(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=a(t),e.opacity=s(t),e+""}}}Hn(kn),Hn(An);function Xn(t){return function e(n){function r(e,r){var i=t((e=bn(e)).h,(r=bn(r)).h),a=An(e.s,r.s),s=An(e.l,r.l),o=An(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=s(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,r.gamma=e,r}(1)}Xn(kn);var Wn=Xn(An);var Kn,Zn,Qn=0,Jn=0,tr=0,er=1e3,nr=0,rr=0,ir=0,ar="object"==typeof performance&&performance.now?performance:Date,sr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function or(){return rr||(sr(cr),rr=ar.now()+ir)}function cr(){rr=0}function ur(){this._call=this._time=this._next=null}function fr(t,e,n){var r=new ur;return r.restart(t,e,n),r}function lr(){rr=(nr=ar.now())+ir,Qn=Jn=0;try{!function(){or(),++Qn;for(var t,e=Kn;e;)(t=rr-e._time)>=0&&e._call.call(null,t),e=e._next;--Qn}()}finally{Qn=0,function(){var t,e,n=Kn,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Kn=e);Zn=t,dr(r)}(),rr=0}}function hr(){var t=ar.now(),e=t-nr;e>er&&(ir-=e,nr=t)}function dr(t){Qn||(Jn&&(Jn=clearTimeout(Jn)),t-rr>24?(t<1/0&&(Jn=setTimeout(lr,t-ar.now()-ir)),tr&&(tr=clearInterval(tr))):(tr||(nr=ar.now(),tr=setInterval(hr,er)),Qn=1,sr(lr)))}ur.prototype=fr.prototype={constructor:ur,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?or():+n)+(null==e?0:+e),this._next||Zn===this||(Zn?Zn._next=this:Kn=this,Zn=this),this._call=t,this._time=n,dr()},stop:function(){this._call&&(this._call=null,this._time=1/0,dr())}};var pr=function(t,e,n){var r=new ur;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},gr=lt("start","end","interrupt"),vr=[],mr=0,xr=1,br=2,yr=3,_r=4,wr=5,Mr=6,kr=function(t,e,n,r,i,a){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(c){var u,f,l,h;if(n.state!==xr)return o();for(u in i)if((h=i[u]).name===n.name){if(h.state===yr)return pr(a);h.state===_r?(h.state=Mr,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[u]):+u<e&&(h.state=Mr,h.timer.stop(),delete i[u])}if(pr(function(){n.state===yr&&(n.state=_r,n.timer.restart(s,n.delay,n.time),s(c))}),n.state=br,n.on.call("start",t,t.__data__,n.index,n.group),n.state===br){for(n.state=yr,r=new Array(l=n.tween.length),u=0,f=-1;u<l;++u)(h=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++f]=h);r.length=f+1}}function s(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=wr,1),a=-1,s=r.length;++a<s;)r[a].call(null,i);n.state===wr&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var r in n.state=Mr,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=fr(function(t){n.state=xr,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:gr,tween:vr,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:mr})};function Sr(t,e){var n=Pr(t,e);if(n.state>mr)throw new Error("too late; already scheduled");return n}function Ar(t,e){var n=Pr(t,e);if(n.state>br)throw new Error("too late; already started");return n}function Pr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Cr=function(t,e){var n,r,i,a=t.__transition,s=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>br&&n.state<wr,n.state=Mr,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete a[i]):s=!1;s&&delete t.__transition}};function Nr(t,e,n){var r=t._id;return t.each(function(){var t=Ar(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Pr(t,r).value[e]}}var Tr=function(t,e){var n;return("number"==typeof e?Tn:e instanceof Le?Pn:(n=Le(e))?(e=n,Pn):Dn)(t,e)};var Er=ne.prototype.constructor;var zr=0;function Rr(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function jr(){return++zr}var qr=ne.prototype;Rr.prototype=function(t){return ne().transition(t)}.prototype={constructor:Rr,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=mt(t));for(var r=this._groups,i=r.length,a=new Array(i),s=0;s<i;++s)for(var o,c,u=r[s],f=u.length,l=a[s]=new Array(f),h=0;h<f;++h)(o=u[h])&&(c=t.call(o,o.__data__,h,u))&&("__data__"in o&&(c.__data__=o.__data__),l[h]=c,kr(l[h],e,n,h,l,Pr(o,n)));return new Rr(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=bt(t));for(var r=this._groups,i=r.length,a=[],s=[],o=0;o<i;++o)for(var c,u=r[o],f=u.length,l=0;l<f;++l)if(c=u[l]){for(var h,d=t.call(c,c.__data__,l,u),p=Pr(c,n),g=0,v=d.length;g<v;++g)(h=d[g])&&kr(h,e,n,g,d,p);a.push(d),s.push(c)}return new Rr(a,s,e,n)},filter:function(t){"function"!=typeof t&&(t=Mt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,s=e[i],o=s.length,c=r[i]=[],u=0;u<o;++u)(a=s[u])&&t.call(a,a.__data__,u,s)&&c.push(a);return new Rr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),s=new Array(r),o=0;o<a;++o)for(var c,u=e[o],f=n[o],l=u.length,h=s[o]=new Array(l),d=0;d<l;++d)(c=u[d]||f[d])&&(h[d]=c);for(;o<r;++o)s[o]=e[o];return new Rr(s,this._parents,this._name,this._id)},selection:function(){return new Er(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=jr(),r=this._groups,i=r.length,a=0;a<i;++a)for(var s,o=r[a],c=o.length,u=0;u<c;++u)if(s=o[u]){var f=Pr(s,e);kr(s,t,n,u,o,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Rr(r,this._parents,t,n)},call:qr.call,nodes:qr.nodes,node:qr.node,size:qr.size,empty:qr.empty,each:qr.each,on:function(t,e){var n=this._id;return arguments.length<2?Pr(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Sr:Ar;return function(){var s=a(this,t),o=s.on;o!==r&&(i=(r=o).copy()).on(e,n),s.on=i}}(n,t,e))},attr:function(t,e){var n=pt(t),r="transform"===n?$n:Tr;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,a;return function(){var s,o=n(this);if(null!=o)return(s=this.getAttributeNS(t.space,t.local))===o?null:s===r&&o===i?a:a=e(r=s,i=o);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,a;return function(){var s,o=n(this);if(null!=o)return(s=this.getAttribute(t))===o?null:s===r&&o===i?a:a=e(r=s,i=o);this.removeAttribute(t)}})(n,r,Nr(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i;return function(){var a=this.getAttributeNS(t.space,t.local);return a===n?null:a===r?i:i=e(r=a,n)}}:function(t,e,n){var r,i;return function(){var a=this.getAttribute(t);return a===n?null:a===r?i:i=e(r=a,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=pt(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Yn:Tr;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=Et(this,t),s=(this.style.removeProperty(t),Et(this,t));return a===s?null:a===n&&s===r?i:i=e(n=a,r=s)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,i,a;return function(){var s=Et(this,t),o=n(this);return null==o&&(this.style.removeProperty(t),o=Et(this,t)),s===o?null:s===r&&o===i?a:a=e(r=s,i=o)}}(t,r,Nr(this,"style."+t,e)):function(t,e,n){var r,i;return function(){var a=Et(this,t);return a===n?null:a===r?i:i=e(r=a,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,i=e.apply(r,arguments);return i&&function(e){r.style.setProperty(t,i(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Nr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Pr(this.node(),n).tween,a=0,s=i.length;a<s;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=Ar(this,t),a=i.tween;if(a!==n)for(var s=0,o=(r=n=a).length;s<o;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=Ar(this,t),s=a.tween;if(s!==r){i=(r=s).slice();for(var o={name:e,value:n},c=0,u=i.length;c<u;++c)if(i[c].name===e){i[c]=o;break}c===u&&i.push(o)}a.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Sr(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Sr(this,t).delay=e}})(e,t)):Pr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Ar(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Ar(this,t).duration=e}})(e,t)):Pr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){Ar(this,t).ease=e}}(e,t)):Pr(this.node(),e).ease}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var Lr=2*Math.PI,Dr=(function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Lr);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*Lr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Lr);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*Lr)},i.period=function(n){return t(e,n)},i}(1,.3),function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Lr);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*Lr)},i.period=function(n){return t(e,n)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Or(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Dr.time=or(),Dr;return n}ne.prototype.interrupt=function(t){return this.each(function(){Cr(this,t)})},ne.prototype.transition=function(t){var e,n;t instanceof Rr?(e=t._id,t=t._name):(e=jr(),(n=Dr).time=or(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var s,o=r[a],c=o.length,u=0;u<c;++u)(s=o[u])&&kr(s,t,e,u,o,n||Or(s,e));return new Rr(r,this._parents,t,e)};["e","w"].map(Ur),["n","s"].map(Ur),["n","e","s","w","nw","ne","se","sw"].map(Ur);function Ur(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Ir=Math.PI,Vr=2*Ir,Fr=Vr-1e-6;function Br(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Yr(){return new Br}Br.prototype=Yr.prototype={constructor:Br,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,s=this._y1,o=n-t,c=r-e,u=a-t,f=s-e,l=u*u+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(f*o-c*u)>1e-6&&i){var h=n-a,d=r-s,p=o*o+c*c,g=h*h+d*d,v=Math.sqrt(p),m=Math.sqrt(l),x=i*Math.tan((Ir-Math.acos((p+l-g)/(2*v*m)))/2),b=x/m,y=x/v;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*u)+","+(e+b*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>u*d)+","+(this._x1=t+y*o)+","+(this._y1=e+y*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e;var s=(n=+n)*Math.cos(r),o=n*Math.sin(r),c=t+s,u=e+o,f=1^a,l=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+u:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+c+","+u),n&&(l<0&&(l=l%Vr+Vr),l>Fr?this._+="A"+n+","+n+",0,1,"+f+","+(t-s)+","+(e-o)+"A"+n+","+n+",0,1,"+f+","+(this._x1=c)+","+(this._y1=u):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=Ir)+","+f+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var $r=Yr;function Gr(){}function Hr(t,e){var n=new Gr;if(t instanceof Gr)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==e)for(;++i<a;)n.set(i,t[i]);else for(;++i<a;)n.set(e(r=t[i],i,t),r)}else if(t)for(var s in t)n.set(s,t[s]);return n}Gr.prototype=Hr.prototype={constructor:Gr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Xr=Hr;function Wr(){}var Kr=Xr.prototype;function Zr(t,e){var n=new Wr;if(t instanceof Wr)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}Wr.prototype=Zr.prototype={constructor:Wr,has:Kr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:Kr.remove,clear:Kr.clear,values:Kr.keys,size:Kr.size,empty:Kr.empty,each:Kr.each};Array.prototype.slice;var Qr={},Jr={},ti=34,ei=10,ni=13;function ri(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var ii=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],a=t.length,s=0,o=0,c=a<=0,u=!1;function f(){if(c)return Jr;if(u)return u=!1,Qr;var e,r,i=s;if(t.charCodeAt(i)===ti){for(;s++<a&&t.charCodeAt(s)!==ti||t.charCodeAt(++s)===ti;);return(e=s)>=a?c=!0:(r=t.charCodeAt(s++))===ei?u=!0:r===ni&&(u=!0,t.charCodeAt(s)===ei&&++s),t.slice(i+1,e-1).replace(/""/g,'"')}for(;s<a;){if((r=t.charCodeAt(e=s++))===ei)u=!0;else if(r===ni)u=!0,t.charCodeAt(s)===ei&&++s;else if(r!==n)continue;return t.slice(i,e)}return c=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===ei&&--a,t.charCodeAt(a-1)===ni&&--a;(r=f())!==Jr;){for(var l=[];r!==Qr&&r!==Jr;)l.push(r),r=f();e&&null==(l=e(l,o++))||i.push(l)}return i}function i(e){return e.map(a).join(t)}function a(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,a=r(t,function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=ri(t);return function(r,i){return e(n(r),i,t)}}(t,e):ri(t)});return a.columns=i||[],a},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(a).join(t)].concat(e.map(function(e){return n.map(function(t){return a(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},ai=ii(","),si=ai.parse,oi=(ai.parseRows,ai.format,ai.formatRows,ii("\t")),ci=oi.parse;oi.parseRows,oi.format,oi.formatRows;function ui(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var fi=function(t,e){return fetch(t,e).then(ui)};function li(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),fi(e,n).then(function(e){return t(e,r)})}}li(si),li(ci);function hi(t){return function(e,n){return fi(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}hi("application/xml"),hi("text/html"),hi("image/svg+xml");function di(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,a,s,o,c,u,f,l,h,d=t._root,p={data:r},g=t._x0,v=t._y0,m=t._x1,x=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((u=e>=(a=(g+m)/2))?g=a:m=a,(f=n>=(s=(v+x)/2))?v=s:x=s,i=d,!(d=d[l=f<<1|u]))return i[l]=p,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),e===o&&n===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(u=e>=(a=(g+m)/2))?g=a:m=a,(f=n>=(s=(v+x)/2))?v=s:x=s}while((l=f<<1|u)==(h=(c>=s)<<1|o>=a));return i[h]=d,i[l]=p,t}var pi=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function gi(t){return t[0]}function vi(t){return t[1]}function mi(t,e,n){var r=new xi(null==e?gi:e,null==n?vi:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function xi(t,e,n,r,i,a){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function bi(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var yi=mi.prototype=xi.prototype;yi.copy=function(){var t,e,n=new xi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=bi(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=bi(e));return n},yi.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return di(this.cover(e,n),e,n,t)},yi.addAll=function(t){var e,n,r,i,a=t.length,s=new Array(a),o=new Array(a),c=1/0,u=1/0,f=-1/0,l=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(s[n]=r,o[n]=i,r<c&&(c=r),r>f&&(f=r),i<u&&(u=i),i>l&&(l=i));for(f<c&&(c=this._x0,f=this._x1),l<u&&(u=this._y0,l=this._y1),this.cover(c,u).cover(f,l),n=0;n<a;++n)di(this,s[n],o[n],t[n]);return this},yi.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,a=(r=Math.floor(e))+1;else{if(!(n>t||t>i||r>e||e>a))return this;var s,o,c=i-n,u=this._root;switch(o=(e<(r+a)/2)<<1|t<(n+i)/2){case 0:do{(s=new Array(4))[o]=u,u=s}while(a=r+(c*=2),t>(i=n+c)||e>a);break;case 1:do{(s=new Array(4))[o]=u,u=s}while(a=r+(c*=2),(n=i-c)>t||e>a);break;case 2:do{(s=new Array(4))[o]=u,u=s}while(r=a-(c*=2),t>(i=n+c)||r>e);break;case 3:do{(s=new Array(4))[o]=u,u=s}while(r=a-(c*=2),(n=i-c)>t||r>e)}this._root&&this._root.length&&(this._root=u)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},yi.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},yi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},yi.find=function(t,e,n){var r,i,a,s,o,c,u,f=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new pi(g,f,l,h,d)),null==n?n=1/0:(f=t-n,l=e-n,h=t+n,d=e+n,n*=n);c=p.pop();)if(!(!(g=c.node)||(i=c.x0)>h||(a=c.y0)>d||(s=c.x1)<f||(o=c.y1)<l))if(g.length){var v=(i+s)/2,m=(a+o)/2;p.push(new pi(g[3],v,m,s,o),new pi(g[2],i,m,v,o),new pi(g[1],v,a,s,m),new pi(g[0],i,a,v,m)),(u=(e>=m)<<1|t>=v)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-u],p[p.length-1-u]=c)}else{var x=t-+this._x.call(null,g.data),b=e-+this._y.call(null,g.data),y=x*x+b*b;if(y<n){var _=Math.sqrt(n=y);f=t-_,l=e-_,h=t+_,d=e+_,r=g.data}}return r},yi.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var e,n,r,i,a,s,o,c,u,f,l,h,d=this._root,p=this._x0,g=this._y0,v=this._x1,m=this._y1;if(!d)return this;if(d.length)for(;;){if((u=a>=(o=(p+v)/2))?p=o:v=o,(f=s>=(c=(g+m)/2))?g=c:m=c,e=d,!(d=d[l=f<<1|u]))return this;if(!d.length)break;(e[l+1&3]||e[l+2&3]||e[l+3&3])&&(n=e,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[l]=i:delete e[l],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[h]=d:this._root=d),this):(this._root=i,this)},yi.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},yi.root=function(){return this._root},yi.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},yi.visit=function(t){var e,n,r,i,a,s,o=[],c=this._root;for(c&&o.push(new pi(c,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(c=e.node,r=e.x0,i=e.y0,a=e.x1,s=e.y1)&&c.length){var u=(r+a)/2,f=(i+s)/2;(n=c[3])&&o.push(new pi(n,u,f,a,s)),(n=c[2])&&o.push(new pi(n,r,f,u,s)),(n=c[1])&&o.push(new pi(n,u,i,a,f)),(n=c[0])&&o.push(new pi(n,r,i,u,f))}return this},yi.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new pi(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var a,s=e.x0,o=e.y0,c=e.x1,u=e.y1,f=(s+c)/2,l=(o+u)/2;(a=i[0])&&n.push(new pi(a,s,o,f,l)),(a=i[1])&&n.push(new pi(a,f,o,c,l)),(a=i[2])&&n.push(new pi(a,s,l,f,u)),(a=i[3])&&n.push(new pi(a,f,l,c,u))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},yi.x=function(t){return arguments.length?(this._x=t,this):this._x},yi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var _i=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},wi=function(t){return(t=_i(Math.abs(t)))?t[1]:NaN},Mi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ki(t){return new Si(t)}function Si(t){if(!(e=Mi.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}ki.prototype=Si.prototype,Si.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ai,Pi,Ci,Ni,Ti=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Ei=function(t,e){var n=_i(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},zi={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Ei(100*t,e)},r:Ei,s:function(t,e){var n=_i(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(Ai=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,s=r.length;return a===s?r:a>s?r+new Array(a-s+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+_i(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ri=function(t){return t},ji=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Pi=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var i=t.length,a=[],s=0,o=e[0],c=0;i>0&&o>0&&(c+o+1>r&&(o=Math.max(1,r-c)),a.push(t.substring(i-=o,i+o)),!((c+=o+1)>r));)o=e[s=(s+1)%e.length];return a.reverse().join(n)}):Ri,i=t.currency,a=t.decimal,s=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Ri,o=t.percent||"%";function c(t){var e=(t=ki(t)).fill,n=t.align,c=t.sign,u=t.symbol,f=t.zero,l=t.width,h=t.comma,d=t.precision,p=t.trim,g=t.type;"n"===g?(h=!0,g="g"):zi[g]||(null==d&&(d=12),p=!0,g="g"),(f||"0"===e&&"="===n)&&(f=!0,e="0",n="=");var v="$"===u?i[0]:"#"===u&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===u?i[1]:/[%p]/.test(g)?o:"",x=zi[g],b=/[defgprs%]/.test(g);function y(t){var i,o,u,y=v,_=m;if("c"===g)_=x(t)+_,t="";else{var w=(t=+t)<0;if(t=x(Math.abs(t),d),p&&(t=Ti(t)),w&&0==+t&&(w=!1),y=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+y,_=("s"===g?ji[8+Ai/3]:"")+_+(w&&"("===c?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){_=(46===u?a+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}h&&!f&&(t=r(t,1/0));var M=y.length+t.length+_.length,k=M<l?new Array(l-M+1).join(e):"";switch(h&&f&&(t=r(k+t,k.length?l-_.length:1/0),k=""),n){case"<":t=y+t+_+k;break;case"=":t=y+k+t+_;break;case"^":t=k.slice(0,M=k.length>>1)+y+t+_+k.slice(M);break;default:t=k+y+t+_}return s(t)}return d=null==d?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),y.toString=function(){return t+""},y}return{format:c,formatPrefix:function(t,e){var n=c(((t=ki(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(wi(e)/3))),i=Math.pow(10,-r),a=ji[8+r/3];return function(t){return n(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Ci=Pi.format,Ni=Pi.formatPrefix;var qi=function(){return new Li};function Li(){this.reset()}Li.prototype={constructor:Li,reset:function(){this.s=this.t=0},add:function(t){Oi(Di,t,this.t),Oi(this,Di.s,this.s),this.s?this.t+=Di.t:this.s=Di.t},valueOf:function(){return this.s}};var Di=new Li;function Oi(t,e,n){var r=t.s=e+n,i=r-e,a=r-i;t.t=e-a+(n-i)}var Ui=1e-6,Ii=Math.PI,Vi=Ii/2,Fi=Ii/4,Bi=2*Ii,Yi=Ii/180,$i=Math.abs,Gi=Math.atan,Hi=Math.atan2,Xi=Math.cos,Wi=(Math.ceil,Math.exp),Ki=(Math.floor,Math.log),Zi=(Math.pow,Math.sin),Qi=(Math.sign,Math.sqrt),Ji=Math.tan;function ta(t){return t>1?0:t<-1?Ii:Math.acos(t)}function ea(t){return t>1?Vi:t<-1?-Vi:Math.asin(t)}function na(){}qi(),qi();function ra(t){var e=t[0],n=t[1],r=Xi(n);return[r*Xi(e),r*Zi(e),Zi(n)]}function ia(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function aa(t){var e=Qi(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}qi();function sa(t,e){return[$i(t)>Ii?t+Math.round(-t/Bi)*Bi:t,e]}sa.invert=sa;var oa=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:na,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},ca=function(t,e){return $i(t[0]-e[0])<Ui&&$i(t[1]-e[1])<Ui};function ua(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var fa=function(t,e,n,r,i){var a,s,o=[],c=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],s=t[e];if(ca(r,s)){for(i.lineStart(),a=0;a<e;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else o.push(n=new ua(r,t,null,!0)),c.push(n.o=new ua(r,null,n,!1)),o.push(n=new ua(s,t,null,!1)),c.push(n.o=new ua(s,null,n,!0))}}),o.length){for(c.sort(e),la(o),la(c),a=0,s=c.length;a<s;++a)c[a].e=n=!n;for(var u,f,l=o[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;u=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(a=0,s=u.length;a<s;++a)i.point((f=u[a])[0],f[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(u=h.p.z,a=u.length-1;a>=0;--a)i.point((f=u[a])[0],f[1]);else r(h.x,h.p.x,-1,i);h=h.p}u=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function la(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}var ha=qi(),da=function(t,e){var n=e[0],r=e[1],i=Zi(r),a=[Zi(n),-Xi(n),0],s=0,o=0;ha.reset(),1===i?r=Vi+Ui:-1===i&&(r=-Vi-Ui);for(var c=0,u=t.length;c<u;++c)if(l=(f=t[c]).length)for(var f,l,h=f[l-1],d=h[0],p=h[1]/2+Fi,g=Zi(p),v=Xi(p),m=0;m<l;++m,d=b,g=_,v=w,h=x){var x=f[m],b=x[0],y=x[1]/2+Fi,_=Zi(y),w=Xi(y),M=b-d,k=M>=0?1:-1,S=k*M,A=S>Ii,P=g*_;if(ha.add(Hi(P*k*Zi(S),v*w+P*Xi(S))),s+=A?M+k*Bi:M,A^d>=n^b>=n){var C=ia(ra(h),ra(x));aa(C);var N=ia(a,C);aa(N);var T=(A^M>=0?-1:1)*ea(N[2]);(r>T||r===T&&(C[0]||C[1]))&&(o+=A^M>=0?1:-1)}}return(s<-Ui||s<Ui&&ha<-Ui)^1&o},pa=function(t,e,n,r){return function(i){var a,s,o,c=e(i),u=oa(),f=e(u),l=!1,h={point:d,lineStart:g,lineEnd:v,polygonStart:function(){h.point=m,h.lineStart=x,h.lineEnd=b,s=[],a=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=v,s=G(s);var t=da(a,r);s.length?(l||(i.polygonStart(),l=!0),fa(s,va,t,n,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),s=a=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(e,n){t(e,n)&&i.point(e,n)}function p(t,e){c.point(t,e)}function g(){h.point=p,c.lineStart()}function v(){h.point=d,c.lineEnd()}function m(t,e){o.push([t,e]),f.point(t,e)}function x(){f.lineStart(),o=[]}function b(){m(o[0][0],o[0][1]),f.lineEnd();var t,e,n,r,c=f.clean(),h=u.result(),d=h.length;if(o.pop(),a.push(o),o=null,d)if(1&c){if((e=(n=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),s.push(h.filter(ga))}return h}};function ga(t){return t.length>1}function va(t,e){return((t=t.x)[0]<0?t[1]-Vi-Ui:Vi-t[1])-((e=e.x)[0]<0?e[1]-Vi-Ui:Vi-e[1])}pa(function(){return!0},function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,s){var o=a>0?Ii:-Ii,c=$i(a-n);$i(c-Ii)<Ui?(t.point(n,r=(r+s)/2>0?Vi:-Vi),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(a,r),e=0):i!==o&&c>=Ii&&($i(n-i)<Ui&&(n-=i*Ui),$i(a-o)<Ui&&(a-=o*Ui),r=function(t,e,n,r){var i,a,s=Zi(t-n);return $i(s)>Ui?Gi((Zi(e)*(a=Xi(r))*Zi(n)-Zi(r)*(i=Xi(e))*Zi(t))/(i*a*s)):(e+r)/2}(n,r,a,s),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),e=0),t.point(n=a,r=s),i=o},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var i;if(null==t)i=n*Vi,r.point(-Ii,i),r.point(0,i),r.point(Ii,i),r.point(Ii,0),r.point(Ii,-i),r.point(0,-i),r.point(-Ii,-i),r.point(-Ii,0),r.point(-Ii,i);else if($i(t[0]-e[0])>Ui){var a=t[0]<e[0]?Ii:-Ii;i=n*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(e[0],e[1])},[-Ii,-Vi]);qi();qi(),qi();function ma(t){this._context=t}ma.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Bi)}},result:na};qi();function xa(){this._string=[]}function ba(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}xa.prototype={_radius:4.5,_circle:ba(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=ba(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function ya(t){return function(e){var n=new _a;for(var r in t)n[r]=t[r];return n.stream=e,n}}function _a(){}_a.prototype={constructor:_a,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Xi(30*Yi);ya({point:function(t,e){this.stream.point(t*Yi,e*Yi)}});function wa(t){return function(e,n){var r=Xi(e),i=Xi(n),a=t(r*i);return[a*i*Zi(e),a*Zi(n)]}}function Ma(t){return function(e,n){var r=Qi(e*e+n*n),i=t(r),a=Zi(i),s=Xi(i);return[Hi(e*a,r*s),ea(r&&n*a/r)]}}var ka=wa(function(t){return Qi(2/(1+t))});ka.invert=Ma(function(t){return 2*ea(t/2)});var Sa=wa(function(t){return(t=ta(t))&&t/Zi(t)});Sa.invert=Ma(function(t){return t});function Aa(t,e){return[t,Ki(Ji((Vi+e)/2))]}Aa.invert=function(t,e){return[t,2*Gi(Wi(e))-Vi]};function Pa(t,e){return[t,e]}Pa.invert=Pa;var Ca=1.340264,Na=-.081106,Ta=893e-6,Ea=.003796,za=Qi(3)/2;function Ra(t,e){var n=ea(za*Zi(e)),r=n*n,i=r*r*r;return[t*Xi(n)/(za*(Ca+3*Na*r+i*(7*Ta+9*Ea*r))),n*(Ca+Na*r+i*(Ta+Ea*r))]}Ra.invert=function(t,e){for(var n,r=e,i=r*r,a=i*i*i,s=0;s<12&&(a=(i=(r-=n=(r*(Ca+Na*i+a*(Ta+Ea*i))-e)/(Ca+3*Na*i+a*(7*Ta+9*Ea*i)))*r)*i*i,!($i(n)<1e-12));++s);return[za*t*(Ca+3*Na*i+a*(7*Ta+9*Ea*i))/Xi(r),ea(Zi(r)/za)]};function ja(t,e){var n=Xi(e),r=Xi(t)*n;return[n*Zi(t)/r,Zi(e)/r]}ja.invert=Ma(Gi);function qa(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}qa.invert=function(t,e){var n,r=e,i=25;do{var a=r*r,s=a*a;r-=n=(r*(1.007226+a*(.015085+s*(.028874*a-.044475-.005916*s)))-e)/(1.007226+a*(.045255+s*(.259866*a-.311325-.005916*11*s)))}while($i(n)>Ui&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function La(t,e){return[Xi(e)*Zi(t),Zi(e)]}La.invert=Ma(ea);function Da(t,e){var n=Xi(e),r=1+Xi(t)*n;return[n*Zi(t)/r,Zi(e)/r]}Da.invert=Ma(function(t){return 2*Gi(t)});function Oa(t,e){return[Ki(Ji((Vi+e)/2)),-t]}Oa.invert=function(t,e){return[-e,2*Gi(Wi(t))-Vi]};function Ua(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function Ia(t,e){var n,r,i,a,s,o=new Ya(t),c=+t.value&&(o.value=t.value),u=[o];for(null==e&&(e=Va);n=u.pop();)if(c&&(n.value=+n.data.value),(i=e(n.data))&&(s=i.length))for(n.children=new Array(s),a=s-1;a>=0;--a)u.push(r=n.children[a]=new Ya(i[a])),r.parent=n,r.depth=n.depth+1;return o.eachBefore(Ba)}function Va(t){return t.children}function Fa(t){t.data=t.data.data}function Ba(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Ya(t){this.data=t,this.depth=this.height=0,this.parent=null}Ya.prototype=Ia.prototype={constructor:Ya,count:function(){return this.eachAfter(Ua)},each:function(t){var e,n,r,i,a=this,s=[a];do{for(e=s.reverse(),s=[];a=e.pop();)if(t(a),n=a.children)for(r=0,i=n.length;r<i;++r)s.push(n[r])}while(s.length);return this},eachAfter:function(t){for(var e,n,r,i=this,a=[i],s=[];i=a.pop();)if(s.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)a.push(e[n]);for(;i=s.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return Ia(this).eachBefore(Fa)}};Array.prototype.slice;var $a=function(t,e,n,r,i){for(var a,s=t.children,o=-1,c=s.length,u=t.value&&(r-e)/t.value;++o<c;)(a=s[o]).y0=n,a.y1=i,a.x0=e,a.x1=e+=a.value*u};function Ga(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Ga.prototype=Object.create(Ya.prototype);var Ha=function(t,e,n,r,i){for(var a,s=t.children,o=-1,c=s.length,u=t.value&&(i-n)/t.value;++o<c;)(a=s[o]).x0=e,a.x1=r,a.y0=n,a.y1=n+=a.value*u},Xa=(1+Math.sqrt(5))/2;function Wa(t,e,n,r,i,a){for(var s,o,c,u,f,l,h,d,p,g,v,m=[],x=e.children,b=0,y=0,_=x.length,w=e.value;b<_;){c=i-n,u=a-r;do{f=x[y++].value}while(!f&&y<_);for(l=h=f,v=f*f*(g=Math.max(u/c,c/u)/(w*t)),p=Math.max(h/v,v/l);y<_;++y){if(f+=o=x[y].value,o<l&&(l=o),o>h&&(h=o),v=f*f*g,(d=Math.max(h/v,v/l))>p){f-=o;break}p=d}m.push(s={value:f,dice:c<u,children:x.slice(b,y)}),s.dice?$a(s,n,r,i,w?r+=u*f/w:a):Ha(s,n,r,w?n+=c*f/w:i,a),w-=f,b=y}return m}(function t(e){function n(t,n,r,i,a){Wa(e,t,n,r,i,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(Xa),function t(e){function n(t,n,r,i,a){if((s=t._squarify)&&s.ratio===e)for(var s,o,c,u,f,l=-1,h=s.length,d=t.value;++l<h;){for(c=(o=s[l]).children,u=o.value=0,f=c.length;u<f;++u)o.value+=c[u].value;o.dice?$a(o,n,r,i,r+=(a-r)*o.value/d):Ha(o,n,r,n+=(i-n)*o.value/d,a),d-=o.value}else t._squarify=s=Wa(e,t,n,r,i,a),s.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Xa);var Ka=function(){return Math.random()},Za=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Ka),function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var a;if(null!=r)a=r,r=null;else do{r=2*e()-1,a=2*e()-1,i=r*r+a*a}while(!i||i>1);return t+n*a*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(Ka)),Qa=(function t(e){function n(){var t=Za.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Ka),function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Ka)),Ja=(function t(e){function n(t){var n=Qa.source(e)(t);return function(){return n()/t}}return n.source=t,n}(Ka),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Ka),Array.prototype),ts=Ja.map,es=Ja.slice;var ns=function(t){return function(){return t}},rs=function(t){return+t},is=[0,1];function as(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ns(e)}function ss(t,e,n,r){var i=t[0],a=t[1],s=e[0],o=e[1];return a<i?(i=n(a,i),s=r(o,s)):(i=n(i,a),s=r(s,o)),function(t){return s(i(t))}}function os(t,e,n,r){var i=Math.min(t.length,e.length)-1,a=new Array(i),s=new Array(i),o=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<i;)a[o]=n(t[o],t[o+1]),s[o]=r(e[o],e[o+1]);return function(e){var n=D(t,e,1,i)-1;return s[n](a[n](e))}}function cs(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function us(t,e){var n,r,i,a=is,s=is,o=On,c=!1;function u(){return n=Math.min(a.length,s.length)>2?os:ss,r=i=null,f}function f(e){return(r||(r=n(a,s,c?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,o)))(+e)}return f.invert=function(t){return(i||(i=n(s,a,as,c?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},f.domain=function(t){return arguments.length?(a=ts.call(t,rs),u()):a.slice()},f.range=function(t){return arguments.length?(s=es.call(t),u()):s.slice()},f.rangeRound=function(t){return s=es.call(t),o=Un,u()},f.clamp=function(t){return arguments.length?(c=!!t,u()):c},f.interpolate=function(t){return arguments.length?(o=t,u()):o},u()}var fs=function(t,e,n){var r,i=t[0],a=t[t.length-1],s=$(i,a,null==e?10:e);switch((n=ki(null==n?",f":n)).type){case"s":var o=Math.max(Math.abs(i),Math.abs(a));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(wi(e)/3)))-wi(Math.abs(t)))}(s,o))||(n.precision=r),Ni(n,o);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,wi(e)-wi(t))+1}(s,Math.max(Math.abs(i),Math.abs(a))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-wi(Math.abs(t)))}(s))||(n.precision=r-2*("%"===n.type))}return Ci(n)};function ls(t){var e=t.domain;return t.ticks=function(t){var n=e();return B(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return fs(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),a=0,s=i.length-1,o=i[a],c=i[s];return c<o&&(r=o,o=c,c=r,r=a,a=s,s=r),(r=Y(o,c,n))>0?r=Y(o=Math.floor(o/r)*r,c=Math.ceil(c/r)*r,n):r<0&&(r=Y(o=Math.ceil(o*r)/r,c=Math.floor(c*r)/r,n)),r>0?(i[a]=Math.floor(o/r)*r,i[s]=Math.ceil(c/r)*r,e(i)):r<0&&(i[a]=Math.ceil(o*r)/r,i[s]=Math.floor(c*r)/r,e(i)),t},t}function hs(){var t=us(as,Tn);return t.copy=function(){return cs(t,hs())},ls(t)}var ds=new Date,ps=new Date;function gs(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var s,o=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return o;do{o.push(s=new Date(+n)),e(n,a),t(n)}while(s<n&&n<r);return o},i.filter=function(n){return gs(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return ds.setTime(+e),ps.setTime(+r),t(ds),t(ps),Math.floor(n(ds,ps))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var vs=gs(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});vs.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?gs(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):vs:null};vs.range;var ms=6e4,xs=6048e5,bs=gs(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),ys=(bs.range,gs(function(t){t.setTime(Math.floor(t/ms)*ms)},function(t,e){t.setTime(+t+e*ms)},function(t,e){return(e-t)/ms},function(t){return t.getMinutes()})),_s=(ys.range,gs(function(t){var e=t.getTimezoneOffset()*ms%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()})),ws=(_s.range,gs(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ms)/864e5},function(t){return t.getDate()-1})),Ms=ws;ws.range;function ks(t){return gs(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*ms)/xs})}var Ss=ks(0),As=ks(1),Ps=ks(2),Cs=ks(3),Ns=ks(4),Ts=ks(5),Es=ks(6),zs=(Ss.range,As.range,Ps.range,Cs.range,Ns.range,Ts.range,Es.range,gs(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Rs=(zs.range,gs(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Rs.every=function(t){return isFinite(t=Math.floor(t))&&t>0?gs(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var js=Rs,qs=(Rs.range,gs(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*ms)},function(t,e){return(e-t)/ms},function(t){return t.getUTCMinutes()})),Ls=(qs.range,gs(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()})),Ds=(Ls.range,gs(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1})),Os=Ds;Ds.range;function Us(t){return gs(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/xs})}var Is=Us(0),Vs=Us(1),Fs=Us(2),Bs=Us(3),Ys=Us(4),$s=Us(5),Gs=Us(6),Hs=(Is.range,Vs.range,Fs.range,Bs.range,Ys.range,$s.range,Gs.range,gs(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),Xs=(Hs.range,gs(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Xs.every=function(t){return isFinite(t=Math.floor(t))&&t>0?gs(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Ws=Xs;Xs.range;function Ks(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Zs(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Qs(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Js,to,eo,no={"-":"",_:" ",0:"0"},ro=/^\s*\d+/,io=/^%/,ao=/[\\^$*+?|[\]().{}]/g;function so(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function oo(t){return t.replace(ao,"\\$&")}function co(t){return new RegExp("^(?:"+t.map(oo).join("|")+")","i")}function uo(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function fo(t,e,n){var r=ro.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function lo(t,e,n){var r=ro.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function ho(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function po(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function go(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function vo(t,e,n){var r=ro.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function mo(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function xo(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function bo(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function yo(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function _o(t,e,n){var r=ro.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function wo(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Mo(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function ko(t,e,n){var r=ro.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function So(t,e,n){var r=ro.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Ao(t,e,n){var r=ro.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Po(t,e,n){var r=io.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Co(t,e,n){var r=ro.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function No(t,e,n){var r=ro.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function To(t,e){return so(t.getDate(),e,2)}function Eo(t,e){return so(t.getHours(),e,2)}function zo(t,e){return so(t.getHours()%12||12,e,2)}function Ro(t,e){return so(1+Ms.count(js(t),t),e,3)}function jo(t,e){return so(t.getMilliseconds(),e,3)}function qo(t,e){return jo(t,e)+"000"}function Lo(t,e){return so(t.getMonth()+1,e,2)}function Do(t,e){return so(t.getMinutes(),e,2)}function Oo(t,e){return so(t.getSeconds(),e,2)}function Uo(t){var e=t.getDay();return 0===e?7:e}function Io(t,e){return so(Ss.count(js(t),t),e,2)}function Vo(t,e){var n=t.getDay();return t=n>=4||0===n?Ns(t):Ns.ceil(t),so(Ns.count(js(t),t)+(4===js(t).getDay()),e,2)}function Fo(t){return t.getDay()}function Bo(t,e){return so(As.count(js(t),t),e,2)}function Yo(t,e){return so(t.getFullYear()%100,e,2)}function $o(t,e){return so(t.getFullYear()%1e4,e,4)}function Go(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+so(e/60|0,"0",2)+so(e%60,"0",2)}function Ho(t,e){return so(t.getUTCDate(),e,2)}function Xo(t,e){return so(t.getUTCHours(),e,2)}function Wo(t,e){return so(t.getUTCHours()%12||12,e,2)}function Ko(t,e){return so(1+Os.count(Ws(t),t),e,3)}function Zo(t,e){return so(t.getUTCMilliseconds(),e,3)}function Qo(t,e){return Zo(t,e)+"000"}function Jo(t,e){return so(t.getUTCMonth()+1,e,2)}function tc(t,e){return so(t.getUTCMinutes(),e,2)}function ec(t,e){return so(t.getUTCSeconds(),e,2)}function nc(t){var e=t.getUTCDay();return 0===e?7:e}function rc(t,e){return so(Is.count(Ws(t),t),e,2)}function ic(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Ys(t):Ys.ceil(t),so(Ys.count(Ws(t),t)+(4===Ws(t).getUTCDay()),e,2)}function ac(t){return t.getUTCDay()}function sc(t,e){return so(Vs.count(Ws(t),t),e,2)}function oc(t,e){return so(t.getUTCFullYear()%100,e,2)}function cc(t,e){return so(t.getUTCFullYear()%1e4,e,4)}function uc(){return"+0000"}function fc(){return"%"}function lc(t){return+t}function hc(t){return Math.floor(+t/1e3)}!function(t){Js=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,s=t.shortDays,o=t.months,c=t.shortMonths,u=co(i),f=uo(i),l=co(a),h=uo(a),d=co(s),p=uo(s),g=co(o),v=uo(o),m=co(c),x=uo(c),b={a:function(t){return s[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:To,e:To,f:qo,H:Eo,I:zo,j:Ro,L:jo,m:Lo,M:Do,p:function(t){return i[+(t.getHours()>=12)]},Q:lc,s:hc,S:Oo,u:Uo,U:Io,V:Vo,w:Fo,W:Bo,x:null,X:null,y:Yo,Y:$o,Z:Go,"%":fc},y={a:function(t){return s[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:Ho,e:Ho,f:Qo,H:Xo,I:Wo,j:Ko,L:Zo,m:Jo,M:tc,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:lc,s:hc,S:ec,u:nc,U:rc,V:ic,w:ac,W:sc,x:null,X:null,y:oc,Y:cc,Z:uc,"%":fc},_={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=x[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=v[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:yo,e:yo,f:Ao,H:wo,I:wo,j:_o,L:So,m:bo,M:Mo,p:function(t,e,n){var r=u.exec(e.slice(n));return r?(t.p=f[r[0].toLowerCase()],n+r[0].length):-1},Q:Co,s:No,S:ko,u:lo,U:ho,V:po,w:fo,W:go,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:mo,Y:vo,Z:xo,"%":Po};function w(t,e){return function(n){var r,i,a,s=[],o=-1,c=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++o<u;)37===t.charCodeAt(o)&&(s.push(t.slice(c,o)),null!=(i=no[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),s.push(r),c=o+1);return s.push(t.slice(c,o)),s.join("")}}function M(t,e){return function(n){var r,i,a=Qs(1900);if(k(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=Zs(Qs(a.y))).getUTCDay(),r=i>4||0===i?Vs.ceil(r):Vs(r),r=Os.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=e(Qs(a.y))).getDay(),r=i>4||0===i?As.ceil(r):As(r),r=Ms.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?Zs(Qs(a.y)).getUTCDay():e(Qs(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Zs(a)):e(a)}}function k(t,e,n,r){for(var i,a,s=0,o=e.length,c=n.length;s<o;){if(r>=c)return-1;if(37===(i=e.charCodeAt(s++))){if(i=e.charAt(s++),!(a=_[i in no?e.charAt(s++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=w(n,b),b.X=w(r,b),b.c=w(e,b),y.x=w(n,y),y.X=w(r,y),y.c=w(e,y),{format:function(t){var e=w(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",Ks);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",y);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,Zs);return e.toString=function(){return t},e}}}(t),Js.format,Js.parse,to=Js.utcFormat,eo=Js.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||to("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||eo("%Y-%m-%dT%H:%M:%S.%LZ");function dc(t){var e=0,n=1,r=1,i=!1;function a(n){var a=(n-e)*r;return t(i?Math.max(0,Math.min(1,a)):a)}return a.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=e===n?0:1/(n-e),a):[e,n]},a.clamp=function(t){return arguments.length?(i=!!t,a):i},a.interpolator=function(e){return arguments.length?(t=e,a):t},a.copy=function(){return dc(t).domain([e,n]).clamp(i)},ls(a)}var pc=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},gc=(pc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),pc("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),pc("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),pc("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),pc("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),pc("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),pc("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),pc("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),pc("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return Nn(t[t.length-1])}),vc=(gc(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(pc)),gc(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(pc)),gc(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(pc)),gc(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(pc)),gc(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(pc)),gc(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(pc)),gc(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(pc)),gc(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(pc)),gc(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(pc)),gc(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(pc)),gc(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(pc)),gc(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(pc))),mc=(gc(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(pc)),gc(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(pc)),gc(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(pc)),gc(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(pc)),gc(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(pc))),xc=(gc(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(pc)),gc(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(pc)),gc(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(pc)),gc(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(pc)),gc(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(pc)),gc(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(pc)),gc(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(pc)));gc(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(pc)),gc(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(pc)),gc(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(pc)),Wn(bn(300,.5,0),bn(-240,.5,1)),Wn(bn(-100,.75,.35),bn(80,1.5,.8)),Wn(bn(260,.75,.35),bn(80,1.5,.8)),bn(),Ie(),Math.PI,Math.PI;function bc(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}bc(pc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),bc(pc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),bc(pc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),bc(pc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var yc=function(t){return function(){return t}},_c=(Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt,1e-12),wc=Math.PI,Mc=2*wc;function kc(t){this._context=t}kc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Sc=function(t){return new kc(t)};function Ac(t){return t[0]}function Pc(t){return t[1]}var Cc=function(){var t=Ac,e=Pc,n=yc(!0),r=null,i=Sc,a=null;function s(s){var o,c,u,f=s.length,l=!1;for(null==r&&(a=i(u=$r())),o=0;o<=f;++o)!(o<f&&n(c=s[o],o,s))===l&&((l=!l)?a.lineStart():a.lineEnd()),l&&a.point(+t(c,o,s),+e(c,o,s));if(u)return a=null,u+""||null}return s.x=function(e){return arguments.length?(t="function"==typeof e?e:yc(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:yc(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:yc(!!t),s):n},s.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),s):i},s.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),s):r},s},Nc=function(){var t=Ac,e=null,n=yc(0),r=Pc,i=yc(!0),a=null,s=Sc,o=null;function c(c){var u,f,l,h,d,p=c.length,g=!1,v=new Array(p),m=new Array(p);for(null==a&&(o=s(d=$r())),u=0;u<=p;++u){if(!(u<p&&i(h=c[u],u,c))===g)if(g=!g)f=u,o.areaStart(),o.lineStart();else{for(o.lineEnd(),o.lineStart(),l=u-1;l>=f;--l)o.point(v[l],m[l]);o.lineEnd(),o.areaEnd()}g&&(v[u]=+t(h,u,c),m[u]=+n(h,u,c),o.point(e?+e(h,u,c):v[u],r?+r(h,u,c):m[u]))}if(d)return o=null,d+""||null}function u(){return Cc().defined(i).curve(s).context(a)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:yc(+n),e=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:yc(+e),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:yc(+t),c):e},c.y=function(t){return arguments.length?(n="function"==typeof t?t:yc(+t),r=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:yc(+t),c):n},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:yc(+t),c):r},c.lineX0=c.lineY0=function(){return u().x(t).y(n)},c.lineY1=function(){return u().x(t).y(r)},c.lineX1=function(){return u().x(e).y(n)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:yc(!!t),c):i},c.curve=function(t){return arguments.length?(s=t,null!=a&&(o=s(a)),c):s},c.context=function(t){return arguments.length?(null==t?a=o=null:o=s(a=t),c):a},c};Ec(Sc);function Tc(t){this._curve=t}function Ec(t){function e(e){return new Tc(t(e))}return e._curve=t,e}Tc.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var zc=Math.sin(wc/10)/Math.sin(7*wc/10),Rc=(Math.sin(Mc/10),Math.cos(Mc/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function jc(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function qc(t){this._context=t}qc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:jc(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:jc(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Lc(t){this._context=t}Lc.prototype={areaStart:Rc,areaEnd:Rc,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:jc(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Dc(t){this._context=t}Dc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:jc(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Oc(t,e){this._basis=new qc(t),this._beta=e}Oc.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],a=e[0],s=t[n]-i,o=e[n]-a,c=-1;++c<=n;)r=c/n,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*s),this._beta*e[c]+(1-this._beta)*(a+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new qc(t):new Oc(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function Uc(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Ic(t,e){this._context=t,this._k=(1-e)/6}Ic.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Uc(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Uc(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Ic(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Vc(t,e){this._context=t,this._k=(1-e)/6}Vc.prototype={areaStart:Rc,areaEnd:Rc,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Uc(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Vc(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Fc(t,e){this._context=t,this._k=(1-e)/6}Fc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Uc(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Fc(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Bc(t,e,n){var r=t._x1,i=t._y1,a=t._x2,s=t._y2;if(t._l01_a>_c){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>_c){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*u+t._x1*t._l23_2a-e*t._l12_2a)/f,s=(s*u+t._y1*t._l23_2a-n*t._l12_2a)/f}t._context.bezierCurveTo(r,i,a,s,t._x2,t._y2)}function Yc(t,e){this._context=t,this._alpha=e}Yc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Bc(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Yc(t,e):new Ic(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function $c(t,e){this._context=t,this._alpha=e}$c.prototype={areaStart:Rc,areaEnd:Rc,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Bc(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new $c(t,e):new Vc(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Gc(t,e){this._context=t,this._alpha=e}Gc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Bc(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Gc(t,e):new Fc(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Hc(t){this._context=t}Hc.prototype={areaStart:Rc,areaEnd:Rc,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function Xc(t){return t<0?-1:1}function Wc(t,e,n){var r=t._x1-t._x0,i=e-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),s=(n-t._y1)/(i||r<0&&-0),o=(a*i+s*r)/(r+i);return(Xc(a)+Xc(s))*Math.min(Math.abs(a),Math.abs(s),.5*Math.abs(o))||0}function Kc(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Zc(t,e,n){var r=t._x0,i=t._y0,a=t._x1,s=t._y1,o=(a-r)/3;t._context.bezierCurveTo(r+o,i+o*e,a-o,s-o*n,a,s)}function Qc(t){this._context=t}function Jc(t){this._context=new tu(t)}function tu(t){this._context=t}function eu(t){this._context=t}function nu(t){var e,n,r=t.length-1,i=new Array(r),a=new Array(r),s=new Array(r);for(i[0]=0,a[0]=2,s[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,a[e]=4,s[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,a[r-1]=7,s[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/a[e-1],a[e]-=n,s[e]-=n*s[e-1];for(i[r-1]=s[r-1]/a[r-1],e=r-2;e>=0;--e)i[e]=(s[e]-i[e+1])/a[e];for(a[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)a[e]=2*t[e+1]-i[e+1];return[i,a]}Qc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Zc(this,this._t0,Kc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Zc(this,Kc(this,n=Wc(this,t,e)),n);break;default:Zc(this,this._t0,n=Wc(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(Jc.prototype=Object.create(Qc.prototype)).point=function(t,e){Qc.prototype.point.call(this,e,t)},tu.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,a){this._context.bezierCurveTo(e,t,r,n,a,i)}},eu.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=nu(t),i=nu(e),a=0,s=1;s<n;++a,++s)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[s],e[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function ru(t,e){this._context=t,this._t=e}ru.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function iu(t){return new ru(t,0)}function au(){this._=null}function su(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function ou(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function cu(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function uu(t){for(;t.L;)t=t.L;return t}au.prototype={constructor:au,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=uu(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(ou(this,n),n=(t=n).U),n.C=!1,r.C=!0,cu(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(cu(this,n),n=(t=n).U),n.C=!1,r.C=!0,ou(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,a=t.L,s=t.R;if(n=a?s?uu(s):a:s,i?i.L===t?i.L=n:i.R=n:this._=n,a&&s?(r=n.C,n.C=t.C,n.L=a,a.U=n,n!==s?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=s,s.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,ou(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,cu(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,ou(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,cu(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,ou(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,cu(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var fu=au;function lu(t,e,n,r){var i=[null,null],a=qu.push(i)-1;return i.left=t,i.right=e,n&&du(i,t,e,n),r&&du(i,e,t,r),Ru[t.index].halfedges.push(a),Ru[e.index].halfedges.push(a),i}function hu(t,e,n){var r=[e,n];return r.left=t,r}function du(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function pu(t,e,n,r,i){var a,s=t[0],o=t[1],c=s[0],u=s[1],f=0,l=1,h=o[0]-c,d=o[1]-u;if(a=e-c,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<l&&(l=a)}else if(h>0){if(a>l)return;a>f&&(f=a)}if(a=r-c,h||!(a<0)){if(a/=h,h<0){if(a>l)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<l&&(l=a)}if(a=n-u,d||!(a>0)){if(a/=d,d<0){if(a<f)return;a<l&&(l=a)}else if(d>0){if(a>l)return;a>f&&(f=a)}if(a=i-u,d||!(a<0)){if(a/=d,d<0){if(a>l)return;a>f&&(f=a)}else if(d>0){if(a<f)return;a<l&&(l=a)}return!(f>0||l<1)||(f>0&&(t[0]=[c+f*h,u+f*d]),l<1&&(t[1]=[c+l*h,u+l*d]),!0)}}}}}function gu(t,e,n,r,i){var a=t[1];if(a)return!0;var s,o,c=t[0],u=t.left,f=t.right,l=u[0],h=u[1],d=f[0],p=f[1],g=(l+d)/2,v=(h+p)/2;if(p===h){if(g<e||g>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[g,n];a=[g,i]}else{if(c){if(c[1]<n)return}else c=[g,i];a=[g,n]}}else if(o=v-(s=(l-d)/(p-h))*g,s<-1||s>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(n-o)/s,n];a=[(i-o)/s,i]}else{if(c){if(c[1]<n)return}else c=[(i-o)/s,i];a=[(n-o)/s,n]}else if(h<p){if(c){if(c[0]>=r)return}else c=[e,s*e+o];a=[r,s*r+o]}else{if(c){if(c[0]<e)return}else c=[r,s*r+o];a=[e,s*e+o]}return t[0]=c,t[1]=a,!0}function vu(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function mu(t,e){return e[+(e.left!==t.site)]}function xu(t,e){return e[+(e.left===t.site)]}var bu,yu=[];function _u(){su(this),this.x=this.y=this.arc=this.site=this.cy=null}function wu(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,a=n.site;if(r!==a){var s=i[0],o=i[1],c=r[0]-s,u=r[1]-o,f=a[0]-s,l=a[1]-o,h=2*(c*l-u*f);if(!(h>=-Du)){var d=c*c+u*u,p=f*f+l*l,g=(l*d-u*p)/h,v=(c*p-f*d)/h,m=yu.pop()||new _u;m.arc=t,m.site=i,m.x=g+s,m.y=(m.cy=v+o)+Math.sqrt(g*g+v*v),t.circle=m;for(var x=null,b=ju._;b;)if(m.y<b.y||m.y===b.y&&m.x<=b.x){if(!b.L){x=b.P;break}b=b.L}else{if(!b.R){x=b;break}b=b.R}ju.insert(x,m),x||(bu=m)}}}}function Mu(t){var e=t.circle;e&&(e.P||(bu=e.N),ju.remove(e),yu.push(e),su(e),t.circle=null)}var ku=[];function Su(){su(this),this.edge=this.site=this.circle=null}function Au(t){var e=ku.pop()||new Su;return e.site=t,e}function Pu(t){Mu(t),zu.remove(t),ku.push(t),su(t)}function Cu(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],a=t.P,s=t.N,o=[t];Pu(t);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<Lu&&Math.abs(r-c.circle.cy)<Lu;)a=c.P,o.unshift(c),Pu(c),c=a;o.unshift(c),Mu(c);for(var u=s;u.circle&&Math.abs(n-u.circle.x)<Lu&&Math.abs(r-u.circle.cy)<Lu;)s=u.N,o.push(u),Pu(u),u=s;o.push(u),Mu(u);var f,l=o.length;for(f=1;f<l;++f)u=o[f],c=o[f-1],du(u.edge,c.site,u.site,i);c=o[0],(u=o[l-1]).edge=lu(c.site,u.site,null,i),wu(c),wu(u)}function Nu(t){for(var e,n,r,i,a=t[0],s=t[1],o=zu._;o;)if((r=Tu(o,s)-a)>Lu)o=o.L;else{if(!((i=a-Eu(o,s))>Lu)){r>-Lu?(e=o.P,n=o):i>-Lu?(e=o,n=o.N):e=n=o;break}if(!o.R){e=o;break}o=o.R}!function(t){Ru[t.index]={site:t,halfedges:[]}}(t);var c=Au(t);if(zu.insert(e,c),e||n){if(e===n)return Mu(e),n=Au(e.site),zu.insert(c,n),c.edge=n.edge=lu(e.site,c.site),wu(e),void wu(n);if(n){Mu(e),Mu(n);var u=e.site,f=u[0],l=u[1],h=t[0]-f,d=t[1]-l,p=n.site,g=p[0]-f,v=p[1]-l,m=2*(h*v-d*g),x=h*h+d*d,b=g*g+v*v,y=[(v*x-d*b)/m+f,(h*b-g*x)/m+l];du(n.edge,u,p,y),c.edge=lu(u,t,null,y),n.edge=lu(t,p,null,y),wu(e),wu(n)}else c.edge=lu(e.site,c.site)}}function Tu(t,e){var n=t.site,r=n[0],i=n[1],a=i-e;if(!a)return r;var s=t.P;if(!s)return-1/0;var o=(n=s.site)[0],c=n[1],u=c-e;if(!u)return o;var f=o-r,l=1/a-1/u,h=f/u;return l?(-h+Math.sqrt(h*h-2*l*(f*f/(-2*u)-c+u/2+i-a/2)))/l+r:(r+o)/2}function Eu(t,e){var n=t.N;if(n)return Tu(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var zu,Ru,ju,qu,Lu=1e-6,Du=1e-12;function Ou(t,e){return e[1]-t[1]||e[0]-t[0]}function Uu(t,e){var n,r,i,a=t.sort(Ou).pop();for(qu=[],Ru=new Array(t.length),zu=new fu,ju=new fu;;)if(i=bu,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===n&&a[1]===r||(Nu(a),n=a[0],r=a[1]),a=t.pop();else{if(!i)break;Cu(i.arc)}if(function(){for(var t,e,n,r,i=0,a=Ru.length;i<a;++i)if((t=Ru[i])&&(r=(e=t.halfedges).length)){var s=new Array(r),o=new Array(r);for(n=0;n<r;++n)s[n]=n,o[n]=vu(t,qu[e[n]]);for(s.sort(function(t,e){return o[e]-o[t]}),n=0;n<r;++n)o[n]=e[s[n]];for(n=0;n<r;++n)e[n]=o[n]}}(),e){var s=+e[0][0],o=+e[0][1],c=+e[1][0],u=+e[1][1];!function(t,e,n,r){for(var i,a=qu.length;a--;)gu(i=qu[a],t,e,n,r)&&pu(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Lu||Math.abs(i[0][1]-i[1][1])>Lu)||delete qu[a]}(s,o,c,u),function(t,e,n,r){var i,a,s,o,c,u,f,l,h,d,p,g,v=Ru.length,m=!0;for(i=0;i<v;++i)if(a=Ru[i]){for(s=a.site,o=(c=a.halfedges).length;o--;)qu[c[o]]||c.splice(o,1);for(o=0,u=c.length;o<u;)p=(d=xu(a,qu[c[o]]))[0],g=d[1],l=(f=mu(a,qu[c[++o%u]]))[0],h=f[1],(Math.abs(p-l)>Lu||Math.abs(g-h)>Lu)&&(c.splice(o,0,qu.push(hu(s,d,Math.abs(p-t)<Lu&&r-g>Lu?[t,Math.abs(l-t)<Lu?h:r]:Math.abs(g-r)<Lu&&n-p>Lu?[Math.abs(h-r)<Lu?l:n,r]:Math.abs(p-n)<Lu&&g-e>Lu?[n,Math.abs(l-n)<Lu?h:e]:Math.abs(g-e)<Lu&&p-t>Lu?[Math.abs(h-e)<Lu?l:t,e]:null))-1),++u);u&&(m=!1)}if(m){var x,b,y,_=1/0;for(i=0,m=null;i<v;++i)(a=Ru[i])&&(y=(x=(s=a.site)[0]-t)*x+(b=s[1]-e)*b)<_&&(_=y,m=a);if(m){var w=[t,e],M=[t,r],k=[n,r],S=[n,e];m.halfedges.push(qu.push(hu(s=m.site,w,M))-1,qu.push(hu(s,M,k))-1,qu.push(hu(s,k,S))-1,qu.push(hu(s,S,w))-1)}}for(i=0;i<v;++i)(a=Ru[i])&&(a.halfedges.length||delete Ru[i])}(s,o,c,u)}this.edges=qu,this.cells=Ru,zu=ju=qu=Ru=null}Uu.prototype={constructor:Uu,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return mu(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(a=(i=n.halfedges).length)for(var i,a,s,o,c,u,f=n.site,l=-1,h=e[i[a-1]],d=h.left===f?h.right:h.left;++l<a;)s=d,d=(h=e[i[l]]).left===f?h.right:h.left,s&&d&&r<s.index&&r<d.index&&(c=s,u=d,((o=f)[0]-u[0])*(c[1]-o[1])-(o[0]-c[0])*(u[1]-o[1])<0)&&t.push([f.data,s.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,a=this,s=a._found||0,o=a.cells.length;!(i=a.cells[s]);)if(++s>=o)return null;var c=t-i.site[0],u=e-i.site[1],f=c*c+u*u;do{i=a.cells[r=s],s=null,i.halfedges.forEach(function(n){var r=a.edges[n],o=r.left;if(o!==i.site&&o||(o=r.right)){var c=t-o[0],u=e-o[1],l=c*c+u*u;l<f&&(f=l,s=o.index)}})}while(null!==s);return a._found=r,null==n||f<=n*n?i.site:null}};function Iu(t,e,n){this.k=t,this.x=e,this.y=n}Iu.prototype={constructor:Iu,scale:function(t){return 1===t?this:new Iu(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Iu(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Iu(1,0,0);Iu.prototype;function Vu(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var s,o=t[Symbol.iterator]();!(r=(s=o.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{r||null==o.return||o.return()}finally{if(i)throw a}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Fu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Bu=function(){function t(e,n,r,i){var a=Vu(r,2),s=a[0],o=a[1],c=Vu(i,2),u=c[0],f=c[1];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=e,this.height=n,this.xmin=s,this.xmax=o,this.xToViewport=hs().domain([s,o]).range([0,e]),this.yToViewport=hs().domain([u,f]).range([n,0])}var e,n,r;return e=t,(n=[{key:"x",value:function(t){return this.xToViewport.invert(t)}},{key:"y",value:function(t){return this.yToViewport.invert(t)}},{key:"u",value:function(t){return this.xToViewport(t)}},{key:"v",value:function(t){return this.yToViewport(t)}},{key:"xDomain",value:function(){return this.xToViewport.domain()}},{key:"yDomain",value:function(){return this.yToViewport.domain()}}])&&Fu(e.prototype,n),r&&Fu(e,r),t}(),Yu=n(1),$u=n.n(Yu);var Gu=function(t){if(!$u()(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");for(var e=t[0],n=1;n<t.length;n++)t[n]>e&&(e=t[n]);return e};var Hu=function(t){if(!$u()(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");for(var e=t[0],n=1;n<t.length;n++)t[n]<e&&(e=t[n]);return e};var Xu=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!$u()(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==n.output){if(!$u()(n.output))throw new TypeError("output option must be an array if specified");e=n.output}else e=new Array(t.length);var r=Hu(t),i=Gu(t);if(r===i)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var a=n.min,s=void 0===a?n.autoMinMax?r:0:a,o=n.max,c=void 0===o?n.autoMinMax?i:1:o;if(s>=c)throw new RangeError("min option must be smaller than max option");for(var u=(c-s)/(i-r),f=0;f<t.length;f++)e[f]=(t[f]-r)*u+s;return e};class Wu{constructor(t){var e,n,r,i,a,s,o,c,u,f=(t=_f.checkMatrix(t)).clone(),l=f.rows,h=f.columns,d=new Array(l),p=1;for(e=0;e<l;e++)d[e]=e;for(c=new Array(l),n=0;n<h;n++){for(e=0;e<l;e++)c[e]=f.get(e,n);for(e=0;e<l;e++){for(u=Math.min(e,n),a=0,r=0;r<u;r++)a+=f.get(e,r)*c[r];c[e]-=a,f.set(e,n,c[e])}for(i=n,e=n+1;e<l;e++)Math.abs(c[e])>Math.abs(c[i])&&(i=e);if(i!==n){for(r=0;r<h;r++)s=f.get(i,r),f.set(i,r,f.get(n,r)),f.set(n,r,s);o=d[i],d[i]=d[n],d[n]=o,p=-p}if(n<l&&0!==f.get(n,n))for(e=n+1;e<l;e++)f.set(e,n,f.get(e,n)/f.get(n,n))}this.LU=f,this.pivotVector=d,this.pivotSign=p}isSingular(){for(var t=this.LU,e=t.columns,n=0;n<e;n++)if(0===t[n][n])return!0;return!1}solve(t){t=yf.checkMatrix(t);var e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");var n,r,i,a=t.columns,s=t.subMatrixRow(this.pivotVector,0,a-1),o=e.columns;for(i=0;i<o;i++)for(n=i+1;n<o;n++)for(r=0;r<a;r++)s[n][r]-=s[i][r]*e[n][i];for(i=o-1;i>=0;i--){for(r=0;r<a;r++)s[i][r]/=e[i][i];for(n=0;n<i;n++)for(r=0;r<a;r++)s[n][r]-=s[i][r]*e[n][i]}return s}get determinant(){var t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");for(var e=this.pivotSign,n=t.columns,r=0;r<n;r++)e*=t[r][r];return e}get lowerTriangularMatrix(){for(var t=this.LU,e=t.rows,n=t.columns,r=new yf(e,n),i=0;i<e;i++)for(var a=0;a<n;a++)r[i][a]=i>a?t[i][a]:i===a?1:0;return r}get upperTriangularMatrix(){for(var t=this.LU,e=t.rows,n=t.columns,r=new yf(e,n),i=0;i<e;i++)for(var a=0;a<n;a++)r[i][a]=i<=a?t[i][a]:0;return r}get pivotPermutationVector(){return this.pivotVector.slice()}}function Ku(t,e){var n=0;return Math.abs(t)>Math.abs(e)?(n=e/t,Math.abs(t)*Math.sqrt(1+n*n)):0!==e?(n=t/e,Math.abs(e)*Math.sqrt(1+n*n)):0}function Zu(t,e,n){for(var r=new Array(t),i=0;i<t;i++){r[i]=new Array(e);for(var a=0;a<e;a++)r[i][a]=n}return r}class Qu{constructor(t,e={}){var n=(t=_f.checkMatrix(t)).rows,r=t.columns;const{computeLeftSingularVectors:i=!0,computeRightSingularVectors:a=!0,autoTranspose:s=!1}=e;var o,c=Boolean(i),u=Boolean(a),f=!1;if(n<r)if(s){n=(o=t.transpose()).rows,r=o.columns,f=!0;var l=c;c=u,u=l}else o=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else o=t.clone();var h=Math.min(n,r),d=Math.min(n+1,r),p=new Array(d),g=Zu(n,h,0),v=Zu(r,r,0),m=new Array(r),x=new Array(n),b=new Array(d);for(let t=0;t<d;t++)b[t]=t;var y=Math.min(n-1,r),_=Math.max(0,Math.min(r-2,n)),w=Math.max(y,_);for(let t=0;t<w;t++){if(t<y){p[t]=0;for(let e=t;e<n;e++)p[t]=Ku(p[t],o[e][t]);if(0!==p[t]){o[t][t]<0&&(p[t]=-p[t]);for(let e=t;e<n;e++)o[e][t]/=p[t];o[t][t]+=1}p[t]=-p[t]}for(let e=t+1;e<r;e++){if(t<y&&0!==p[t]){let r=0;for(let i=t;i<n;i++)r+=o[i][t]*o[i][e];r=-r/o[t][t];for(let i=t;i<n;i++)o[i][e]+=r*o[i][t]}m[e]=o[t][e]}if(c&&t<y)for(let e=t;e<n;e++)g[e][t]=o[e][t];if(t<_){m[t]=0;for(let e=t+1;e<r;e++)m[t]=Ku(m[t],m[e]);if(0!==m[t]){m[t+1]<0&&(m[t]=0-m[t]);for(let e=t+1;e<r;e++)m[e]/=m[t];m[t+1]+=1}if(m[t]=-m[t],t+1<n&&0!==m[t]){for(let e=t+1;e<n;e++)x[e]=0;for(let e=t+1;e<n;e++)for(let n=t+1;n<r;n++)x[e]+=m[n]*o[e][n];for(let e=t+1;e<r;e++){let r=-m[e]/m[t+1];for(let i=t+1;i<n;i++)o[i][e]+=r*x[i]}}if(u)for(let e=t+1;e<r;e++)v[e][t]=m[e]}}let M=Math.min(r,n+1);if(y<r&&(p[y]=o[y][y]),n<M&&(p[M-1]=0),_+1<M&&(m[_]=o[_][M-1]),m[M-1]=0,c){for(let t=y;t<h;t++){for(let e=0;e<n;e++)g[e][t]=0;g[t][t]=1}for(let t=y-1;t>=0;t--)if(0!==p[t]){for(let e=t+1;e<h;e++){let r=0;for(let i=t;i<n;i++)r+=g[i][t]*g[i][e];r=-r/g[t][t];for(let i=t;i<n;i++)g[i][e]+=r*g[i][t]}for(let e=t;e<n;e++)g[e][t]=-g[e][t];g[t][t]=1+g[t][t];for(let e=0;e<t-1;e++)g[e][t]=0}else{for(let e=0;e<n;e++)g[e][t]=0;g[t][t]=1}}if(u)for(let t=r-1;t>=0;t--){if(t<_&&0!==m[t])for(let e=t+1;e<r;e++){let n=0;for(let i=t+1;i<r;i++)n+=v[i][t]*v[i][e];n=-n/v[t+1][t];for(let i=t+1;i<r;i++)v[i][e]+=n*v[i][t]}for(let e=0;e<r;e++)v[e][t]=0;v[t][t]=1}for(var k=M-1,S=Number.EPSILON;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+S*Math.abs(p[t]+Math.abs(p[t+1]));if(Math.abs(m[t])<=e||Number.isNaN(m[t])){m[t]=0;break}}if(t===M-2)e=4;else{let n;for(n=M-1;n>=t&&n!==t;n--){let e=(n!==M?Math.abs(m[n]):0)+(n!==t+1?Math.abs(m[n-1]):0);if(Math.abs(p[n])<=S*e){p[n]=0;break}}n===t?e=3:n===M-1?e=1:(e=2,t=n)}switch(t++,e){case 1:{let e=m[M-2];m[M-2]=0;for(let n=M-2;n>=t;n--){let i=Ku(p[n],e),a=p[n]/i,s=e/i;if(p[n]=i,n!==t&&(e=-s*m[n-1],m[n-1]=a*m[n-1]),u)for(let t=0;t<r;t++)i=a*v[t][n]+s*v[t][M-1],v[t][M-1]=-s*v[t][n]+a*v[t][M-1],v[t][n]=i}break}case 2:{let e=m[t-1];m[t-1]=0;for(let r=t;r<M;r++){let i=Ku(p[r],e),a=p[r]/i,s=e/i;if(p[r]=i,e=-s*m[r],m[r]=a*m[r],c)for(let e=0;e<n;e++)i=a*g[e][r]+s*g[e][t-1],g[e][t-1]=-s*g[e][r]+a*g[e][t-1],g[e][r]=i}break}case 3:{const e=Math.max(Math.abs(p[M-1]),Math.abs(p[M-2]),Math.abs(m[M-2]),Math.abs(p[t]),Math.abs(m[t])),i=p[M-1]/e,a=p[M-2]/e,s=m[M-2]/e,o=p[t]/e,f=m[t]/e,l=((a+i)*(a-i)+s*s)/2,h=i*s*(i*s);let d=0;0===l&&0===h||(d=h/(l+(d=l<0?0-Math.sqrt(l*l+h):Math.sqrt(l*l+h))));let x=(o+i)*(o-i)+d,b=o*f;for(let e=t;e<M-1;e++){let i=Ku(x,b);0===i&&(i=Number.MIN_VALUE);let a=x/i,s=b/i;if(e!==t&&(m[e-1]=i),x=a*p[e]+s*m[e],m[e]=a*m[e]-s*p[e],b=s*p[e+1],p[e+1]=a*p[e+1],u)for(let t=0;t<r;t++)i=a*v[t][e]+s*v[t][e+1],v[t][e+1]=-s*v[t][e]+a*v[t][e+1],v[t][e]=i;if(0===(i=Ku(x,b))&&(i=Number.MIN_VALUE),a=x/i,s=b/i,p[e]=i,x=a*m[e]+s*p[e+1],p[e+1]=-s*m[e]+a*p[e+1],b=s*m[e+1],m[e+1]=a*m[e+1],c&&e<n-1)for(let t=0;t<n;t++)i=a*g[t][e]+s*g[t][e+1],g[t][e+1]=-s*g[t][e]+a*g[t][e+1],g[t][e]=i}m[M-2]=x,1;break}case 4:if(p[t]<=0&&(p[t]=p[t]<0?-p[t]:0,u))for(let e=0;e<=k;e++)v[e][t]=-v[e][t];for(;t<k&&!(p[t]>=p[t+1]);){let e=p[t];if(p[t]=p[t+1],p[t+1]=e,u&&t<r-1)for(let n=0;n<r;n++)e=v[n][t+1],v[n][t+1]=v[n][t],v[n][t]=e;if(c&&t<n-1)for(let r=0;r<n;r++)e=g[r][t+1],g[r][t+1]=g[r][t],g[r][t]=e;t++}0,M--}}if(f){var A=v;v=g,g=A}this.m=n,this.n=r,this.s=p,this.U=g,this.V=v}solve(t){var e=t,n=this.threshold,r=this.s.length,i=yf.zeros(r,r);for(let t=0;t<r;t++)Math.abs(this.s[t])<=n?i[t][t]=0:i[t][t]=1/this.s[t];var a=this.U,s=this.rightSingularVectors,o=s.mmul(i),c=s.rows,u=a.length,f=yf.zeros(c,u);for(let t=0;t<c;t++)for(let e=0;e<u;e++){let n=0;for(let i=0;i<r;i++)n+=o[t][i]*a[e][i];f[t][e]=n}return f.mmul(e)}solveForDiagonal(t){return this.solve(yf.diag(t))}inverse(){var t=this.V,e=this.threshold,n=t.length,r=t[0].length,i=new yf(n,this.s.length);for(let a=0;a<n;a++)for(let n=0;n<r;n++)Math.abs(this.s[n])>e?i[a][n]=t[a][n]/this.s[n]:i[a][n]=0;var a=this.U,s=a.length,o=a[0].length,c=new yf(n,s);for(let t=0;t<n;t++)for(let e=0;e<s;e++){let n=0;for(let r=0;r<o;r++)n+=i[t][r]*a[e][r];c[t][e]=n}return c}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){for(var t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,n=this.s,r=0,i=n.length;r<i;r++)n[r]>t&&e++;return e}get diagonal(){return this.s}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return yf.isMatrix(this.U)||(this.U=new yf(this.U)),this.U}get rightSingularVectors(){return yf.isMatrix(this.V)||(this.V=new yf(this.V)),this.V}get diagonalMatrix(){return yf.diag(this.s)}}function Ju(t,e,n){var r=n?t.rows:t.rows-1;if(e<0||e>r)throw new RangeError("Row index out of range")}function tf(t,e,n){var r=n?t.columns:t.columns-1;if(e<0||e>r)throw new RangeError("Column index out of range")}function ef(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function nf(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function rf(t,e,n){return{row:af(t,e),column:sf(t,n)}}function af(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some(e=>e<0||e>=t.rows))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function sf(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some(e=>e<0||e>=t.columns))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function of(t,e,n,r,i){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(cf("startRow",e),cf("endRow",n),cf("startColumn",r),cf("endColumn",i),e>n||r>i||e<0||e>=t.rows||n<0||n>=t.rows||r<0||r>=t.columns||i<0||i>=t.columns)throw new RangeError("Submatrix indices are out of range")}function cf(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}class uf extends(bf()){constructor(t,e,n){super(),this.matrix=t,this.rows=e,this.columns=n}static get[Symbol.species](){return yf}}class ff extends uf{constructor(t){super(t,t.columns,t.rows)}set(t,e,n){return this.matrix.set(e,t,n),this}get(t,e){return this.matrix.get(e,t)}}class lf extends uf{constructor(t,e){super(t,1,t.columns),this.row=e}set(t,e,n){return this.matrix.set(this.row,e,n),this}get(t,e){return this.matrix.get(this.row,e)}}class hf extends uf{constructor(t,e,n,r,i){of(t,e,n,r,i),super(t,n-e+1,i-r+1),this.startRow=e,this.startColumn=r}set(t,e,n){return this.matrix.set(this.startRow+t,this.startColumn+e,n),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}class df extends uf{constructor(t,e,n){var r=rf(t,e,n);super(t,r.row.length,r.column.length),this.rowIndices=r.row,this.columnIndices=r.column}set(t,e,n){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],n),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class pf extends uf{constructor(t,e){super(t,(e=af(t,e)).length,t.columns),this.rowIndices=e}set(t,e,n){return this.matrix.set(this.rowIndices[t],e,n),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class gf extends uf{constructor(t,e){e=sf(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,n){return this.matrix.set(t,this.columnIndices[e],n),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class vf extends uf{constructor(t,e){super(t,t.rows,1),this.column=e}set(t,e,n){return this.matrix.set(t,this.column,n),this}get(t){return this.matrix.get(t,this.column)}}class mf extends uf{constructor(t){super(t,t.rows,t.columns)}set(t,e,n){return this.matrix.set(this.rows-t-1,e,n),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class xf extends uf{constructor(t){super(t,t.rows,t.columns)}set(t,e,n){return this.matrix.set(t,this.columns-e-1,n),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}function bf(t){void 0===t&&(t=Object);class e extends t{static get[Symbol.species](){return this}static from1DArray(t,e,n){if(t*e!==n.length)throw new RangeError("Data length does not match given dimensions");for(var r=new this(t,e),i=0;i<t;i++)for(var a=0;a<e;a++)r.set(i,a,n[i*e+a]);return r}static rowVector(t){for(var e=new this(1,t.length),n=0;n<t.length;n++)e.set(0,n,t[n]);return e}static columnVector(t){for(var e=new this(t.length,1),n=0;n<t.length;n++)e.set(n,0,t[n]);return e}static empty(t,e){return new this(t,e)}static zeros(t,e){return this.empty(t,e).fill(0)}static ones(t,e){return this.empty(t,e).fill(1)}static rand(t,e,n){void 0===n&&(n=Math.random);for(var r=this.empty(t,e),i=0;i<t;i++)for(var a=0;a<e;a++)r.set(i,a,n());return r}static randInt(t,e,n,r){void 0===n&&(n=1e3),void 0===r&&(r=Math.random);for(var i=this.empty(t,e),a=0;a<t;a++)for(var s=0;s<e;s++){var o=Math.floor(r()*n);i.set(a,s,o)}return i}static eye(t,e,n){void 0===e&&(e=t),void 0===n&&(n=1);for(var r=Math.min(t,e),i=this.zeros(t,e),a=0;a<r;a++)i.set(a,a,n);return i}static diag(t,e,n){var r=t.length;void 0===e&&(e=r),void 0===n&&(n=e);for(var i=Math.min(r,e,n),a=this.zeros(e,n),s=0;s<i;s++)a.set(s,s,t[s]);return a}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);for(var n=t.rows,r=t.columns,i=new this(n,r),a=0;a<n;a++)for(var s=0;s<r;s++)i.set(a,s,Math.min(t.get(a,s),e.get(a,s)));return i}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);for(var n=t.rows,r=t.columns,i=new this(n,r),a=0;a<n;a++)for(var s=0;s<r;s++)i.set(a,s,Math.max(t.get(a,s),e.get(a,s)));return i}static checkMatrix(t){return e.isMatrix(t)?t:new this(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(var e=this.rows,n=this.columns,r=0;r<e;r++)for(var i=0;i<n;i++)t.call(this,r,i);return this}to1DArray(){for(var t=new Array(this.size),e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)t[e*this.columns+n]=this.get(e,n);return t}to2DArray(){for(var t=new Array(this.rows),e=0;e<this.rows;e++){t[e]=new Array(this.columns);for(var n=0;n<this.columns;n++)t[e][n]=this.get(e,n)}return t}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isSymmetric(){if(this.isSquare()){for(var t=0;t<this.rows;t++)for(var e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}set(t,e,n){throw new Error("set method is unimplemented")}get(t,e){throw new Error("get method is unimplemented")}repeat(t,e){t=t||1,e=e||1;for(var n=new this.constructor[Symbol.species](this.rows*t,this.columns*e),r=0;r<t;r++)for(var i=0;i<e;i++)n.setSubMatrix(this,this.rows*r,this.columns*i);return n}fill(t){for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,t);return this}neg(){return this.mulS(-1)}getRow(t){Ju(this,t);for(var e=new Array(this.columns),n=0;n<this.columns;n++)e[n]=this.get(t,n);return e}getRowVector(t){return this.constructor.rowVector(this.getRow(t))}setRow(t,e){Ju(this,t),e=ef(this,e);for(var n=0;n<this.columns;n++)this.set(t,n,e[n]);return this}swapRows(t,e){Ju(this,t),Ju(this,e);for(var n=0;n<this.columns;n++){var r=this.get(t,n);this.set(t,n,this.get(e,n)),this.set(e,n,r)}return this}getColumn(t){tf(this,t);for(var e=new Array(this.rows),n=0;n<this.rows;n++)e[n]=this.get(n,t);return e}getColumnVector(t){return this.constructor.columnVector(this.getColumn(t))}setColumn(t,e){tf(this,t),e=nf(this,e);for(var n=0;n<this.rows;n++)this.set(n,t,e[n]);return this}swapColumns(t,e){tf(this,t),tf(this,e);for(var n=0;n<this.rows;n++){var r=this.get(n,t);this.set(n,t,this.get(n,e)),this.set(n,e,r)}return this}addRowVector(t){t=ef(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[n]);return this}subRowVector(t){t=ef(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[n]);return this}mulRowVector(t){t=ef(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[n]);return this}divRowVector(t){t=ef(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[n]);return this}addColumnVector(t){t=nf(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)+t[e]);return this}subColumnVector(t){t=nf(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)-t[e]);return this}mulColumnVector(t){t=nf(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)*t[e]);return this}divColumnVector(t){t=nf(this,t);for(var e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.set(e,n,this.get(e,n)/t[e]);return this}mulRow(t,e){Ju(this,t);for(var n=0;n<this.columns;n++)this.set(t,n,this.get(t,n)*e);return this}mulColumn(t,e){tf(this,t);for(var n=0;n<this.rows;n++)this.set(n,t,this.get(n,t)*e);return this}max(){for(var t=this.get(0,0),e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.get(e,n)>t&&(t=this.get(e,n));return t}maxIndex(){for(var t=this.get(0,0),e=[0,0],n=0;n<this.rows;n++)for(var r=0;r<this.columns;r++)this.get(n,r)>t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}min(){for(var t=this.get(0,0),e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)this.get(e,n)<t&&(t=this.get(e,n));return t}minIndex(){for(var t=this.get(0,0),e=[0,0],n=0;n<this.rows;n++)for(var r=0;r<this.columns;r++)this.get(n,r)<t&&(t=this.get(n,r),e[0]=n,e[1]=r);return e}maxRow(t){Ju(this,t);for(var e=this.get(t,0),n=1;n<this.columns;n++)this.get(t,n)>e&&(e=this.get(t,n));return e}maxRowIndex(t){Ju(this,t);for(var e=this.get(t,0),n=[t,0],r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r),n[1]=r);return n}minRow(t){Ju(this,t);for(var e=this.get(t,0),n=1;n<this.columns;n++)this.get(t,n)<e&&(e=this.get(t,n));return e}minRowIndex(t){Ju(this,t);for(var e=this.get(t,0),n=[t,0],r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r),n[1]=r);return n}maxColumn(t){tf(this,t);for(var e=this.get(0,t),n=1;n<this.rows;n++)this.get(n,t)>e&&(e=this.get(n,t));return e}maxColumnIndex(t){tf(this,t);for(var e=this.get(0,t),n=[0,t],r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t),n[0]=r);return n}minColumn(t){tf(this,t);for(var e=this.get(0,t),n=1;n<this.rows;n++)this.get(n,t)<e&&(e=this.get(n,t));return e}minColumnIndex(t){tf(this,t);for(var e=this.get(0,t),n=[0,t],r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t),n[0]=r);return n}diag(){for(var t=Math.min(this.rows,this.columns),e=new Array(t),n=0;n<t;n++)e[n]=this.get(n,n);return e}sum(t){switch(t){case"row":return function(t){for(var e=yf.zeros(t.rows,1),n=0;n<t.rows;++n)for(var r=0;r<t.columns;++r)e.set(n,0,e.get(n,0)+t.get(n,r));return e}(this);case"column":return function(t){for(var e=yf.zeros(1,t.columns),n=0;n<t.rows;++n)for(var r=0;r<t.columns;++r)e.set(0,r,e.get(0,r)+t.get(n,r));return e}(this);default:return function(t){for(var e=0,n=0;n<t.rows;n++)for(var r=0;r<t.columns;r++)e+=t.get(n,r);return e}(this)}}mean(){return this.sum()/this.size}prod(){for(var t=1,e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)t*=this.get(e,n);return t}norm(t="frobenius"){var e=0;if("max"===t)return this.max();if("frobenius"===t){for(var n=0;n<this.rows;n++)for(var r=0;r<this.columns;r++)e+=this.get(n,r)*this.get(n,r);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){for(var t=0,e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)t+=this.get(e,n),this.set(e,n,t);return this}dot(t){e.isMatrix(t)&&(t=t.to1DArray());var n=this.to1DArray();if(n.length!==t.length)throw new RangeError("vectors do not have the same size");for(var r=0,i=0;i<n.length;i++)r+=n[i]*t[i];return r}mmul(t){t=this.constructor.checkMatrix(t),this.columns!==t.rows&&console.warn("Number of columns of left matrix are not equal to number of rows of right matrix.");for(var e=this.rows,n=this.columns,r=t.columns,i=new this.constructor[Symbol.species](e,r),a=new Array(n),s=0;s<r;s++){for(var o=0;o<n;o++)a[o]=t.get(o,s);for(var c=0;c<e;c++){var u=0;for(o=0;o<n;o++)u+=this.get(c,o)*a[o];i.set(c,s,u)}}return i}strassen2x2(t){var e=new this.constructor[Symbol.species](2,2);const n=this.get(0,0),r=t.get(0,0),i=this.get(0,1),a=t.get(0,1),s=this.get(1,0),o=t.get(1,0),c=this.get(1,1),u=t.get(1,1),f=(n+c)*(r+u),l=(s+c)*r,h=n*(a-u),d=c*(o-r),p=(n+i)*u,g=f+d-p+(i-c)*(o+u),v=h+p,m=l+d,x=f-l+h+(s-n)*(r+a);return e.set(0,0,g),e.set(0,1,v),e.set(1,0,m),e.set(1,1,x),e}strassen3x3(t){var e=new this.constructor[Symbol.species](3,3);const n=this.get(0,0),r=this.get(0,1),i=this.get(0,2),a=this.get(1,0),s=this.get(1,1),o=this.get(1,2),c=this.get(2,0),u=this.get(2,1),f=this.get(2,2),l=t.get(0,0),h=t.get(0,1),d=t.get(0,2),p=t.get(1,0),g=t.get(1,1),v=t.get(1,2),m=t.get(2,0),x=t.get(2,1),b=t.get(2,2),y=(n-a)*(-h+g),_=(-n+a+s)*(l-h+g),w=(a+s)*(-l+h),M=n*l,k=(-n+c+u)*(l-d+v),S=(-n+c)*(d-v),A=(c+u)*(-l+d),P=(-i+u+f)*(g+m-x),C=(i-f)*(g-x),N=i*m,T=(u+f)*(-m+x),E=(-i+s+o)*(v+m-b),z=(i-o)*(v-b),R=(s+o)*(-m+b),j=M+N+r*p,q=(n+r+i-a-s-u-f)*g+_+w+M+P+N+T,L=M+k+A+(n+r+i-s-o-c-u)*v+N+E+R,D=y+s*(-l+h+p-g-v-m+b)+_+M+N+E+z,O=y+_+w+M+o*x,U=N+E+z+R+a*d,I=M+k+S+u*(-l+d+p-g-v-m+x)+P+C+N,V=P+C+N+T+c*h,F=M+k+S+A+f*b;return e.set(0,0,j),e.set(0,1,q),e.set(0,2,L),e.set(1,0,D),e.set(1,1,O),e.set(1,2,U),e.set(2,0,I),e.set(2,1,V),e.set(2,2,F),e}mmulStrassen(t){var n=this.clone(),r=n.rows,i=n.columns,a=t.rows,s=t.columns;function o(t,n,r){var i=t.rows,a=t.columns;if(i===n&&a===r)return t;var s=e.zeros(n,r);return s=s.setSubMatrix(t,0,0)}i!==a&&console.warn(`Multiplying ${r} x ${i} and ${a} x ${s} matrix: dimensions do not match.`);var c=Math.max(r,a),u=Math.max(i,s);return function t(n,r,i,a){if(i<=512||a<=512)return n.mmul(r);i%2==1&&a%2==1?(n=o(n,i+1,a+1),r=o(r,i+1,a+1)):i%2==1?(n=o(n,i+1,a),r=o(r,i+1,a)):a%2==1&&(n=o(n,i,a+1),r=o(r,i,a+1));var s=parseInt(n.rows/2,10),c=parseInt(n.columns/2,10),u=n.subMatrix(0,s-1,0,c-1),f=r.subMatrix(0,s-1,0,c-1),l=n.subMatrix(0,s-1,c,n.columns-1),h=r.subMatrix(0,s-1,c,r.columns-1),d=n.subMatrix(s,n.rows-1,0,c-1),p=r.subMatrix(s,r.rows-1,0,c-1),g=n.subMatrix(s,n.rows-1,c,n.columns-1),v=r.subMatrix(s,r.rows-1,c,r.columns-1),m=t(e.add(u,g),e.add(f,v),s,c),x=t(e.add(d,g),f,s,c),b=t(u,e.sub(h,v),s,c),y=t(g,e.sub(p,f),s,c),_=t(e.add(u,l),v,s,c),w=t(e.sub(d,u),e.add(f,h),s,c),M=t(e.sub(l,g),e.add(p,v),s,c),k=e.add(m,y);k.sub(_),k.add(M);var S=e.add(b,_),A=e.add(x,y),P=e.sub(m,x);P.add(b),P.add(w);var C=e.zeros(2*k.rows,2*k.columns);return(C=(C=(C=(C=C.setSubMatrix(k,0,0)).setSubMatrix(S,k.rows,0)).setSubMatrix(A,0,k.columns)).setSubMatrix(P,k.rows,k.columns)).subMatrix(0,i-1,0,a-1)}(n=o(n,c,u),t=o(t,c,u),c,u)}scaleRows(t,e){if((t=void 0===t?0:t)>=(e=void 0===e?1:e))throw new RangeError("min should be strictly smaller than max");for(var n=this.constructor.empty(this.rows,this.columns),r=0;r<this.rows;r++){var i=Xu(this.getRow(r),{min:t,max:e});n.setRow(r,i)}return n}scaleColumns(t,e){if((t=void 0===t?0:t)>=(e=void 0===e?1:e))throw new RangeError("min should be strictly smaller than max");for(var n=this.constructor.empty(this.rows,this.columns),r=0;r<this.columns;r++){var i=Xu(this.getColumn(r),{min:t,max:e});n.setColumn(r,i)}return n}kroneckerProduct(t){t=this.constructor.checkMatrix(t);for(var e=this.rows,n=this.columns,r=t.rows,i=t.columns,a=new this.constructor[Symbol.species](e*r,n*i),s=0;s<e;s++)for(var o=0;o<n;o++)for(var c=0;c<r;c++)for(var u=0;u<i;u++)a[r*s+c][i*o+u]=this.get(s,o)*t.get(c,u);return a}transpose(){for(var t=new this.constructor[Symbol.species](this.columns,this.rows),e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)t.set(n,e,this.get(e,n));return t}sortRows(t){void 0===t&&(t=n);for(var e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t){void 0===t&&(t=n);for(var e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,n,r){of(this,t,e,n,r);for(var i=new this.constructor[Symbol.species](e-t+1,r-n+1),a=t;a<=e;a++)for(var s=n;s<=r;s++)i[a-t][s-n]=this.get(a,s);return i}subMatrixRow(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.columns-1),e>n||e<0||e>=this.columns||n<0||n>=this.columns)throw new RangeError("Argument out of range");for(var r=new this.constructor[Symbol.species](t.length,n-e+1),i=0;i<t.length;i++)for(var a=e;a<=n;a++){if(t[i]<0||t[i]>=this.rows)throw new RangeError(`Row index out of range: ${t[i]}`);r.set(i,a-e,this.get(t[i],a))}return r}subMatrixColumn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=this.rows-1),e>n||e<0||e>=this.rows||n<0||n>=this.rows)throw new RangeError("Argument out of range");for(var r=new this.constructor[Symbol.species](n-e+1,t.length),i=0;i<t.length;i++)for(var a=e;a<=n;a++){if(t[i]<0||t[i]>=this.columns)throw new RangeError(`Column index out of range: ${t[i]}`);r.set(a-e,i,this.get(a,t[i]))}return r}setSubMatrix(t,e,n){of(this,e,e+(t=this.constructor.checkMatrix(t)).rows-1,n,n+t.columns-1);for(var r=0;r<t.rows;r++)for(var i=0;i<t.columns;i++)this[e+r][n+i]=t.get(r,i);return this}selection(t,e){for(var n=rf(this,t,e),r=new this.constructor[Symbol.species](t.length,e.length),i=0;i<n.row.length;i++)for(var a=n.row[i],s=0;s<n.column.length;s++){var o=n.column[s];r[i][s]=this.get(a,o)}return r}trace(){for(var t=Math.min(this.rows,this.columns),e=0,n=0;n<t;n++)e+=this.get(n,n);return e}transposeView(){return new ff(this)}rowView(t){return Ju(this,t),new lf(this,t)}columnView(t){return tf(this,t),new vf(this,t)}flipRowView(){return new mf(this)}flipColumnView(){return new xf(this)}subMatrixView(t,e,n,r){return new hf(this,t,e,n,r)}selectionView(t,e){return new df(this,t,e)}rowSelectionView(t){return new pf(this,t)}columnSelectionView(t){return new gf(this,t)}det(){var t,e,n,r,i,a;if(this.isSquare())return 2===this.columns?(t=this.get(0,0),e=this.get(0,1),n=this.get(1,0),t*this.get(1,1)-e*n):3===this.columns?(r=this.selectionView([1,2],[1,2]),i=this.selectionView([1,2],[0,2]),a=this.selectionView([1,2],[0,1]),t=this.get(0,0),e=this.get(0,1),n=this.get(0,2),t*r.det()-e*i.det()+n*a.det()):new Wu(this).determinant;throw Error("Determinant can only be calculated for a square matrix.")}pseudoInverse(t){void 0===t&&(t=Number.EPSILON);for(var e=new Qu(this,{autoTranspose:!0}),n=e.leftSingularVectors,r=e.rightSingularVectors,i=e.diagonal,a=0;a<i.length;a++)Math.abs(i[a])>t?i[a]=1/i[a]:i[a]=0;return i=this.constructor[Symbol.species].diag(i),r.mmul(i.mmul(n.transposeView()))}clone(){for(var t=new this.constructor[Symbol.species](this.rows,this.columns),e=0;e<this.rows;e++)for(var n=0;n<this.columns;n++)t.set(e,n,this.get(e,n));return t}}function n(t,e){return t-e}e.prototype.klass="Matrix",e.random=e.rand,e.diagonal=e.diag,e.prototype.diagonal=e.prototype.diag,e.identity=e.eye,e.prototype.negate=e.prototype.neg,e.prototype.tensorProduct=e.prototype.kroneckerProduct,e.prototype.determinant=e.prototype.det;var r,i="\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n",a=eval;for(var s of[["+","add"],["-","sub","subtract"],["*","mul","multiply"],["/","div","divide"],["%","mod","modulus"],["&","and"],["|","or"],["^","xor"],["<<","leftShift"],[">>","signPropagatingRightShift"],[">>>","rightShift","zeroFillRightShift"]]){var o=a(k("\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n",{name:s[1],op:s[0]})),c=a(k("\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n",{name:`${s[1]}S`,op:s[0]})),u=a(k("\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n",{name:`${s[1]}M`,op:s[0]})),f=a(k("\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n",{name:s[1]}));for(r=1;r<s.length;r++)e.prototype[s[r]]=o,e.prototype[`${s[r]}S`]=c,e.prototype[`${s[r]}M`]=u,e[s[r]]=f}var l=[["~","not"]];for(var h of(["abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc"].forEach(function(t){l.push([`Math.${t}`,t])}),l)){var d=a(k("\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n",{name:h[1],method:h[0]})),p=a(k("\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n",{name:h[1]}));for(r=1;r<h.length;r++)e.prototype[h[r]]=d,e[h[r]]=p}for(var g of[["Math.pow",1,"pow"]]){var v="arg0";for(r=1;r<g[1];r++)v+=`, arg${r}`;if(1!==g[1]){var m=a(k("\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n",{name:g[2],method:g[0],args:v})),x=a(k(i,{name:g[2],args:v}));for(r=2;r<g.length;r++)e.prototype[g[r]]=m,e[g[r]]=x}else{var b={name:g[2],args:v,method:g[0]},y=a(k("\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n",b)),_=a(k("\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n",b)),w=a(k("\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n",b)),M=a(k("\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n",b));for(r=2;r<g.length;r++)e.prototype[g[r]]=y,e.prototype[`${g[r]}M`]=w,e.prototype[`${g[r]}S`]=_,e[g[r]]=M}}function k(t,e){for(var n in e)t=t.replace(new RegExp(`%${n}%`,"g"),e[n]);return t}return e}class yf extends(bf(Array)){constructor(t,e){var n;if(1===arguments.length&&"number"==typeof t)return new Array(t);if(yf.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>0){if(super(t),!(Number.isInteger(e)&&e>0))throw new TypeError("nColumns must be a positive integer");for(n=0;n<t;n++)this[n]=new Array(e)}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const r=t;if(t=r.length,"number"!=typeof(e=r[0].length)||0===e)throw new TypeError("Data must be a 2D array with at least one element");for(super(t),n=0;n<t;n++){if(r[n].length!==e)throw new RangeError("Inconsistent array dimensions");this[n]=[].concat(r[n])}}}return this.rows=t,this.columns=e,this}set(t,e,n){return this[t][e]=n,this}get(t,e){return this[t][e]}removeRow(t){if(Ju(this,t),1===this.rows)throw new RangeError("A matrix cannot have less than one row");return this.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),Ju(this,t,!0),e=ef(this,e),this.splice(t,0,e),this.rows+=1,this}removeColumn(t){if(tf(this,t),1===this.columns)throw new RangeError("A matrix cannot have less than one column");for(var e=0;e<this.rows;e++)this[e].splice(t,1);return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),tf(this,t,!0),e=nf(this,e);for(var n=0;n<this.rows;n++)this[n].splice(t,0,e[n]);return this.columns+=1,this}}class _f extends(bf()){constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,n){return this.data[t][e]=n,this}get(t,e){return this.data[t][e]}static get[Symbol.species](){return yf}}class wf{constructor(t){var e,n,r,i,a=(t=_f.checkMatrix(t)).clone(),s=t.rows,o=t.columns,c=new Array(o);for(r=0;r<o;r++){var u=0;for(e=r;e<s;e++)u=Ku(u,a.get(e,r));if(0!==u){for(a.get(r,r)<0&&(u=-u),e=r;e<s;e++)a.set(e,r,a.get(e,r)/u);for(a.set(r,r,a.get(r,r)+1),n=r+1;n<o;n++){for(i=0,e=r;e<s;e++)i+=a.get(e,r)*a.get(e,n);for(i=-i/a.get(r,r),e=r;e<s;e++)a.set(e,n,a.get(e,n)+i*a.get(e,r))}}c[r]=-u}this.QR=a,this.Rdiag=c}solve(t){t=yf.checkMatrix(t);var e=this.QR,n=e.rows;if(t.rows!==n)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");var r,i,a,s,o=t.columns,c=t.clone(),u=e.columns;for(a=0;a<u;a++)for(i=0;i<o;i++){for(s=0,r=a;r<n;r++)s+=e[r][a]*c[r][i];for(s=-s/e[a][a],r=a;r<n;r++)c[r][i]+=s*e[r][a]}for(a=u-1;a>=0;a--){for(i=0;i<o;i++)c[a][i]/=this.Rdiag[a];for(r=0;r<a;r++)for(i=0;i<o;i++)c[r][i]-=c[a][i]*e[r][a]}return c.subMatrix(0,u-1,0,o-1)}isFullRank(){for(var t=this.QR.columns,e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){var t,e,n=this.QR,r=n.columns,i=new yf(r,r);for(t=0;t<r;t++)for(e=0;e<r;e++)i[t][e]=t<e?n[t][e]:t===e?this.Rdiag[t]:0;return i}get orthogonalMatrix(){var t,e,n,r,i=this.QR,a=i.rows,s=i.columns,o=new yf(a,s);for(n=s-1;n>=0;n--){for(t=0;t<a;t++)o[t][n]=0;for(o[n][n]=1,e=n;e<s;e++)if(0!==i[n][n]){for(r=0,t=n;t<a;t++)r+=i[t][n]*o[t][e];for(r=-r/i[n][n],t=n;t<a;t++)o[t][e]+=r*i[t][n]}}return o}}function Mf(t,e=!1){return t=_f.checkMatrix(t),e?new Qu(t).inverse():kf(t,yf.eye(t.rows))}function kf(t,e,n=!1){return t=_f.checkMatrix(t),e=_f.checkMatrix(e),n?new Qu(t).solve(e):t.isSquare()?new Wu(t).solve(e):new wf(t).solve(e)}class Sf{constructor(t,e={}){const{assumeSymmetric:n=!1}=e;if(!(t=_f.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");var r,i,a=t.columns,s=Zu(a,a,0),o=new Array(a),c=new Array(a),u=t;if(!!n||t.isSymmetric()){for(r=0;r<a;r++)for(i=0;i<a;i++)s[r][i]=u.get(r,i);!function(t,e,n,r){var i,a,s,o,c,u,f,l;for(c=0;c<t;c++)n[c]=r[t-1][c];for(o=t-1;o>0;o--){for(l=0,s=0,u=0;u<o;u++)l+=Math.abs(n[u]);if(0===l)for(e[o]=n[o-1],c=0;c<o;c++)n[c]=r[o-1][c],r[o][c]=0,r[c][o]=0;else{for(u=0;u<o;u++)n[u]/=l,s+=n[u]*n[u];for(i=n[o-1],a=Math.sqrt(s),i>0&&(a=-a),e[o]=l*a,s-=i*a,n[o-1]=i-a,c=0;c<o;c++)e[c]=0;for(c=0;c<o;c++){for(i=n[c],r[c][o]=i,a=e[c]+r[c][c]*i,u=c+1;u<=o-1;u++)a+=r[u][c]*n[u],e[u]+=r[u][c]*i;e[c]=a}for(i=0,c=0;c<o;c++)e[c]/=s,i+=e[c]*n[c];for(f=i/(s+s),c=0;c<o;c++)e[c]-=f*n[c];for(c=0;c<o;c++){for(i=n[c],a=e[c],u=c;u<=o-1;u++)r[u][c]-=i*e[u]+a*n[u];n[c]=r[o-1][c],r[o][c]=0}}n[o]=s}for(o=0;o<t-1;o++){if(r[t-1][o]=r[o][o],r[o][o]=1,0!==(s=n[o+1])){for(u=0;u<=o;u++)n[u]=r[u][o+1]/s;for(c=0;c<=o;c++){for(a=0,u=0;u<=o;u++)a+=r[u][o+1]*r[u][c];for(u=0;u<=o;u++)r[u][c]-=a*n[u]}}for(u=0;u<=o;u++)r[u][o+1]=0}for(c=0;c<t;c++)n[c]=r[t-1][c],r[t-1][c]=0;r[t-1][t-1]=1,e[0]=0}(a,c,o,s),function(t,e,n,r){var i,a,s,o,c,u,f,l,h,d,p,g,v,m,x,b;for(s=1;s<t;s++)e[s-1]=e[s];e[t-1]=0;var y=0,_=0,w=Number.EPSILON;for(u=0;u<t;u++){for(_=Math.max(_,Math.abs(n[u])+Math.abs(e[u])),f=u;f<t&&!(Math.abs(e[f])<=w*_);)f++;if(f>u){0;do{for(1,i=n[u],l=(n[u+1]-i)/(2*e[u]),h=Ku(l,1),l<0&&(h=-h),n[u]=e[u]/(l+h),n[u+1]=e[u]*(l+h),d=n[u+1],a=i-n[u],s=u+2;s<t;s++)n[s]-=a;for(y+=a,l=n[f],g=p=1,v=p,m=e[u+1],x=0,b=0,s=f-1;s>=u;s--)for(v=g,g=p,b=x,i=p*e[s],a=p*l,h=Ku(l,e[s]),e[s+1]=x*h,x=e[s]/h,l=(p=l/h)*n[s]-x*i,n[s+1]=a+x*(p*i+x*n[s]),c=0;c<t;c++)a=r[c][s+1],r[c][s+1]=x*r[c][s]+p*a,r[c][s]=p*r[c][s]-x*a;l=-x*b*v*m*e[u]/d,e[u]=x*l,n[u]=p*l}while(Math.abs(e[u])>w*_)}n[u]=n[u]+y,e[u]=0}for(s=0;s<t-1;s++){for(c=s,l=n[s],o=s+1;o<t;o++)n[o]<l&&(c=o,l=n[o]);if(c!==s)for(n[c]=n[s],n[s]=l,o=0;o<t;o++)l=r[o][s],r[o][s]=r[o][c],r[o][c]=l}}(a,c,o,s)}else{var f=Zu(a,a,0),l=new Array(a);for(i=0;i<a;i++)for(r=0;r<a;r++)f[r][i]=u.get(r,i);!function(t,e,n,r){var i,a,s,o,c,u,f,l=t-1;for(u=1;u<=l-1;u++){for(f=0,o=u;o<=l;o++)f+=Math.abs(e[o][u-1]);if(0!==f){for(s=0,o=l;o>=u;o--)n[o]=e[o][u-1]/f,s+=n[o]*n[o];for(a=Math.sqrt(s),n[u]>0&&(a=-a),s-=n[u]*a,n[u]=n[u]-a,c=u;c<t;c++){for(i=0,o=l;o>=u;o--)i+=n[o]*e[o][c];for(i/=s,o=u;o<=l;o++)e[o][c]-=i*n[o]}for(o=0;o<=l;o++){for(i=0,c=l;c>=u;c--)i+=n[c]*e[o][c];for(i/=s,c=u;c<=l;c++)e[o][c]-=i*n[c]}n[u]=f*n[u],e[u][u-1]=f*a}}for(o=0;o<t;o++)for(c=0;c<t;c++)r[o][c]=o===c?1:0;for(u=l-1;u>=1;u--)if(0!==e[u][u-1]){for(o=u+1;o<=l;o++)n[o]=e[o][u-1];for(c=u;c<=l;c++){for(a=0,o=u;o<=l;o++)a+=n[o]*r[o][c];for(a=a/n[u]/e[u][u-1],o=u;o<=l;o++)r[o][c]+=a*n[o]}}}(a,f,l,s),function(t,e,n,r,i){var a,s,o,c,u,f,l,h,d,p,g,v,m,x,b,y=t-1,_=t-1,w=Number.EPSILON,M=0,k=0,S=0,A=0,P=0,C=0,N=0,T=0;for(a=0;a<t;a++)for((a<0||a>_)&&(n[a]=i[a][a],e[a]=0),s=Math.max(a-1,0);s<t;s++)k+=Math.abs(i[a][s]);for(;y>=0;){for(c=y;c>0&&(0===(C=Math.abs(i[c-1][c-1])+Math.abs(i[c][c]))&&(C=k),!(Math.abs(i[c][c-1])<w*C));)c--;if(c===y)i[y][y]=i[y][y]+M,n[y]=i[y][y],e[y]=0,y--,T=0;else if(c===y-1){if(l=i[y][y-1]*i[y-1][y],S=(i[y-1][y-1]-i[y][y])/2,A=S*S+l,N=Math.sqrt(Math.abs(A)),i[y][y]=i[y][y]+M,i[y-1][y-1]=i[y-1][y-1]+M,h=i[y][y],A>=0){for(N=S>=0?S+N:S-N,n[y-1]=h+N,n[y]=n[y-1],0!==N&&(n[y]=h-l/N),e[y-1]=0,e[y]=0,h=i[y][y-1],C=Math.abs(h)+Math.abs(N),S=h/C,A=N/C,P=Math.sqrt(S*S+A*A),S/=P,A/=P,s=y-1;s<t;s++)N=i[y-1][s],i[y-1][s]=A*N+S*i[y][s],i[y][s]=A*i[y][s]-S*N;for(a=0;a<=y;a++)N=i[a][y-1],i[a][y-1]=A*N+S*i[a][y],i[a][y]=A*i[a][y]-S*N;for(a=0;a<=_;a++)N=r[a][y-1],r[a][y-1]=A*N+S*r[a][y],r[a][y]=A*r[a][y]-S*N}else n[y-1]=h+S,n[y]=h+S,e[y-1]=N,e[y]=-N;y-=2,T=0}else{if(h=i[y][y],d=0,l=0,c<y&&(d=i[y-1][y-1],l=i[y][y-1]*i[y-1][y]),10===T){for(M+=h,a=0;a<=y;a++)i[a][a]-=h;C=Math.abs(i[y][y-1])+Math.abs(i[y-1][y-2]),h=d=.75*C,l=-.4375*C*C}if(30===T&&(C=(C=(d-h)/2)*C+l)>0){for(C=Math.sqrt(C),d<h&&(C=-C),C=h-l/((d-h)/2+C),a=0;a<=y;a++)i[a][a]-=C;M+=C,h=d=l=.964}for(T+=1,u=y-2;u>=c&&(N=i[u][u],S=((P=h-N)*(C=d-N)-l)/i[u+1][u]+i[u][u+1],A=i[u+1][u+1]-N-P-C,P=i[u+2][u+1],C=Math.abs(S)+Math.abs(A)+Math.abs(P),S/=C,A/=C,P/=C,u!==c)&&!(Math.abs(i[u][u-1])*(Math.abs(A)+Math.abs(P))<w*(Math.abs(S)*(Math.abs(i[u-1][u-1])+Math.abs(N)+Math.abs(i[u+1][u+1]))));)u--;for(a=u+2;a<=y;a++)i[a][a-2]=0,a>u+2&&(i[a][a-3]=0);for(o=u;o<=y-1&&(x=o!==y-1,o!==u&&(S=i[o][o-1],A=i[o+1][o-1],P=x?i[o+2][o-1]:0,0!==(h=Math.abs(S)+Math.abs(A)+Math.abs(P))&&(S/=h,A/=h,P/=h)),0!==h);o++)if(C=Math.sqrt(S*S+A*A+P*P),S<0&&(C=-C),0!==C){for(o!==u?i[o][o-1]=-C*h:c!==u&&(i[o][o-1]=-i[o][o-1]),h=(S+=C)/C,d=A/C,N=P/C,A/=S,P/=S,s=o;s<t;s++)S=i[o][s]+A*i[o+1][s],x&&(S+=P*i[o+2][s],i[o+2][s]=i[o+2][s]-S*N),i[o][s]=i[o][s]-S*h,i[o+1][s]=i[o+1][s]-S*d;for(a=0;a<=Math.min(y,o+3);a++)S=h*i[a][o]+d*i[a][o+1],x&&(S+=N*i[a][o+2],i[a][o+2]=i[a][o+2]-S*P),i[a][o]=i[a][o]-S,i[a][o+1]=i[a][o+1]-S*A;for(a=0;a<=_;a++)S=h*r[a][o]+d*r[a][o+1],x&&(S+=N*r[a][o+2],r[a][o+2]=r[a][o+2]-S*P),r[a][o]=r[a][o]-S,r[a][o+1]=r[a][o+1]-S*A}}}if(0===k)return;for(y=t-1;y>=0;y--)if(S=n[y],0===(A=e[y]))for(c=y,i[y][y]=1,a=y-1;a>=0;a--){for(l=i[a][a]-S,P=0,s=c;s<=y;s++)P+=i[a][s]*i[s][y];if(e[a]<0)N=l,C=P;else if(c=a,0===e[a]?i[a][y]=0!==l?-P/l:-P/(w*k):(h=i[a][a+1],d=i[a+1][a],A=(n[a]-S)*(n[a]-S)+e[a]*e[a],f=(h*C-N*P)/A,i[a][y]=f,i[a+1][y]=Math.abs(h)>Math.abs(N)?(-P-l*f)/h:(-C-d*f)/N),f=Math.abs(i[a][y]),w*f*f>1)for(s=a;s<=y;s++)i[s][y]=i[s][y]/f}else if(A<0)for(c=y-1,Math.abs(i[y][y-1])>Math.abs(i[y-1][y])?(i[y-1][y-1]=A/i[y][y-1],i[y-1][y]=-(i[y][y]-S)/i[y][y-1]):(b=Af(0,-i[y-1][y],i[y-1][y-1]-S,A),i[y-1][y-1]=b[0],i[y-1][y]=b[1]),i[y][y-1]=0,i[y][y]=1,a=y-2;a>=0;a--){for(p=0,g=0,s=c;s<=y;s++)p+=i[a][s]*i[s][y-1],g+=i[a][s]*i[s][y];if(l=i[a][a]-S,e[a]<0)N=l,P=p,C=g;else if(c=a,0===e[a]?(b=Af(-p,-g,l,A),i[a][y-1]=b[0],i[a][y]=b[1]):(h=i[a][a+1],d=i[a+1][a],v=(n[a]-S)*(n[a]-S)+e[a]*e[a]-A*A,m=2*(n[a]-S)*A,0===v&&0===m&&(v=w*k*(Math.abs(l)+Math.abs(A)+Math.abs(h)+Math.abs(d)+Math.abs(N))),b=Af(h*P-N*p+A*g,h*C-N*g-A*p,v,m),i[a][y-1]=b[0],i[a][y]=b[1],Math.abs(h)>Math.abs(N)+Math.abs(A)?(i[a+1][y-1]=(-p-l*i[a][y-1]+A*i[a][y])/h,i[a+1][y]=(-g-l*i[a][y]-A*i[a][y-1])/h):(b=Af(-P-d*i[a][y-1],-C-d*i[a][y],N,A),i[a+1][y-1]=b[0],i[a+1][y]=b[1])),f=Math.max(Math.abs(i[a][y-1]),Math.abs(i[a][y])),w*f*f>1)for(s=a;s<=y;s++)i[s][y-1]=i[s][y-1]/f,i[s][y]=i[s][y]/f}for(a=0;a<t;a++)if(a<0||a>_)for(s=a;s<t;s++)r[a][s]=i[a][s];for(s=t-1;s>=0;s--)for(a=0;a<=_;a++){for(N=0,o=0;o<=Math.min(s,_);o++)N+=r[a][o]*i[o][s];r[a][s]=N}}(a,c,o,s,f)}this.n=a,this.e=c,this.d=o,this.V=s}get realEigenvalues(){return this.d}get imaginaryEigenvalues(){return this.e}get eigenvectorMatrix(){return yf.isMatrix(this.V)||(this.V=new yf(this.V)),this.V}get diagonalMatrix(){var t,e,n=this.n,r=this.e,i=this.d,a=new yf(n,n);for(t=0;t<n;t++){for(e=0;e<n;e++)a[t][e]=0;a[t][t]=i[t],r[t]>0?a[t][t+1]=r[t]:r[t]<0&&(a[t][t-1]=r[t])}return a}}function Af(t,e,n,r){var i,a;return Math.abs(n)>Math.abs(r)?[(t+(i=r/n)*e)/(a=n+i*r),(e-i*t)/a]:[((i=n/r)*t+e)/(a=r+i*n),(i*e-t)/a]}class Pf{constructor(t){if(!(t=_f.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");var e,n,r,i=t,a=i.rows,s=new yf(a,a),o=!0;for(n=0;n<a;n++){var c=s[n],u=0;for(r=0;r<n;r++){var f=s[r],l=0;for(e=0;e<r;e++)l+=f[e]*c[e];c[r]=l=(i.get(n,r)-l)/s[r][r],u+=l*l}for(o&=(u=i.get(n,n)-u)>0,s[n][n]=Math.sqrt(Math.max(u,0)),r=n+1;r<a;r++)s[n][r]=0}if(!o)throw new Error("Matrix is not positive definite");this.L=s}solve(t){t=_f.checkMatrix(t);var e=this.L,n=e.rows;if(t.rows!==n)throw new Error("Matrix dimensions do not match");var r,i,a,s=t.columns,o=t.clone();for(a=0;a<n;a++)for(i=0;i<s;i++){for(r=0;r<a;r++)o[a][i]-=o[r][i]*e[a][r];o[a][i]/=e[a][a]}for(a=n-1;a>=0;a--)for(i=0;i<s;i++){for(r=a+1;r<n;r++)o[a][i]-=o[r][i]*e[r][a];o[a][i]/=e[a][a]}return o}get lowerTriangularMatrix(){return this.L}}var Cf=n(4),Nf=n.n(Cf);function Tf(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ef=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e instanceof yf&&n instanceof yf?(this.mean=e,this.cov=n):(this.mean=new yf([e]).transpose(),this.cov=new yf(n))}var e,n,r;return e=t,(n=[{key:"at",value:function(t){var e=new yf([t]).transpose().sub(this.mean);return e.transpose().mmul(Mf(this.cov)).mmul(e).mul(-.5).exp()*(1/Math.sqrt(Math.pow(2*Math.PI,this.mean.rows)*this.cov.det()))}},{key:"marginalize",value:function(e){var n=zf(this.mean,0,0,e,1),r=zf(this.mean,e,0,this.mean.rows,1),i=zf(this.cov,0,0,e,e),a=zf(this.cov,e,e,this.mean.rows,this.mean.rows);return[new t(n,i),new t(r,a)]}},{key:"condition",value:function(e){var n=e.length,r=new yf([e]).transpose(),i=zf(this.cov,0,0,n,n),a=zf(this.cov,0,n,n,this.mean.rows),s=a.transpose(),o=zf(this.cov,n,n,this.mean.rows,this.mean.rows),c=new Pf(i).lowerTriangularMatrix,u=kf(c,r);return new t(kf(c,a).transpose().mmul(u),o.sub(s.mmul(Mf(i)).mmul(a)))}},{key:"transformationMatrix",value:function(){for(var t=new Sf(this.cov),e=t.eigenvectorMatrix,n=yf.zeros(e.rows,e.columns),r=0;r<n.rows;++r)n.set(r,r,Math.sqrt(t.realEigenvalues[r]));return e.mmul(n)}},{key:"sample",value:function(){for(var t=yf.zeros(this.mean.rows,1),e=Nf.a.normal(),n=0;n<this.mean.rows;++n)t.set(n,0,e());return yf.add(this.mean,this.transformationMatrix().mmul(t))}},{key:"getMean",value:function(){return this.mean.transpose()[0]}},{key:"getSd",value:function(){return this.cov.diag().map(function(t){return Math.sqrt(t)})}}])&&Tf(e.prototype,n),r&&Tf(e,r),t}();function zf(t,e,n,r,i){for(var a=new yf(r-e,i-n),s=e;s<r;++s)for(var o=n;o<i;++o)a.set(s-e,o-n,t.get(s,o));return a}function Rf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=2*e*e;return function(e,r){var i=Math.pow(e-r,2);return t*t*Math.exp(-i/n)}}function jf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1.4,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2,r=e*e;return function(e,i){var a=Math.abs(e-i,2),s=Math.pow(Math.sin(Math.PI*a/n),2);return t*t*Math.exp(-2*s/r)}}function qf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return function(r,i){return e+t*t*(r-n)*(i-n)}}function Lf(t){return function(e,n){return t.map(function(t){return t.apply(null,[e,n])}).reduce(function(t,e){return t+e},1)}}function Df(t,e){for(var n=t.length,r=new yf(n,n),i=0;i<n;++i)for(var a=i;a<n;++a)r[i][a]=r[a][i]=e(t[i],t[a]);return r}function Of(t,e,n,r){null==n&&null==r&&(n=[]);var i=n.concat(e),a=Df(i,t),s=yf.eye(i.length).mul(1e-6);a.add(s);var o=yf.zeros(i.length,1),c=new Ef(o,a);return i.length==e.length?c:c.condition(r)}function Uf(t,e){return t.v(e)}function If(t,e){return t.u(e)}var Vf={toggle(t){const{trainingPoints:e}=this.get();let{firstClick:n}=this.get();e[t].active=!e[t].active,n=!1,this.set({trainingPoints:e,firstClick:n})}};function Ff({_changed:t,current:e,_previous:n}){const r=re(this.refs.graph).transition();r.select(".sdArea").duration(750).attr("d",e.sdArea(e.curve)),r.select(".curve").duration(750).attr("d",e.mean(e.curve)),r.select(".sdPlus").duration(750).attr("d",e.sdPlus(e.curve)),r.select(".sdMinus").duration(750).attr("d",e.sdMinus(e.curve))}function Bf(t){const{component:e,ctx:n}=this._svelte;e.toggle(n.idx)}function Yf(t,e,n){const r=Object.create(t);return r.pt=e[n],r.idx=n,r}function $f(t,e){var n,r,i;return{c(){v(n=l("circle"),"cx",r=If(e.context,e.pt.x)),v(n,"cy",i=Uf(e.context,e.pt.y)),v(n,"r","3"),v(n,"fill","rgba(0,0,0,0.6)")},m(t,e){o(t,n,e)},p(t,e){(t.context||t.trainingPoints)&&r!==(r=If(e.context,e.pt.x))&&v(n,"cx",r),(t.context||t.trainingPoints)&&i!==(i=Uf(e.context,e.pt.y))&&v(n,"cy",i)},d(t){t&&c(n)}}}function Gf(t,e){var n,r,i,a,s=e.pt.active&&$f(0,e);return{c(){s&&s.c(),(n=l("circle"))._svelte={component:t,ctx:e},p(n,"click",Bf),v(n,"class",r="trainingPoint "+(e.pt.active?"active":"inactive")+" svelte-11ebxmd"),v(n,"cx",i=If(e.context,e.pt.x)),v(n,"cy",a=Uf(e.context,e.pt.y)),v(n,"r","6")},m(t,e){s&&s.m(t,e),o(t,n,e)},p(t,o){(e=o).pt.active?s?s.p(t,e):((s=$f(0,e)).c(),s.m(n.parentNode,n)):s&&(s.d(1),s=null),n._svelte.ctx=e,t.trainingPoints&&r!==(r="trainingPoint "+(e.pt.active?"active":"inactive")+" svelte-11ebxmd")&&v(n,"class",r),(t.context||t.trainingPoints)&&i!==(i=If(e.context,e.pt.x))&&v(n,"cx",i),(t.context||t.trainingPoints)&&a!==(a=Uf(e.context,e.pt.y))&&v(n,"cy",a)},d(t){s&&s.d(t),t&&c(n),g(n,"click",Bf)}}}function Hf(t,e){var n,r,i,a,u;return{c(){n=l("text"),r=l("tspan"),i=h("(click to enable)"),v(r,"fill","rgb(245, 181, 62)"),v(r,"font-style","italic"),v(n,"x",a=If(e.context,e.trainingPoints[1].x)-50),v(n,"y",u=Uf(e.context,e.trainingPoints[1].y)+23),v(n,"class","annotation")},m(t,e){o(t,n,e),s(n,r),s(r,i)},p(t,e){(t.context||t.trainingPoints)&&a!==(a=If(e.context,e.trainingPoints[1].x)-50)&&v(n,"x",a),(t.context||t.trainingPoints)&&u!==(u=Uf(e.context,e.trainingPoints[1].y)+23)&&v(n,"y",u)},d(t){t&&c(n)}}}function Xf(t){var e;S(this,t),this.refs={},this._state=i({trainingPoints:[{x:-4.5,y:-4,active:!0},{x:-2,y:-7,active:!1},{x:-1,y:-1,active:!1},{x:1,y:4,active:!1},{x:3,y:7,active:!0}],context:new Bu(700,400,[-5,5],[-10,10]),firstClick:!0},t.data),this._recompute({context:1,trainingPoints:1},this._state),this._intro=!0,this._handlers.state=[Ff],document.getElementById("svelte-11ebxmd-style")||((e=f("style")).id="svelte-11ebxmd-style",e.textContent=".svelte-ref-zero.svelte-11ebxmd{stroke:rgba(0,0,0,0.2);stroke-width:1px}.sdLine.svelte-11ebxmd{fill:none;stroke:rgba(0,0,0,0.2);stroke-width:2px;stroke-dasharray:4}.line.svelte-11ebxmd{fill:none;stroke:#c51b8a;stroke-width:2px}.inactive.svelte-11ebxmd{fill:transparent;stroke:rgba(0,0,0,0.4);stroke-dasharray:2;stroke-width:2px}.active.svelte-11ebxmd{fill:transparent;stroke:rgba(0,0,0,0.4);stroke-width:2px}",s(document.head,e)),Ff.call(this,{changed:a({},this._state),current:this._state}),this._fragment=function(t,e){for(var n,r,i,a,f,d,p,g,m,x,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F=e.trainingPoints,B=[],Y=0;Y<F.length;Y+=1)B[Y]=Gf(t,Yf(e,F,Y));var $=e.firstClick&&Hf(0,e);return{c(){n=l("svg"),r=l("g"),i=l("text"),a=h("y = 0"),d=l("line"),x=l("g");for(var t=0;t<B.length;t+=1)B[t].c();b=l("text"),y=l("tspan"),_=h("Regression"),w=h(" is used to find a function "),M=l("tspan"),k=h("(line)"),S=l("tspan"),A=h("that represents a set of data points as closely"),P=l("tspan"),C=h("as possible"),N=l("text"),T=h("A "),E=l("tspan"),z=h("Gaussian process"),R=h(" is a probabilistic\n    "),j=l("tspan"),q=h("method that gives a confidence"),L=l("tspan"),D=l("tspan"),O=h("(shaded)"),U=h(" for the predicted function"),$&&$.c(),v(i,"x","5"),v(i,"y",f=Uf(e.context,0)-5),v(i,"class","annotation"),v(d,"x1","0"),v(d,"y1",p=Uf(e.context,0)),v(d,"x2",g=e.context.width),v(d,"y2",m=Uf(e.context,0)),v(d,"class","svelte-11ebxmd svelte-ref-zero"),v(y,"font-weight","bold"),v(M,"fill","#c51b8a"),v(S,"x","5"),v(S,"dy","1.5em"),v(P,"x","5"),v(P,"dy","1.5em"),v(b,"x","5"),v(b,"y","10"),v(b,"class","annotation"),v(E,"font-weight","bold"),v(j,"x","450"),v(j,"dy","1.5em"),v(D,"fill","#fa9fb5"),v(L,"x","450"),v(L,"dy","1.5em"),v(N,"x","450"),v(N,"y","300"),v(N,"class","annotation"),v(n,"width",I=e.context.width),v(n,"height",V=e.context.height)},m(e,c){o(e,n,c),s(n,r),s(r,i),s(i,a),s(r,d),t.refs.zero=d,t.refs.graph=r,s(n,x);for(var u=0;u<B.length;u+=1)B[u].m(x,null);s(n,b),s(b,y),s(y,_),s(b,w),s(b,M),s(M,k),s(b,S),s(S,A),s(b,P),s(P,C),s(n,N),s(N,T),s(N,E),s(E,z),s(N,R),s(N,j),s(j,q),s(N,L),s(L,D),s(D,O),s(L,U),$&&$.m(n,null),t.refs.svgArea=n},p(e,r){if(e.context&&f!==(f=Uf(r.context,0)-5)&&v(i,"y",f),e.context&&p!==(p=Uf(r.context,0))&&v(d,"y1",p),e.context&&g!==(g=r.context.width)&&v(d,"x2",g),e.context&&m!==(m=Uf(r.context,0))&&v(d,"y2",m),e.trainingPoints||e.context){F=r.trainingPoints;for(var a=0;a<F.length;a+=1){const n=Yf(r,F,a);B[a]?B[a].p(e,n):(B[a]=Gf(t,n),B[a].c(),B[a].m(x,null))}for(;a<B.length;a+=1)B[a].d(1);B.length=F.length}r.firstClick?$?$.p(e,r):(($=Hf(0,r)).c(),$.m(n,null)):$&&($.d(1),$=null),e.context&&I!==(I=r.context.width)&&v(n,"width",I),e.context&&V!==(V=r.context.height)&&v(n,"height",V)},d(e){e&&c(n),t.refs.zero===d&&(t.refs.zero=null),t.refs.graph===r&&(t.refs.graph=null),u(B,e),$&&$.d(),t.refs.svgArea===n&&(t.refs.svgArea=null)}}}(this,this._state),this.root._oncreate.push(()=>{(function(){const{curve:t,mean:e,sdPlus:n,sdMinus:r,sdArea:i}=this.get(),a=re(this.refs.graph);a.append("path").data([t]).attr("class","sdArea").attr("stroke","none").attr("fill","rgba(253,224,221,0.6").attr("d",i),a.append("path").data([t]).attr("class","curve").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",e),a.append("path").data([t]).attr("class","sdPlus").attr("fill","none").attr("stroke","#fa9fb5").attr("stroke-width","1px").attr("d",n),a.append("path").data([t]).attr("class","sdMinus").attr("fill","none").attr("stroke","#fa9fb5").attr("stroke-width","1px").attr("d",r)}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(Xf.prototype,z),i(Xf.prototype,Vf),Xf.prototype._recompute=function(t,e){t.context&&(this._differs(e.mean,e.mean=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.mean=!0),this._differs(e.sdPlus,e.sdPlus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdPlus=!0),this._differs(e.sdMinus,e.sdMinus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]-2*e[2]))}(e))&&(t.sdMinus=!0),this._differs(e.sdArea,e.sdArea=function({context:t}){return Nc().x(e=>t.u(e[0])).y0(e=>t.v(e[1]-2*e[2])).y1(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdArea=!0)),(t.context||t.trainingPoints)&&this._differs(e.curve,e.curve=function({context:t,trainingPoints:e}){const[n,r]=t.xDomain(),i=(r-n)/75,a=U(n,r+i,i),s=e.filter(t=>t.active),o=s.map(t=>t.x),c=s.map(t=>t.y),u=Of(Rf(),a,o,c),f=u.getMean(),l=u.getSd();return X(a,f,l)}(e))&&(t.curve=!0)};var Wf=Xf;function Kf(t,e,n){return Math.min(Math.max(t,e),n)}function Zf(t,e,n){const r=Object.create(t);return r.r=e[n],r.idx=n,r}function Qf(t,e){var n,r,i,a;return{c(){v(n=l("ellipse"),"rx",r=e.r.x),v(n,"ry",i=e.r.y),v(n,"fill",a=e.color(e.idx)),v(n,"transform",e.transform),v(n,"vector-effect","non-scaling-stroke")},m(t,e){o(t,n,e)},p(t,e){t.radii&&r!==(r=e.r.x)&&v(n,"rx",r),t.radii&&i!==(i=e.r.y)&&v(n,"ry",i),t.color&&a!==(a=e.color(e.idx))&&v(n,"fill",a),t.transform&&v(n,"transform",e.transform)},d(t){t&&c(n)}}}function Jf(t){S(this,t),this._state=i({context:new Bu(300,300,[-4,4],[-4,4]),gaussian:new Ef([0,0],[[1,.7],[.7,2]]),contours:[Math.sqrt(4.61),Math.sqrt(3.22),Math.sqrt(2.41),Math.sqrt(1.83),Math.sqrt(1.39),Math.sqrt(1.02),Math.sqrt(.731),Math.sqrt(.446),Math.sqrt(.211)]},t.data),this._recompute({gaussian:1,context:1,contours:1},this._state),this._intro=!0,this._fragment=function(t,e){for(var n,r=e.radii,i=[],a=0;a<r.length;a+=1)i[a]=Qf(0,Zf(e,r,a));return{c(){for(var t=0;t<i.length;t+=1)i[t].c();n=d()},m(t,e){for(var r=0;r<i.length;r+=1)i[r].m(t,e);o(t,n,e)},p(t,e){if(t.radii||t.color||t.transform){r=e.radii;for(var a=0;a<r.length;a+=1){const s=Zf(e,r,a);i[a]?i[a].p(t,s):(i[a]=Qf(0,s),i[a].c(),i[a].m(n.parentNode,n))}for(;a<i.length;a+=1)i[a].d(1);i.length=r.length}},d(t){u(i,t),t&&c(n)}}}(0,this._state),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor))}i(Jf.prototype,z),Jf.prototype._recompute=function(t,e){(t.gaussian||t.context)&&this._differs(e.transform,e.transform=function({gaussian:t,context:e}){const[n,r]=t.getMean(),[[i,a],[s,o]]=t.transformationMatrix();return`matrix(${i},${-s},${-a},${o},${e.u(n)},${e.v(r)})`}(e))&&(t.transform=!0),(t.context||t.contours)&&this._differs(e.radii,e.radii=function({context:t,contours:e}){return e.map(e=>({x:t.u(e)-t.u(0),y:t.v(0)-t.v(e)}))}(e))&&(t.radii=!0),t.contours&&this._differs(e.color,e.color=function({contours:t}){return dc(mc).domain([0,t.length-1])}(e))&&(t.color=!0)};var tl=Jf;const el=t=>Math.sqrt(t[0]*t[0]+t[1]*t[1]);function nl(t){var e,n,r,u,h,d,p,g,m,x,b,y,_,w,k,A,P,C,N,T,E,z,R,j;S(this,t),this.refs={},this._state=i(function(){const t=new Ef([0,0],[[1,0],[0,2]]),e=new Sf(t.cov),n=Math.sqrt(e.realEigenvalues[0]),r=Math.sqrt(e.realEigenvalues[1]);return{eig:{e1:{x:e.eigenvectorMatrix.get(0,0)*n,y:e.eigenvectorMatrix.get(1,0)*n},e2:{x:e.eigenvectorMatrix.get(0,1)*r,y:e.eigenvectorMatrix.get(1,1)*r}},mean:t.mean,context:new Bu(300,300,[-3,3],[-3,3])}}(),t.data),this._recompute({eig:1,mean:1},this._state),this._intro=!0,document.getElementById("svelte-1l41z3q-style")||((e=f("style")).id="svelte-1l41z3q-style",e.textContent=".handle.svelte-1l41z3q{fill:rgb(245, 181, 62)}.handle.svelte-1l41z3q:hover{stroke:gray;stroke-width:2px}",s(document.head,e)),this._fragment=(n=this,r=this._state,R={width:r.context.width,height:r.context.height,context:r.context,gaussian:r.gaussian},j=new tl({root:n.root,store:n.store,data:R}),{c(){u=l("svg"),j._fragment.c(),h=l("circle"),g=l("circle"),b=l("line"),A=l("line"),v(h,"class","handle svelte-1l41z3q"),v(h,"cx",d=r.context.u(r.eig.e1.x)),v(h,"cy",p=r.context.v(r.eig.e1.y)),v(h,"r","4"),v(g,"class","handle svelte-1l41z3q"),v(g,"cx",m=r.context.u(r.eig.e2.x)),v(g,"cy",x=r.context.v(r.eig.e2.y)),v(g,"r","4"),v(b,"x1",y=r.context.u(r.gaussian.mean[0])),v(b,"y1",_=r.context.v(r.gaussian.mean[1])),v(b,"x2",w=r.context.u(r.eig.e1.x)),v(b,"y2",k=r.context.v(r.eig.e1.y)),v(b,"stroke","rgb(245, 181, 62)"),v(b,"stroke-width","2"),v(A,"x1",P=r.context.u(r.gaussian.mean[0])),v(A,"y1",C=r.context.v(r.gaussian.mean[1])),v(A,"x2",N=r.context.u(r.eig.e2.x)),v(A,"y2",T=r.context.v(r.eig.e2.y)),v(A,"stroke","rgb(245, 181, 62)"),v(A,"stroke-width","2"),v(u,"width",E=r.context.width),v(u,"height",z=r.context.height)},m(t,e){o(t,u,e),j._mount(u,null),s(u,h),n.refs.e1=h,s(u,g),n.refs.e2=g,s(u,b),s(u,A)},p(t,e){var n={};t.context&&(n.width=e.context.width),t.context&&(n.height=e.context.height),t.context&&(n.context=e.context),t.gaussian&&(n.gaussian=e.gaussian),j._set(n),(t.context||t.eig)&&d!==(d=e.context.u(e.eig.e1.x))&&v(h,"cx",d),(t.context||t.eig)&&p!==(p=e.context.v(e.eig.e1.y))&&v(h,"cy",p),(t.context||t.eig)&&m!==(m=e.context.u(e.eig.e2.x))&&v(g,"cx",m),(t.context||t.eig)&&x!==(x=e.context.v(e.eig.e2.y))&&v(g,"cy",x),(t.context||t.gaussian)&&y!==(y=e.context.u(e.gaussian.mean[0]))&&v(b,"x1",y),(t.context||t.gaussian)&&_!==(_=e.context.v(e.gaussian.mean[1]))&&v(b,"y1",_),(t.context||t.eig)&&w!==(w=e.context.u(e.eig.e1.x))&&v(b,"x2",w),(t.context||t.eig)&&k!==(k=e.context.v(e.eig.e1.y))&&v(b,"y2",k),(t.context||t.gaussian)&&P!==(P=e.context.u(e.gaussian.mean[0]))&&v(A,"x1",P),(t.context||t.gaussian)&&C!==(C=e.context.v(e.gaussian.mean[1]))&&v(A,"y1",C),(t.context||t.eig)&&N!==(N=e.context.u(e.eig.e2.x))&&v(A,"x2",N),(t.context||t.eig)&&T!==(T=e.context.v(e.eig.e2.y))&&v(A,"y2",T),t.context&&E!==(E=e.context.width)&&v(u,"width",E),t.context&&z!==(z=e.context.height)&&v(u,"height",z)},d(t){t&&c(u),j.destroy(),n.refs.e1===h&&(n.refs.e1=null),n.refs.e2===g&&(n.refs.e2=null)}}),this.root._oncreate.push(()=>{(function(){re(this.refs.e1).call(ye().on("drag",()=>{const{context:t,eig:e}=this.get(),n=e.e2.x*e.e2.x+e.e2.y*e.e2.y,r=t.x(Kf(Gt.x,10,t.width-10)),i=t.y(Kf(Gt.y,10,t.height-10));e.e1={x:r,y:i},e.e2={x:-i*Math.sqrt(n)/el([r,i]),y:r*Math.sqrt(n)/el([r,i])},this.set({eig:e})})),re(this.refs.e2).call(ye().on("drag",()=>{const{context:t,eig:e}=this.get(),n=e.e1.x*e.e1.x+e.e1.y*e.e1.y,r=t.x(Kf(Gt.x,10,t.width-10)),i=t.y(Kf(Gt.y,10,t.height-10));e.e2={x:r,y:i},e.e1={x:i*Math.sqrt(n)/el([r,i]),y:-r*Math.sqrt(n)/el([r,i])},this.set({eig:e})}))}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(nl.prototype,z),nl.prototype._recompute=function(t,e){(t.eig||t.mean)&&this._differs(e.gaussian,e.gaussian=function({eig:t,mean:e}){const n=new yf([[t.e1.x,t.e2.x],[t.e1.y,t.e2.y]]);return new Ef([e[0],e[1]],n.mmul(n.transpose()))}(e))&&(t.gaussian=!0)};var rl=nl;function il(t){var e,n,r,a,u,d,p,g,x,b,y,_,w,M,k,A,P,C,N;S(this,t),this._state=i({sigma1:1,sigma2:1,corr:.5},t.data),this._intro=!0,document.getElementById("svelte-134p43-style")||((e=f("style")).id="svelte-134p43-style",e.textContent=".entry.svelte-134p43{font-size:14px;fill:rgba(0,0,0,0.8);text-anchor:middle;alignment-baseline:center}.entryBox.svelte-134p43{fill:hsl(200, 20%, 97%);stroke-width:1;stroke:rgba(0,0,0,0.2)}",s(document.head,e)),this._fragment=(n=this._state,{c(){r=l("svg"),a=l("g"),u=l("rect"),d=l("text"),p=h(n.sigma1),g=l("g"),x=l("rect"),b=l("text"),y=h(n.corr),_=l("g"),w=l("rect"),M=l("text"),k=h(n.corr),A=l("g"),P=l("rect"),C=l("text"),N=h(n.sigma2),v(u,"x","0"),v(u,"y","0"),v(u,"width","50"),v(u,"height","35"),v(u,"rx","5"),v(u,"ry","5"),v(u,"class","entryBox svelte-134p43"),v(d,"x","25"),v(d,"y","23"),v(d,"class","entry svelte-134p43"),v(a,"transform","translate(1,1)"),v(x,"x","0"),v(x,"y","0"),v(x,"width","50"),v(x,"height","35"),v(x,"rx","5"),v(x,"ry","5"),v(x,"class","entryBox svelte-134p43"),v(b,"x","25"),v(b,"y","23"),v(b,"class","entry svelte-134p43"),v(g,"transform","translate(61,1)"),v(w,"x","0"),v(w,"y","0"),v(w,"width","50"),v(w,"height","35"),v(w,"rx","5"),v(w,"ry","5"),v(w,"class","entryBox svelte-134p43"),v(M,"x","25"),v(M,"y","23"),v(M,"class","entry svelte-134p43"),v(_,"transform","translate(1,46)"),v(P,"x","0"),v(P,"y","0"),v(P,"width","50"),v(P,"height","35"),v(P,"rx","5"),v(P,"ry","5"),v(P,"class","entryBox svelte-134p43"),v(C,"x","25"),v(C,"y","23"),v(C,"class","entry svelte-134p43"),v(A,"transform","translate(61,46)"),v(r,"height","82"),v(r,"width","112")},m(t,e){o(t,r,e),s(r,a),s(a,u),s(a,d),s(d,p),s(r,g),s(g,x),s(g,b),s(b,y),s(r,_),s(_,w),s(_,M),s(M,k),s(r,A),s(A,P),s(A,C),s(C,N)},p(t,e){t.sigma1&&m(p,e.sigma1),t.corr&&(m(y,e.corr),m(k,e.corr)),t.sigma2&&m(N,e.sigma2)},d(t){t&&c(r)}}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor))}i(il.prototype,z);var al=il;let sl=0;function ol({_changed:t,current:e,_previous:n}){const r=e.size-e.margin.top-e.margin.bottom,i=hs().domain(e.colorScale.domain()).range([r,0]),a=(s=i,at(Q,s)).tickFormat(Ci(".2f")).ticks(5);var s;re(this.refs.colorBar).call(a)}function cl(t,e,n){const r=Object.create(t);return r.v=e[n],r}function ul(t,e){var n,r;return{c(){v(n=l("stop"),"offset",r=e.v.offset+"%"),x(n,"stop-color",e.v.color),x(n,"stop-opacity","1")},m(t,e){o(t,n,e)},p(t,e){t.colorValues&&r!==(r=e.v.offset+"%")&&v(n,"offset",r),t.colorValues&&x(n,"stop-color",e.v.color)},d(t){t&&c(n)}}}function fl(t){S(this,t),this.refs={},this._state=i((sl+=1,{colorScale:dc(xc),size:150,margin:{top:5,right:12,bottom:5,left:18},id:sl}),t.data),this._recompute({colorScale:1},this._state),this._intro=!0,this._handlers.state=[ol],ol.call(this,{changed:a({},this._state),current:this._state}),this._fragment=function(t,e){for(var n,r,i,a,f,h,d,p,g,m,x,b=e.colorValues,y=[],_=0;_<b.length;_+=1)y[_]=ul(0,cl(e,b,_));return{c(){n=l("svg"),r=l("defs"),i=l("linearGradient");for(var t=0;t<y.length;t+=1)y[t].c();f=l("g"),h=l("rect"),m=l("g"),v(i,"id",a="grad-"+e.id),v(i,"x1","0%"),v(i,"y1","100%"),v(i,"x2","0%"),v(i,"y2","0%"),v(h,"x",d="-"+e.margin.left),v(h,"y","0"),v(h,"width","12"),v(h,"height",p=e.size-e.margin.top-e.margin.bottom),v(h,"fill",g="url('#grad-"+e.id+"')"),v(m,"class","axis"),v(f,"transform",x="translate("+e.margin.left+","+e.margin.top+")"),v(n,"width","50"),v(n,"height",e.size)},m(e,a){o(e,n,a),s(n,r),s(r,i);for(var c=0;c<y.length;c+=1)y[c].m(i,null);s(n,f),s(f,h),s(f,m),t.refs.colorBar=m},p(t,e){if(t.colorValues){b=e.colorValues;for(var r=0;r<b.length;r+=1){const n=cl(e,b,r);y[r]?y[r].p(t,n):(y[r]=ul(0,n),y[r].c(),y[r].m(i,null))}for(;r<y.length;r+=1)y[r].d(1);y.length=b.length}t.id&&a!==(a="grad-"+e.id)&&v(i,"id",a),t.margin&&d!==(d="-"+e.margin.left)&&v(h,"x",d),(t.size||t.margin)&&p!==(p=e.size-e.margin.top-e.margin.bottom)&&v(h,"height",p),t.id&&g!==(g="url('#grad-"+e.id+"')")&&v(h,"fill",g),t.margin&&x!==(x="translate("+e.margin.left+","+e.margin.top+")")&&v(f,"transform",x),t.size&&v(n,"height",e.size)},d(e){e&&c(n),u(y,e),t.refs.colorBar===m&&(t.refs.colorBar=null)}}}(this,this._state),this.root._oncreate.push(()=>{this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(fl.prototype,z),fl.prototype._recompute=function(t,e){t.colorScale&&this._differs(e.colorValues,e.colorValues=function({colorScale:t}){const e=t.domain(),n=(e[1]-e[0])/11;return U(e[0],e[1]+n,n).map((e,n)=>({offset:n/11*100,color:t(e)}))}(e))&&(t.colorValues=!0)};var ll=fl;function hl(t){return Math.round(100*t)/100}function dl(t){var e;S(this,t),this.refs={},this._state=i({scale:dc(mc).domain([0,.2]),context:new Bu(200,200,[-2,2],[-2,2]),gaussian:new Ef([0,0],[[1,.7],[.7,2]])},t.data),this._intro=!0,document.getElementById("svelte-16hsz3b-style")||((e=f("style")).id="svelte-16hsz3b-style",e.textContent=".gauss-grid.svelte-16hsz3b{display:inline-grid;grid-template-columns:auto auto auto;text-align:center}.grid-item.svelte-16hsz3b{margin:5px}.plot.svelte-16hsz3b{float:left}",s(document.head,e)),this._fragment=function(t,e){var n,r,i,a,u,d,p,g,m,x,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O={sigma1:e.gaussian.cov.get(0,0),sigma2:e.gaussian.cov.get(1,1),cov:e.gaussian.cov.get(0,1),context:e.context},U=new rl({root:t.root,store:t.store,data:O});t.refs.gauss=U;var I={colorScale:e.scale},V=new ll({root:t.root,store:t.store,data:I}),F={sigma1:hl(e.gaussian.cov.get(0,0)),sigma2:hl(e.gaussian.cov.get(1,1)),corr:hl(e.gaussian.cov.get(0,1))},B=new al({root:t.root,store:t.store,data:F});return{c(){n=f("div"),r=f("div"),i=l("svg"),U._fragment.c(),d=h("\n    "),p=f("div"),g=l("svg"),m=l("g"),V._fragment.c(),x=l("text"),b=l("tspan"),y=h("Covariance matrix (Σ)"),_=l("g"),B._fragment.c(),w=l("text"),M=h("By dragging the handles you \n        "),k=l("tspan"),S=h("can adjust the variance along"),A=l("tspan"),P=h("each dimension, as well as the"),C=l("tspan"),N=h("correlation between the two"),T=l("tspan"),E=h("random variables. "),z=l("tspan"),R=h("Violet"),j=l("tspan"),q=h("values show a high probability"),L=l("tspan"),D=h("inside the distribution."),v(i,"width",a=e.context.width),v(i,"height",u=e.context.height),v(i,"class","plot svelte-16hsz3b"),r.className="grid-item svelte-16hsz3b",v(m,"transform","translate(0,20)"),v(b,"font-weight","bold"),v(x,"x","70"),v(x,"y","40"),v(x,"class","annotation"),v(_,"transform","translate(82,50)"),v(k,"x","230"),v(k,"dy","1.5em"),v(A,"x","230"),v(A,"dy","1.5em"),v(C,"x","230"),v(C,"dy","1.5em"),v(z,"fill","rgb(73, 0, 106)"),v(z,"font-style","italic"),v(T,"x","230"),v(T,"dy","1.5em"),v(j,"x","230"),v(j,"dy","1.5em"),v(L,"x","230"),v(L,"dy","1.5em"),v(w,"x","230"),v(w,"y","30"),v(w,"class","annotation"),v(g,"width","450"),v(g,"height","200"),p.className="grid-item svelte-16hsz3b",n.className="gauss-grid svelte-16hsz3b"},m(t,e){o(t,n,e),s(n,r),s(r,i),U._mount(i,null),s(n,d),s(n,p),s(p,g),s(g,m),V._mount(m,null),s(g,x),s(x,b),s(b,y),s(g,_),B._mount(_,null),s(g,w),s(w,M),s(w,k),s(k,S),s(w,A),s(A,P),s(w,C),s(C,N),s(w,T),s(T,E),s(T,z),s(z,R),s(w,j),s(j,q),s(w,L),s(L,D)},p(t,e){var n={};t.gaussian&&(n.sigma1=e.gaussian.cov.get(0,0)),t.gaussian&&(n.sigma2=e.gaussian.cov.get(1,1)),t.gaussian&&(n.cov=e.gaussian.cov.get(0,1)),t.context&&(n.context=e.context),U._set(n),t.context&&a!==(a=e.context.width)&&v(i,"width",a),t.context&&u!==(u=e.context.height)&&v(i,"height",u);var r={};t.scale&&(r.colorScale=e.scale),V._set(r);var s={};t.gaussian&&(s.sigma1=hl(e.gaussian.cov.get(0,0))),t.gaussian&&(s.sigma2=hl(e.gaussian.cov.get(1,1))),t.gaussian&&(s.corr=hl(e.gaussian.cov.get(0,1))),B._set(s)},d(e){e&&c(n),U.destroy(),t.refs.gauss===U&&(t.refs.gauss=null),V.destroy(),B.destroy()}}}(this,this._state),this.root._oncreate.push(()=>{(function(){this.refs.gauss.on("update",({_changed:t,current:e,_previous:n})=>{this.set({gaussian:e.gaussian})})}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(dl.prototype,z);var pl=dl;function gl(t){var e,n,r,u,d,p,g,m,x,b,y,_,w,k,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F,B,Y,$,G,H,X,W,K,Z,Q,J,tt,et,nt,rt,it,at,st,ot,ct,ut,ft,lt,ht,dt,pt,gt,vt,mt,xt,bt,yt,_t,wt,Mt,kt,St,At,Pt,Ct,Nt,Tt;S(this,t),this.refs={},this._state=i({gaussian:new Ef([0,0],[[1,.5],[.5,1]]),context:new Bu(200,200,[-2,2],[-2,2]),sample:{x1:1,x2:.5}},t.data),this._intro=!0,document.getElementById("svelte-ca2vts-style")||((e=f("style")).id="svelte-ca2vts-style",e.textContent=".svelte-ref-zero.svelte-ca2vts{stroke:rgba(0,0,0,0.2);stroke-width:1px}.point.svelte-ca2vts{fill:rgb(245, 181, 62)}.ss.svelte-ca2vts{baseline-shift:sub;font-size:11px}.gauss-grid.svelte-ca2vts{display:inline-grid;grid-template-columns:auto auto;text-align:center}.grid-item.svelte-ca2vts{margin:0.3em}.handle.svelte-ca2vts{fill:rgb(245, 181, 62)}.handle.svelte-ca2vts:hover{stroke:gray;stroke-width:2px}",s(document.head,e)),this._fragment=(n=this,r=this._state,Nt={width:r.context.width,height:r.context.height,context:r.context,gaussian:r.gaussian},Tt=new tl({root:n.root,store:n.store,data:Nt}),{c(){u=f("div"),d=f("div"),p=l("svg"),Tt._fragment.c(),g=l("text"),m=h("x"),x=l("tspan"),b=h("1"),w=l("text"),k=h("x"),A=l("tspan"),P=h("2"),N=l("line"),R=l("line"),O=l("circle"),B=h("\n  "),Y=f("div"),$=l("svg"),G=l("text"),H=h("μ"),W=l("text"),K=h("x"),Z=l("tspan"),Q=h("1"),et=l("text"),nt=h("x"),rt=l("tspan"),it=h("2"),ot=l("line"),lt=l("line"),vt=l("line"),_t=l("circle"),kt=l("circle"),v(x,"class","ss svelte-ca2vts"),v(g,"x",y=r.context.u(r.sample.x1)+5),v(g,"y",_=r.context.height-5),v(g,"class","annotation point svelte-ca2vts"),v(A,"class","ss svelte-ca2vts"),v(w,"x","5"),v(w,"y",C=r.context.v(r.sample.x2)-5),v(w,"class","annotation point svelte-ca2vts"),v(N,"x1","0"),v(N,"y1",T=r.context.v(r.sample.x2)),v(N,"x2",E=r.context.u(r.sample.x1)),v(N,"y2",z=r.context.v(r.sample.x2)),v(N,"stroke","rgb(245, 181, 62)"),v(N,"stroke-width","2"),v(R,"x1",j=r.context.u(r.sample.x1)),v(R,"y1",q=r.context.height),v(R,"x2",L=r.context.u(r.sample.x1)),v(R,"y2",D=r.context.v(r.sample.x2)),v(R,"stroke","rgb(245, 181, 62)"),v(R,"stroke-width","2"),v(O,"class","handle svelte-ca2vts"),v(O,"cx",U=r.context.u(r.sample.x1)),v(O,"cy",I=r.context.v(r.sample.x2)),v(O,"r","4"),v(p,"width",V=r.context.width),v(p,"height",F=r.context.height),v(p,"class","plot"),d.className="grid-item svelte-ca2vts",v(G,"x","5"),v(G,"y",X=r.context.v(0)-5),v(G,"class","annotation"),v(Z,"class","ss svelte-ca2vts"),v(W,"x",J=r.context.width/3+5),v(W,"y",tt=r.context.height-5),v(W,"class","annotation point svelte-ca2vts"),v(rt,"class","ss svelte-ca2vts"),v(et,"x",at=r.context.width/3*2+5),v(et,"y",st=r.context.height-5),v(et,"class","annotation point svelte-ca2vts"),v(ot,"x1","0"),v(ot,"y1",ct=r.context.v(0)),v(ot,"x2",ut=r.context.width),v(ot,"y2",ft=r.context.v(0)),v(ot,"class","svelte-ca2vts svelte-ref-zero"),v(lt,"x1",ht=r.context.width/3),v(lt,"y1",dt=r.context.height),v(lt,"x2",pt=r.context.width/3),v(lt,"y2",gt=r.context.v(r.sample.x1)),v(lt,"stroke","rgb(245, 181, 62)"),v(lt,"stroke-width","2"),v(vt,"x1",mt=r.context.width/3*2),v(vt,"y1",xt=r.context.height),v(vt,"x2",bt=r.context.width/3*2),v(vt,"y2",yt=r.context.v(r.sample.x2)),v(vt,"stroke","rgb(245, 181, 62)"),v(vt,"stroke-width","2"),v(_t,"class","handle svelte-ca2vts"),v(_t,"cx",wt=r.context.width/3),v(_t,"cy",Mt=r.context.v(r.sample.x1)),v(_t,"r","4"),v(kt,"class","handle svelte-ca2vts"),v(kt,"cx",St=r.context.width/3*2),v(kt,"cy",At=r.context.v(r.sample.x2)),v(kt,"r","4"),v($,"width",Pt=r.context.width),v($,"height",Ct=r.context.height),v($,"class","plot"),Y.className="grid-item svelte-ca2vts",u.className="gauss-grid svelte-ca2vts"},m(t,e){o(t,u,e),s(u,d),s(d,p),Tt._mount(p,null),s(p,g),s(g,m),s(g,x),s(x,b),s(p,w),s(w,k),s(w,A),s(A,P),s(p,N),s(p,R),s(p,O),n.refs.xy=O,s(u,B),s(u,Y),s(Y,$),s($,G),s(G,H),s($,W),s(W,K),s(W,Z),s(Z,Q),s($,et),s(et,nt),s(et,rt),s(rt,it),s($,ot),n.refs.zero=ot,s($,lt),s($,vt),s($,_t),n.refs.x1=_t,s($,kt),n.refs.x2=kt},p(t,e){var n={};t.context&&(n.width=e.context.width),t.context&&(n.height=e.context.height),t.context&&(n.context=e.context),t.gaussian&&(n.gaussian=e.gaussian),Tt._set(n),(t.context||t.sample)&&y!==(y=e.context.u(e.sample.x1)+5)&&v(g,"x",y),t.context&&_!==(_=e.context.height-5)&&v(g,"y",_),(t.context||t.sample)&&C!==(C=e.context.v(e.sample.x2)-5)&&v(w,"y",C),(t.context||t.sample)&&T!==(T=e.context.v(e.sample.x2))&&v(N,"y1",T),(t.context||t.sample)&&E!==(E=e.context.u(e.sample.x1))&&v(N,"x2",E),(t.context||t.sample)&&z!==(z=e.context.v(e.sample.x2))&&v(N,"y2",z),(t.context||t.sample)&&j!==(j=e.context.u(e.sample.x1))&&v(R,"x1",j),t.context&&q!==(q=e.context.height)&&v(R,"y1",q),(t.context||t.sample)&&L!==(L=e.context.u(e.sample.x1))&&v(R,"x2",L),(t.context||t.sample)&&D!==(D=e.context.v(e.sample.x2))&&v(R,"y2",D),(t.context||t.sample)&&U!==(U=e.context.u(e.sample.x1))&&v(O,"cx",U),(t.context||t.sample)&&I!==(I=e.context.v(e.sample.x2))&&v(O,"cy",I),t.context&&V!==(V=e.context.width)&&v(p,"width",V),t.context&&F!==(F=e.context.height)&&v(p,"height",F),t.context&&X!==(X=e.context.v(0)-5)&&v(G,"y",X),t.context&&J!==(J=e.context.width/3+5)&&v(W,"x",J),t.context&&tt!==(tt=e.context.height-5)&&v(W,"y",tt),t.context&&at!==(at=e.context.width/3*2+5)&&v(et,"x",at),t.context&&st!==(st=e.context.height-5)&&v(et,"y",st),t.context&&ct!==(ct=e.context.v(0))&&v(ot,"y1",ct),t.context&&ut!==(ut=e.context.width)&&v(ot,"x2",ut),t.context&&ft!==(ft=e.context.v(0))&&v(ot,"y2",ft),t.context&&ht!==(ht=e.context.width/3)&&v(lt,"x1",ht),t.context&&dt!==(dt=e.context.height)&&v(lt,"y1",dt),t.context&&pt!==(pt=e.context.width/3)&&v(lt,"x2",pt),(t.context||t.sample)&&gt!==(gt=e.context.v(e.sample.x1))&&v(lt,"y2",gt),t.context&&mt!==(mt=e.context.width/3*2)&&v(vt,"x1",mt),t.context&&xt!==(xt=e.context.height)&&v(vt,"y1",xt),t.context&&bt!==(bt=e.context.width/3*2)&&v(vt,"x2",bt),(t.context||t.sample)&&yt!==(yt=e.context.v(e.sample.x2))&&v(vt,"y2",yt),t.context&&wt!==(wt=e.context.width/3)&&v(_t,"cx",wt),(t.context||t.sample)&&Mt!==(Mt=e.context.v(e.sample.x1))&&v(_t,"cy",Mt),t.context&&St!==(St=e.context.width/3*2)&&v(kt,"cx",St),(t.context||t.sample)&&At!==(At=e.context.v(e.sample.x2))&&v(kt,"cy",At),t.context&&Pt!==(Pt=e.context.width)&&v($,"width",Pt),t.context&&Ct!==(Ct=e.context.height)&&v($,"height",Ct)},d(t){t&&c(u),Tt.destroy(),n.refs.xy===O&&(n.refs.xy=null),n.refs.zero===ot&&(n.refs.zero=null),n.refs.x1===_t&&(n.refs.x1=null),n.refs.x2===kt&&(n.refs.x2=null)}}),this.root._oncreate.push(()=>{(function(){re(this.refs.xy).call(ye().on("drag",()=>{const{context:t}=this.get();let{sample:e}=this.get();e={x1:t.x(Kf(Gt.x,20,t.width-20)),x2:t.y(Kf(Gt.y,20,t.height-20))},this.set({sample:e})})),re(this.refs.x1).call(ye().on("drag",()=>{const{context:t}=this.get();let{sample:e}=this.get();e={x1:t.y(Kf(Gt.y,20,t.width-20)),x2:e.x2},this.set({sample:e})})),re(this.refs.x2).call(ye().on("drag",()=>{const{context:t}=this.get();let{sample:e}=this.get();const n=t.y(Kf(Gt.y,20,t.width-20));e={x1:e.x1,x2:n},this.set({sample:e})}))}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(gl.prototype,z);var vl=gl;const ml=.1;function xl(t){return Math.round(100*t)/100}function bl(t,e){return t.v(e)}function yl(t){var e,n,r,u,d,p,g,x,b,y,_,w,k,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F,B,Y,$,G,H,X,W,K,Z,Q,J,tt,et,nt,rt,it,at,st,ot,ct,ut,ft,lt,ht,dt,pt,gt,vt,mt,xt,bt,yt,_t,wt,Mt,kt,St,At,Pt,Ct,Nt,Tt,Et,zt,Rt,jt,qt;S(this,t),this.refs={},this._state=i({limits:{sigma1:{from:.8,to:1.8},sigma2:{from:.8,to:1.8},cov:{from:-.8,to:.8}},context:new Bu(250,250,[-4,4],[-4,4]),cond:1.2,gaussian:new Ef([0,0],[[1,.8],[.8,1.4]]),sideWidth:200},t.data),this._recompute({context:1,cond:1,gaussian:1,sideWidth:1},this._state),this._intro=!0,document.getElementById("svelte-yvfo7n-style")||((e=f("style")).id="svelte-yvfo7n-style",e.textContent=".gauss-grid.svelte-yvfo7n{display:inline-grid;grid-template-columns:auto auto auto;text-align:center}.grid-item.svelte-yvfo7n{margin:0.3em}.line.svelte-yvfo7n{fill:none;stroke:#c51b8a;stroke-width:2px}.curve.svelte-yvfo7n{fill:none;stroke:rgba(0,0,0,0.6);stroke-width:2px}.handle.svelte-yvfo7n{fill:#c51b8a}.ss.svelte-yvfo7n{baseline-shift:sub;font-size:11px}",s(document.head,e)),this._fragment=(n=this,r=this._state,Ct=xl(r.cond),Nt=xl(r.marginalizedGauss.mean.get(0,0)),Tt=xl(r.marginalizedGauss.cov.get(0,0)),Et=xl(r.cond),zt=xl(r.conditionedGauss.mean.get(0,0)),Rt=xl(r.marginalizedGauss.cov.get(0,0)),jt={context:r.context,sigma1:r.gaussian.cov.get(0,0),sigma2:r.gaussian.cov.get(1,1),cov:r.gaussian.cov.get(0,1),limits:r.limits},qt=new rl({root:n.root,store:n.store,data:jt}),n.refs.gauss=qt,{c(){u=f("div"),(d=f("div")).innerHTML="<h4>Marginalization (Y)</h4>",p=h("\n  "),g=f("div"),x=h("\n  "),b=f("div"),y=f("h4"),_=h("Conditioning (X = "),w=h(Ct),k=h(")"),A=h("\n  "),P=f("div"),C=l("svg"),N=l("path"),T=l("text"),E=h("μ"),z=l("tspan"),R=h("Y"),j=h(" = "),q=h(Nt),O=l("text"),U=h("σ"),I=l("tspan"),V=h("Y"),F=h(" = "),B=h(Tt),G=h("\n  "),H=f("div"),X=l("svg"),qt._fragment.c(),W=l("line"),J=l("circle"),nt=l("text"),rt=h("X = "),it=h(Et),ut=h("\n  "),ft=f("div"),lt=l("svg"),ht=l("path"),dt=l("text"),pt=h("μ"),gt=l("tspan"),vt=h("Y|X"),mt=h(" = "),xt=h(zt),yt=l("text"),_t=h("σ"),wt=l("tspan"),Mt=h("Y|X"),kt=h(" = "),St=h(Rt),d.className="grid-item svelte-yvfo7n",g.className="grid-item svelte-yvfo7n",b.className="grid-item svelte-yvfo7n",v(N,"d",r.marginalizedPath),v(N,"class","curve svelte-yvfo7n"),v(z,"class","ss svelte-yvfo7n"),v(T,"x",L=r.sideWidth-42),v(T,"y",D=bl(r.context,r.marginalizedGauss.mean.get(0,0))),v(T,"class","annotation"),v(I,"class","ss svelte-yvfo7n"),v(O,"x","5"),v(O,"y",Y=r.context.height-10),v(O,"class","annotation"),v(C,"width",r.sideWidth),v(C,"height",$=r.context.height),v(C,"class","plot"),P.className="grid-item svelte-yvfo7n",v(W,"class","line svelte-yvfo7n"),v(W,"x1",K=r.condPos[0]),v(W,"y1","0"),v(W,"x2",Z=r.condPos[0]),v(W,"y2",Q=r.context.height),v(J,"class","handle svelte-yvfo7n"),v(J,"cx",tt=r.condPos[0]),v(J,"cy",et=r.condPos[1]),v(J,"r","4"),v(nt,"x",at=r.condPos[0]+5),v(nt,"y",st=r.condPos[1]),v(nt,"class","annotation handle svelte-yvfo7n"),v(X,"width",ot=r.context.width),v(X,"height",ct=r.context.height),v(X,"class","plot"),H.className="grid-item svelte-yvfo7n",v(ht,"d",r.conditionedPath),v(ht,"class","line svelte-yvfo7n"),v(gt,"class","ss svelte-yvfo7n"),v(dt,"x","5"),v(dt,"y",bt=bl(r.context,r.conditionedGauss.mean.get(0,0))),v(dt,"class","annotation"),v(wt,"class","ss svelte-yvfo7n"),v(yt,"x","5"),v(yt,"y",At=r.context.height-10),v(yt,"class","annotation"),v(lt,"width",r.sideWidth),v(lt,"height",Pt=r.context.height),v(lt,"class","plot"),ft.className="grid-item svelte-yvfo7n",u.className="gauss-grid svelte-yvfo7n"},m(t,e){o(t,u,e),s(u,d),s(u,p),s(u,g),s(u,x),s(u,b),s(b,y),s(y,_),s(y,w),s(y,k),s(u,A),s(u,P),s(P,C),s(C,N),s(C,T),s(T,E),s(T,z),s(z,R),s(T,j),s(T,q),s(C,O),s(O,U),s(O,I),s(I,V),s(O,F),s(O,B),s(u,G),s(u,H),s(H,X),qt._mount(X,null),s(X,W),s(X,J),n.refs.handle=J,s(X,nt),s(nt,rt),s(nt,it),s(u,ut),s(u,ft),s(ft,lt),s(lt,ht),s(lt,dt),s(dt,pt),s(dt,gt),s(gt,vt),s(dt,mt),s(dt,xt),s(lt,yt),s(yt,_t),s(yt,wt),s(wt,Mt),s(yt,kt),s(yt,St)},p(t,e){t.cond&&Ct!==(Ct=xl(e.cond))&&m(w,Ct),t.marginalizedPath&&v(N,"d",e.marginalizedPath),t.marginalizedGauss&&Nt!==(Nt=xl(e.marginalizedGauss.mean.get(0,0)))&&m(q,Nt),t.sideWidth&&L!==(L=e.sideWidth-42)&&v(T,"x",L),(t.context||t.marginalizedGauss)&&D!==(D=bl(e.context,e.marginalizedGauss.mean.get(0,0)))&&v(T,"y",D),t.marginalizedGauss&&Tt!==(Tt=xl(e.marginalizedGauss.cov.get(0,0)))&&m(B,Tt),t.context&&Y!==(Y=e.context.height-10)&&v(O,"y",Y),t.sideWidth&&v(C,"width",e.sideWidth),t.context&&$!==($=e.context.height)&&v(C,"height",$);var n={};t.context&&(n.context=e.context),t.gaussian&&(n.sigma1=e.gaussian.cov.get(0,0)),t.gaussian&&(n.sigma2=e.gaussian.cov.get(1,1)),t.gaussian&&(n.cov=e.gaussian.cov.get(0,1)),t.limits&&(n.limits=e.limits),qt._set(n),t.condPos&&K!==(K=e.condPos[0])&&v(W,"x1",K),t.condPos&&Z!==(Z=e.condPos[0])&&v(W,"x2",Z),t.context&&Q!==(Q=e.context.height)&&v(W,"y2",Q),t.condPos&&tt!==(tt=e.condPos[0])&&v(J,"cx",tt),t.condPos&&et!==(et=e.condPos[1])&&v(J,"cy",et),t.cond&&Et!==(Et=xl(e.cond))&&m(it,Et),t.condPos&&at!==(at=e.condPos[0]+5)&&v(nt,"x",at),t.condPos&&st!==(st=e.condPos[1])&&v(nt,"y",st),t.context&&ot!==(ot=e.context.width)&&v(X,"width",ot),t.context&&ct!==(ct=e.context.height)&&v(X,"height",ct),t.conditionedPath&&v(ht,"d",e.conditionedPath),t.conditionedGauss&&zt!==(zt=xl(e.conditionedGauss.mean.get(0,0)))&&m(xt,zt),(t.context||t.conditionedGauss)&&bt!==(bt=bl(e.context,e.conditionedGauss.mean.get(0,0)))&&v(dt,"y",bt),t.marginalizedGauss&&Rt!==(Rt=xl(e.marginalizedGauss.cov.get(0,0)))&&m(St,Rt),t.context&&At!==(At=e.context.height-10)&&v(yt,"y",At),t.sideWidth&&v(lt,"width",e.sideWidth),t.context&&Pt!==(Pt=e.context.height)&&v(lt,"height",Pt)},d(t){t&&c(u),qt.destroy(),n.refs.gauss===qt&&(n.refs.gauss=null),n.refs.handle===J&&(n.refs.handle=null)}}),this.root._oncreate.push(()=>{(function(){this.refs.gauss.on("state",({_changed:t,current:e,_previous:n})=>{this.set({gaussian:e.gaussian})});const{context:t}=this.get();re(this.refs.handle).call(ye().on("drag",()=>{const e=t.width-10;let{cond:n}=this.get();n=t.x(Kf(Gt.x,10,e)),this.set({cond:n})}))}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(yl.prototype,z),yl.prototype._recompute=function(t,e){(t.context||t.cond)&&this._differs(e.condPos,e.condPos=function({context:t,cond:e}){return[t.u(e),50]}(e))&&(t.condPos=!0),(t.gaussian||t.cond)&&this._differs(e.conditionedGauss,e.conditionedGauss=function({gaussian:t,cond:e}){return t.condition([e])}(e))&&(t.conditionedGauss=!0),(t.context||t.gaussian||t.cond||t.sideWidth)&&this._differs(e.conditionedPath,e.conditionedPath=function({context:t,gaussian:e,cond:n,sideWidth:r}){const i=hs().domain(t.xDomain()).range([t.height,0]),a=hs().domain([.8,0]).range([r,0]),s=e.condition([n]),o=U(t.yDomain()[0],t.yDomain()[1]+ml,ml),c=o.map(t=>s.at([t])),u=X(o,c);return Cc().x(t=>a(t[1])).y(t=>i(t[0]))(u)}(e))&&(t.conditionedPath=!0),t.gaussian&&this._differs(e.marginalizedGauss,e.marginalizedGauss=function({gaussian:t}){return t.marginalize(1)[1]}(e))&&(t.marginalizedGauss=!0),(t.context||t.gaussian||t.sideWidth)&&this._differs(e.marginalizedPath,e.marginalizedPath=function({context:t,gaussian:e,sideWidth:n}){const r=hs().domain(t.xDomain()).range([0,t.height]),i=hs().domain([0,.5]).range([n,0]),a=e.marginalize(1)[1],s=U(t.yDomain()[0],t.yDomain()[1]+ml,ml),o=s.map(t=>a.at([t])),c=X(s,o);return Cc().x(t=>i(t[1])).y(t=>r(t[0]))(c)}(e))&&(t.marginalizedPath=!0)};var _l=yl;var wl={updateSlider(t,e,n){this.set({shouldResample:!0}),this.root.resample(),this.root.set({currentSelectedParameter:t,currentSelectedKernel:e,currentSelectedRef:n,shadows:[]})},getValue(t){const{params:e}=this.get();return t>e.max?e.max:t<e.min?e.min:t},hoverGrid(t,e){const{gridSize:n,offset:r}=this.get();let i=0;t.column==t.row?i=t.column:t.column>t.row?i=Math.min(t.column,t.row):t.column<t.row&&(i=Math.max(t.column,t.row)),e.selectAll(".covSelectedRect").attr("x",r+i*(n+r)).attr("y",r+i*(n+r)),e.selectAll(".covSelectedRectRow").attr("x",(t,e)=>r+e*(n+r)).attr("y",r+i*(n+r))},returnColor(t,e){let n;const{colorScale:r,axisScale:i}=this.get();return n=r(e?i.invert(t):i(t))},updateCovMat(){const t=this,{showText:e,covMatrix:n,grid:r,gridNode:i}=t.get(),a=re(this.refs.covMat),s=n;let o=0;for(let t=0;t<s.length;t++){const e=s[t];for(let n=0;n<e.length;n++)r[o]={row:t,column:n,cov:s[t][n]},o++}const c=i.data(r);c.exit().remove(),c.style("fill",e=>t.returnColor(e.cov)),this.set({gridNode:i}),1===e&&a.selectAll("text").data(r).text(function(t){return Math.round(10*t.cov)/10})},externalCov(t){this.set({covMatrix:t}),this.updateCovMat()},internalCov(){const{n:t,params:e,kernel:n}=this.get();let{xs:r}=this.get();r=U(0,t).map(hs().domain([0,t]).range([-5,5]));const i=e.map(t=>t.value),a=Df(r,n.apply(null,i));this.set({covMatrix:a,xs:r}),this.updateCovMat()}};function Ml({_changed:t,_current:e,_previous:n}){const{n:r,params:i,kernel:a,external:s}=this.get();if(!s){let{xs:t}=this.get();const e=-5,n=5;t=U(0,r).map(hs().domain([0,r]).range([e,n]));const s=i.map(t=>t.value),o=Df(t,a.apply(null,s));this.set({covMatrix:o,xs:t,shouldResample:!1}),this.updateCovMat()}}function kl(t){const{component:e,ctx:n}=this._svelte;e.updateSlider(n.p,n.name,this)}function Sl(t,e,n){const r=Object.create(t);return r.p=e[n],r.each_value=e,r.p_index=n,r}function Al(t,e){for(var n,r=e.params,i=[],a=0;a<r.length;a+=1)i[a]=Pl(t,Sl(e,r,a));return{c(){for(var t=0;t<i.length;t+=1)i[t].c();n=d()},m(t,e){for(var r=0;r<i.length;r+=1)i[r].m(t,e);o(t,n,e)},p(e,a){if(e.params||e.name){r=a.params;for(var s=0;s<r.length;s+=1){const o=Sl(a,r,s);i[s]?i[s].p(e,o):(i[s]=Pl(t,o),i[s].c(),i[s].m(n.parentNode,n))}for(;s<i.length;s+=1)i[s].d(1);i.length=r.length}},d(t){u(i,t),t&&c(n)}}}function Pl(t,e){var n,r,i,a,u,l,d,m,x,b,y,_,w=!1,M=!1;function k(){w=!0,e.each_value[e.p_index].name=i.value,t.set({params:e.params}),w=!1}function S(){M=!0,e.each_value[e.p_index].value=u.value,t.set({params:e.params}),M=!1}function A(){var n;e.each_value[e.p_index].value=""===(n=x.value)?void 0:+n,t.set({params:e.params})}return{c(){n=f("div"),r=f("p"),i=f("input"),a=h(" = "),u=f("input"),m=h("\n  "),x=f("input"),_=h("\n"),p(i,"input",k),i.disabled=!0,i.className="labelSlider svelte-vhcw8a",p(u,"input",S),u.disabled=!0,u.className="entry svelte-vhcw8a",u.min=l=e.p.min,u.max=d=e.p.max,r.className="label",x._svelte={component:t,ctx:e},p(x,"change",A),p(x,"input",A),p(x,"input",kl),v(x,"type","range"),x.min=b=e.p.min,x.max=y=e.p.max,x.step="0.01",x.className="svelte-vhcw8a"},m(t,c){o(t,n,c),s(n,r),s(r,i),i.value=e.p.name,s(r,a),s(r,u),u.value=e.p.value,s(n,m),s(n,x),x.value=e.p.value,s(n,_)},p(t,n){e=n,!w&&t.params&&(i.value=e.p.name),!M&&t.params&&(u.value=e.p.value),t.params&&l!==(l=e.p.min)&&(u.min=l),t.params&&d!==(d=e.p.max)&&(u.max=d),x._svelte.ctx=e,t.params&&(x.value=e.p.value),t.params&&b!==(b=e.p.min)&&(x.min=b),t.params&&y!==(y=e.p.max)&&(x.max=y)},d(t){t&&c(n),g(i,"input",k),g(u,"input",S),g(x,"change",A),g(x,"input",A),g(x,"input",kl)}}}function Cl(t){var e,n,r,u,p,g,m,x;S(this,t),this.refs={},this._state=i({name:"RBF",kernel:Rf,params:[{name:"Sigma",value:1,min:0,max:1},{name:"Length",value:1,min:0,max:2}],interaction:!1,slider:!0,covMatrix:[],n:25,width:150,height:150,hoveredRow:-1,hoveredRowIdx:-1,colorsRow:[],showText:!1,offset:0,gridSize:6,invertColor:!0,xs:[],external:!1,shouldResample:!0,colorScale:dc(vc).domain([1,0]),gridNode:-1},t.data),this._recompute({colorScale:1,n:1},this._state),this._intro=!0,this._handlers.update=[Ml],document.getElementById("svelte-vhcw8a-style")||((e=f("style")).id="svelte-vhcw8a-style",e.textContent="input.svelte-vhcw8a{font-size:12px}.svelte-ref-covMat.svelte-vhcw8a{background:none}.entry.svelte-vhcw8a{max-width:40px;border:0px solid;background-color:transparent}.labelSlider.svelte-vhcw8a{text-align:right;max-width:80px;border:0px solid;background-color:transparent}",s(document.head,e)),this._fragment=(n=this,r=this._state,x=r.slider&&Al(n,r),{c(){u=f("div"),p=l("svg"),g=h("\n"),x&&x.c(),m=d(),v(p,"class","plot svelte-vhcw8a svelte-ref-covMat"),v(p,"xmlns:bind","http://www.w3.org/1999/xhtml")},m(t,e){o(t,u,e),s(u,p),n.refs.covMat=p,o(t,g,e),x&&x.m(t,e),o(t,m,e)},p(t,e){e.slider?x?x.p(t,e):((x=Al(n,e)).c(),x.m(m.parentNode,m)):x&&(x.d(1),x=null)},d(t){t&&c(u),n.refs.covMat===p&&(n.refs.covMat=null),t&&c(g),x&&x.d(t),t&&c(m)}}),this.root._oncreate.push(()=>{(function(){const{params:t,kernel:e,n:n}=this.get(),r=this;let{xs:i}=this.get();i=U(0,n).map(hs().domain([0,n]).range([-5,5]));const a=t.map(t=>t.value),s=Df(i,e.apply(null,a)),{gridSize:o,offset:c,width:u,height:f,interaction:l,showText:h,grid:d}=r.get();let{hoveredRow:p,hoveredRowIdx:g,gridNode:v}=r.get();const m=re(this.refs.covMat).attr("width",u+c).attr("height",f+c),x=s;let b=0;for(let t=0;t<x.length;t++){const e=x[t];for(let n=0;n<e.length;n++)d[b]={row:t,column:n,cov:x[t][n]},b++}const y=(v=m.selectAll(".covRect")).data(d);if(y.exit().remove(),y.enter().append("rect").attr("class","covRect").attr("width",o).attr("height",o).attr("x",t=>c+t.column*(o+c)).attr("y",t=>c+t.row*(o+c)).style("fill",function(t){return r.returnColor(t.cov)}),y.style("fill",function(t){return r.returnColor(t.cov)}),v=m.selectAll(".covRect"),this.set({gridNode:v}),1===h){const t=m.selectAll("text").data(d);t.exit().remove(),t.enter().append("text").attr("class","covText").style("font-size",Math.min(2*o/3,2*o/3-8)+"px").attr("x",t=>t.column*(o+c)+o/2).attr("y",t=>t.row*(o+c)+o/2).style("dominant-baseline","central").style("alignment-baseline","central").style("text-anchor","middle").text(function(t){return Math.round(10*t.cov)/10}),t.text(function(t){return Math.round(10*t.cov)/10})}l&&(m.append("rect").classed("covSelectedRect",!0).attr("width",o+c).attr("height",o+c).style("stroke-width","1px").style("stroke-opacity","1").style("stroke","black").style("opacity",0).style("fill","none"),m.selectAll("covSelectedRectRow").data(Array.from(Array(n).keys())).enter().append("rect").classed("covSelectedRectRow",!0).attr("width",o+c).attr("height",o+c).style("stroke-width","1px").style("stroke-opacity","0.5").style("stroke","black").style("opacity",0).style("fill","none"),m.selectAll(".covRect").on("mouseover",function(t){const e=re(re(this).node().parentNode.parentNode);e.selectAll(".covSelectedRect").style("opacity",1),e.selectAll(".covSelectedRectRow").style("opacity",1),r.hoverGrid(t,e),p=t;const n=m.selectAll(".covRect").filter(function(e){return e.row===t.row&&(g=e.row),e.row===t.row}).data();r.set({colorsRow:n,hoveredRow:p,hoveredRowIdx:g,shouldResample:!1})}),m.on("mouseleave",function(){const t=re(re(this).node().parentNode.parentNode);t.selectAll(".covSelectedRect").style("opacity",0),t.selectAll(".covSelectedRectRow").style("opacity",0),r.set({colorsRow:[],hoveredRow:-1,hoveredRowIdx:-1,shouldResample:!1})}))}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(Cl.prototype,z),i(Cl.prototype,wl),Cl.prototype._recompute=function(t,e){t.colorScale&&this._differs(e.axisScale,e.axisScale=function({colorScale:t}){return hs().domain(t.domain()).range([0,1])}(e))&&(t.axisScale=!0),t.n&&this._differs(e.grid,e.grid=function({n:t}){return new Array(t*t)}(e))&&(t.grid=!0)};var Nl=Cl;const Tl={kernel:Rf,name:"RBF Kernel",equation:"\\sigma^2 \\exp \\left( - \\frac{||t-t'||^2}{2 l^2} \\right)",params:[{name:"Variance σ",description:"the average distance away from the function's mean.",value:.8,min:0,max:1},{name:"Length l",description:"the reach of influence on neighbors.",value:.8,min:.01,max:2}]},El={kernel:jf,name:"Periodic",equation:"\\sigma^2 \\exp \\left( - \\frac{2 \\sin^2(\\pi |t-t'| / p)}{l^2} \\right)",params:[{name:"Variance σ",description:"the average distance away from the function's mean.",value:.8,min:0,max:1},{name:"Length l",description:"the reach of influence on neighbors.",value:.8,min:.01,max:2},{name:"Periodicity p",description:"the distance between repetitions.",value:.5,min:0,max:Math.PI}]},zl={kernel:qf,name:"Linear",equation:"\\sigma_b^2 + \\sigma^2 (t - c)(t' - c)",params:[{name:"Variance σ",description:"the average distance away from the function's mean.",value:.3,min:0,max:1},{name:"Variance σ_b",description:"the certainty around C.",value:.8,min:0,max:1},{name:"Offset c",description:"the intersection point of all functions.",value:0,min:-2,max:2}]};var Rl={resample(){}};function jl({_changed:t,current:e,_previous:n}){const r=re(this.refs.annotations),{currentSelectedRef:i}=this.get();if(""!=i){const t=i.getBoundingClientRect(),n=t.left-this.refs.annotations.getBoundingClientRect().left+t.width/2,a=t.top-this.refs.annotations.getBoundingClientRect().top-t.height;r.select(".lineConnector").attr("d",function(){return e.connectedline([[n,a-5],[n,a-20],[30,a-20],[30,15],[40,15]])}),re(this.refs.description).style("opacity",1)}}function ql(t,e,n){const r=Object.create(t);return r.k=e[n],r}function Ll(t,e){var n,r,i,a,u,l,d,p,g,v,x=e.k.name,b=e.k.equation,y={kernel:e.k.kernel,params:e.k.params,name:e.k.name},_=new Nl({root:t.root,store:t.store,data:y});return{c(){n=f("div"),r=f("div"),i=f("h4"),a=h(x),u=h("\n    "),l=f("div"),d=f("d-math"),p=h(b),g=h("\n    "),v=f("div"),_._fragment.c(),l.className="equation svelte-znq9s9",n.className="grid-item svelte-znq9s9"},m(t,e){o(t,n,e),s(n,r),s(r,i),s(i,a),s(n,u),s(n,l),s(l,d),s(d,p),s(n,g),s(n,v),_._mount(v,null)},p(t,e){t.kernels&&x!==(x=e.k.name)&&m(a,x),t.kernels&&b!==(b=e.k.equation)&&m(p,b);var n={};t.kernels&&(n.kernel=e.k.kernel),t.kernels&&(n.params=e.k.params),t.kernels&&(n.name=e.k.name),_._set(n)},d(t){t&&c(n),_.destroy()}}}function Dl(t){var e;S(this,t),this.refs={},this._state=i({kernels:[Tl,El,zl],scale:dc(vc),currentSelectedParameter:{description:"...",name:"..."},currentSelectedKernel:"",currentSelectedRef:""},t.data),this._recompute({_context:1},this._state),this._intro=!0,this._handlers.update=[jl],document.getElementById("svelte-znq9s9-style")||((e=f("style")).id="svelte-znq9s9-style",e.textContent=".svelte-ref-annotations.svelte-znq9s9{position:absolute;pointer-events:none;margin:1em;right:-200px;bottom:5px;overflow:visible}.svelte-ref-padder.svelte-znq9s9{padding-top:108px\n    }.kernel-grid.svelte-znq9s9{display:inline-grid;grid-template-columns:auto auto auto auto}.grid-item.svelte-znq9s9{margin:0.5em}.equation.svelte-znq9s9{padding-bottom:1em;height:36px}",s(document.head,e)),this._fragment=function(t,e){for(var n,r,i,a,d,p,g,x,b,y,_,w,M,k,S,A,P,C,N,T=e.currentSelectedParameter.name,E=e.currentSelectedParameter.description,z=e.kernels,R=[],j=0;j<z.length;j+=1)R[j]=Ll(t,ql(e,z,j));var q={colorScale:e.scale},L=new ll({root:t.root,store:t.store,data:q});return{c(){n=f("div");for(var t=0;t<R.length;t+=1)R[t].c();r=h("\n  "),i=f("div"),a=f("div"),L._fragment.c(),d=h("\n"),p=l("svg"),g=l("text"),x=l("tspan"),b=h("For the\n      "),y=l("tspan"),_=h(e.currentSelectedKernel),w=h("\n      kernel\n    "),M=l("tspan"),k=h("the parameter\n      "),S=l("tspan"),A=h(T),P=h("\n      determines\n    "),C=l("tspan"),N=h(E),a.className="svelte-znq9s9 svelte-ref-padder",i.className="grid-item svelte-znq9s9",n.className="kernel-grid svelte-znq9s9",v(y,"font-weight","bold"),v(x,"x","50"),v(x,"dy","1.5em"),v(S,"font-weight","bold"),v(M,"x","50"),v(M,"dy","1.5em"),v(C,"x","50"),v(C,"dy","1.5em"),v(g,"class","annotation"),v(p,"width","300"),v(p,"height","150"),v(p,"class","svelte-znq9s9 svelte-ref-annotations")},m(e,c){o(e,n,c);for(var u=0;u<R.length;u+=1)R[u].m(n,null);s(n,r),s(n,i),s(i,a),L._mount(a,null),t.refs.padder=a,t.refs.gridMultipleKernel=n,o(e,d,c),o(e,p,c),s(p,g),s(g,x),s(x,b),s(x,y),s(y,_),s(x,w),s(g,M),s(M,k),s(M,S),s(S,A),s(M,P),s(g,C),s(C,N),t.refs.description=g,t.refs.annotations=p},p(e,i){if(e.kernels){z=i.kernels;for(var a=0;a<z.length;a+=1){const s=ql(i,z,a);R[a]?R[a].p(e,s):(R[a]=Ll(t,s),R[a].c(),R[a].m(n,r))}for(;a<R.length;a+=1)R[a].d(1);R.length=z.length}var s={};e.scale&&(s.colorScale=i.scale),L._set(s),e.currentSelectedKernel&&m(_,i.currentSelectedKernel),e.currentSelectedParameter&&T!==(T=i.currentSelectedParameter.name)&&m(A,T),e.currentSelectedParameter&&E!==(E=i.currentSelectedParameter.description)&&m(N,E)},d(e){e&&c(n),u(R,e),L.destroy(),t.refs.padder===a&&(t.refs.padder=null),t.refs.gridMultipleKernel===n&&(t.refs.gridMultipleKernel=null),e&&(c(d),c(p)),t.refs.description===g&&(t.refs.description=null),t.refs.annotations===p&&(t.refs.annotations=null)}}}(this,this._state),this.root._oncreate.push(()=>{(function(){re(this.refs.annotations).append("path").classed("lineConnector",!0).attr("stroke","rgba(0, 0, 0, 0.2)").attr("fill","transparent").style("stroke-width","2px").style("stroke-dasharray",4),re(this.refs.description).style("opacity",0)}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(Dl.prototype,z),i(Dl.prototype,Rl),Dl.prototype._recompute=function(t,e){t._context&&this._differs(e.connectedline,e.connectedline=function({_context:t}){return Cc().curve(iu).x(t=>t[0]).y(t=>t[1])}(e))&&(t.connectedline=!0)};var Ol=Dl;const Ul=dc(mc).domain([-1,10]);function Il(t){return Ul(t)}function Vl(t,e,n){const r=Object.create(t);return r.x=e[n],r}function Fl(t,e,n){const r=Object.create(t);return r.x=e[n],r}function Bl(t,e,n){const r=Object.create(t);return r.x=e[n],r}function Yl(t,e){var n,r,i,a,u,f,d;return{c(){n=l("text"),r=l("tspan"),i=h("f(x) = ?"),u=l("line"),v(r,"font-weight","bold"),v(n,"x",a=20*e.x+6),v(n,"y","90"),v(n,"class","annotation"),v(u,"class","dashed svelte-1gfbgft"),v(u,"x1",f=20*e.x+e.bs/2+6),v(u,"y1","158"),v(u,"x2",d=20*e.x+e.bs/2+6),v(u,"y2","95"),v(u,"stroke","grey")},m(t,e){o(t,n,e),s(n,r),s(r,i),o(t,u,e)},p(t,e){t.xs&&a!==(a=20*e.x+6)&&v(n,"x",a),(t.xs||t.bs)&&f!==(f=20*e.x+e.bs/2+6)&&v(u,"x1",f),(t.xs||t.bs)&&d!==(d=20*e.x+e.bs/2+6)&&v(u,"x2",d)},d(t){t&&(c(n),c(u))}}}function $l(t,e){var n,r,i,a=5==e.x&&Yl(0,e);return{c(){a&&a.c(),v(n=l("rect"),"x",r=20*e.x+6),v(n,"y","158"),v(n,"width",e.bs),v(n,"height",e.bs),v(n,"fill",i=Il(e.x))},m(t,e){a&&a.m(t,e),o(t,n,e)},p(t,e){5==e.x?a?a.p(t,e):((a=Yl(0,e)).c(),a.m(n.parentNode,n)):a&&(a.d(1),a=null),t.xs&&r!==(r=20*e.x+6)&&v(n,"x",r),t.bs&&(v(n,"width",e.bs),v(n,"height",e.bs)),t.xs&&i!==(i=Il(e.x))&&v(n,"fill",i)},d(t){a&&a.d(t),t&&c(n)}}}function Gl(t,e){var n,r,i,a,s,u;return{c(){n=l("rect"),a=l("rect"),v(n,"x",r=12*e.x+12),v(n,"y","0"),v(n,"width",e.bs),v(n,"height",e.bs),v(n,"fill",i=Il(e.x)),v(a,"x","0"),v(a,"y",s=12*e.x+12),v(a,"width",e.bs),v(a,"height",e.bs),v(a,"fill",u=Il(e.x))},m(t,e){o(t,n,e),o(t,a,e)},p(t,e){t.xs&&r!==(r=12*e.x+12)&&v(n,"x",r),t.bs&&(v(n,"width",e.bs),v(n,"height",e.bs)),t.xs&&i!==(i=Il(e.x))&&v(n,"fill",i),t.xs&&s!==(s=12*e.x+12)&&v(a,"y",s),t.bs&&(v(a,"width",e.bs),v(a,"height",e.bs)),t.xs&&u!==(u=Il(e.x))&&v(a,"fill",u)},d(t){t&&(c(n),c(a))}}}function Hl(t,e){var n,r,i,a,s,u,f,h,d,p,g;return{c(){n=l("line"),s=l("circle"),d=l("rect"),v(n,"class","dashed svelte-1gfbgft"),v(n,"x1",r=20*e.x+e.bs/2+6),v(n,"y1","158"),v(n,"x2",i=20*e.x+e.bs/2+6),v(n,"y2",a=20*e.Math.sin(e.x/2)+90),v(n,"stroke","grey"),v(s,"cx",u=20*e.x+e.bs/2+6),v(s,"cy",f=20*e.Math.sin(e.x/2)+90),v(s,"r",h=e.bs/4),v(s,"fill","grey"),v(d,"x",p=20*e.x+6),v(d,"y","158"),v(d,"width",e.bs),v(d,"height",e.bs),v(d,"fill",g=Il(e.x))},m(t,e){o(t,n,e),o(t,s,e),o(t,d,e)},p(t,e){(t.xs||t.bs)&&r!==(r=20*e.x+e.bs/2+6)&&v(n,"x1",r),(t.xs||t.bs)&&i!==(i=20*e.x+e.bs/2+6)&&v(n,"x2",i),(t.Math||t.xs)&&a!==(a=20*e.Math.sin(e.x/2)+90)&&v(n,"y2",a),(t.xs||t.bs)&&u!==(u=20*e.x+e.bs/2+6)&&v(s,"cx",u),(t.Math||t.xs)&&f!==(f=20*e.Math.sin(e.x/2)+90)&&v(s,"cy",f),t.bs&&h!==(h=e.bs/4)&&v(s,"r",h),t.xs&&p!==(p=20*e.x+6)&&v(d,"x",p),t.bs&&(v(d,"width",e.bs),v(d,"height",e.bs)),t.xs&&g!==(g=Il(e.x))&&v(d,"fill",g)},d(t){t&&(c(n),c(s),c(d))}}}function Xl(t){var e;S(this,t),this._state=i(i({Math:Math},{bs:8,xs:U(0,10)}),t.data),this._intro=!0,document.getElementById("svelte-1gfbgft-style")||((e=f("style")).id="svelte-1gfbgft-style",e.textContent=".dashed.svelte-1gfbgft{stroke:rgba(0,0,0,0.4);stroke-dasharray:4}",s(document.head,e)),this._fragment=function(t,e){for(var n,r,i,a,f,d,p,g,m,x,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F,B,Y,$,G,H,X,W,K,Z,Q,J,tt,et,nt,rt,it,at,st,ot,ct,ut,ft,lt,ht,dt,pt,gt,vt,mt,xt,bt,yt=e.xs,_t=[],wt=0;wt<yt.length;wt+=1)_t[wt]=$l(0,Bl(e,yt,wt));var Mt=e.xs,kt=[];for(wt=0;wt<Mt.length;wt+=1)kt[wt]=Gl(0,Fl(e,Mt,wt));var St=e.xs,At=[];for(wt=0;wt<St.length;wt+=1)At[wt]=Hl(0,Vl(e,St,wt));return{c(){n=l("svg"),r=l("g"),i=l("rect");for(var t=0;t<_t.length;t+=1)_t[t].c();for(a=l("text"),f=h("We are interested in predicting the\n    "),d=l("tspan"),p=h("function values for 10 different"),g=l("tspan"),m=l("tspan"),x=h("x"),b=h(" values from ["),y=l("tspan"),_=h("■"),w=h(","),M=l("tspan"),k=h("■"),S=h("] without"),A=l("tspan"),P=h("knowing about training points."),C=l("g"),N=l("text"),T=l("tspan"),E=h("Covariance matrix"),z=l("g"),R=l("line"),O=l("line"),B=l("g"),Y=l("text"),$=h("= k("),G=l("tspan"),H=h("■"),X=h(","),W=l("tspan"),K=h("■"),Z=h(")"),Q=l("text"),J=h("10x10"),tt=l("rect"),t=0;t<kt.length;t+=1)kt[t].c();for(et=l("rect"),nt=l("text"),rt=h("The covariance matrix is\n    "),it=l("tspan"),at=h("created by pairwise evaluation"),st=l("tspan"),ot=h("of the kernel function resulting"),ct=l("tspan"),ut=h("in a 10-dimensional distribution."),ft=l("g"),lt=l("rect"),t=0;t<At.length;t+=1)At[t].c();ht=l("text"),dt=h("Sampling from this distribution\n    "),pt=l("tspan"),gt=h("results in a 10-dimensional vector"),vt=l("tspan"),mt=h("where each entry represents"),xt=l("tspan"),bt=h("one function value."),v(i,"x","0"),v(i,"y","0"),v(i,"width","200"),v(i,"height","150"),v(i,"fill","rgb(252, 252, 252)"),v(i,"stroke","rgba(0, 0, 0, 0.1)"),v(d,"x","0"),v(d,"dy","1.5em"),v(m,"font-style","italic"),v(y,"fill",Il(0)),v(M,"fill",Il(9)),v(g,"x","0"),v(g,"dy","1.5em"),v(A,"x","0"),v(A,"dy","1.5em"),v(a,"x","0"),v(a,"y","195"),v(a,"class","annotation"),v(r,"transform","translate(1,1)"),v(T,"font-weight","bold"),v(N,"x","0"),v(N,"y","11"),v(N,"class","annotation"),v(R,"class","dashed svelte-1gfbgft"),v(R,"x1",j=36+e.bs/2),v(R,"y1",q=e.bs/2),v(R,"x2",L=36+e.bs/2),v(R,"y2",D=72+e.bs/2),v(O,"class","dashed svelte-1gfbgft"),v(O,"y1",U=72+e.bs/2),v(O,"x1",I=e.bs/2),v(O,"y2",V=72+e.bs/2),v(O,"x2",F=36+e.bs/2),v(G,"fill",Il(5)),v(W,"fill",Il(2)),v(Y,"x","0"),v(Y,"y","0"),v(Y,"class","annotation"),v(Q,"x","40"),v(Q,"y","43"),v(Q,"class","annotation"),v(B,"transform","translate(50,80)"),v(tt,"x","12"),v(tt,"y","12"),v(tt,"width","116"),v(tt,"height","116"),v(tt,"stroke","black"),v(tt,"fill","transparent"),v(et,"x",36),v(et,"y",72),v(et,"width",e.bs),v(et,"height",e.bs),v(et,"fill","grey"),v(z,"transform","translate(0,25)"),v(it,"x","0"),v(it,"dy","1.5em"),v(st,"x","0"),v(st,"dy","1.5em"),v(ct,"x","0"),v(ct,"dy","1.5em"),v(nt,"x","0"),v(nt,"y","195"),v(nt,"class","annotation"),v(C,"transform","translate(260,0)"),v(lt,"x","0"),v(lt,"y","0"),v(lt,"width","200"),v(lt,"height","150"),v(lt,"fill","rgb(252, 252, 252)"),v(lt,"stroke","rgba(0, 0, 0, 0.1)"),v(pt,"x","0"),v(pt,"dy","1.5em"),v(vt,"x","0"),v(vt,"dy","1.5em"),v(xt,"x","0"),v(xt,"dy","1.5em"),v(ht,"x","0"),v(ht,"y","195"),v(ht,"class","annotation"),v(ft,"transform","translate(490,1)"),v(n,"width","700"),v(n,"height","280")},m(t,e){o(t,n,e),s(n,r),s(r,i);for(var c=0;c<_t.length;c+=1)_t[c].m(r,null);for(s(r,a),s(a,f),s(a,d),s(d,p),s(a,g),s(g,m),s(m,x),s(g,b),s(g,y),s(y,_),s(g,w),s(g,M),s(M,k),s(g,S),s(a,A),s(A,P),s(n,C),s(C,N),s(N,T),s(T,E),s(C,z),s(z,R),s(z,O),s(z,B),s(B,Y),s(Y,$),s(Y,G),s(G,H),s(Y,X),s(Y,W),s(W,K),s(Y,Z),s(B,Q),s(Q,J),s(z,tt),c=0;c<kt.length;c+=1)kt[c].m(z,null);for(s(z,et),s(C,nt),s(nt,rt),s(nt,it),s(it,at),s(nt,st),s(st,ot),s(nt,ct),s(ct,ut),s(n,ft),s(ft,lt),c=0;c<At.length;c+=1)At[c].m(ft,null);s(ft,ht),s(ht,dt),s(ht,pt),s(pt,gt),s(ht,vt),s(vt,mt),s(ht,xt),s(xt,bt)},p(t,e){if(t.xs||t.bs){yt=e.xs;for(var n=0;n<yt.length;n+=1){const i=Bl(e,yt,n);_t[n]?_t[n].p(t,i):(_t[n]=$l(0,i),_t[n].c(),_t[n].m(r,a))}for(;n<_t.length;n+=1)_t[n].d(1);_t.length=yt.length}if(t.bs&&j!==(j=36+e.bs/2)&&v(R,"x1",j),t.bs&&q!==(q=e.bs/2)&&v(R,"y1",q),t.bs&&L!==(L=36+e.bs/2)&&v(R,"x2",L),t.bs&&D!==(D=72+e.bs/2)&&v(R,"y2",D),t.bs&&U!==(U=72+e.bs/2)&&v(O,"y1",U),t.bs&&I!==(I=e.bs/2)&&v(O,"x1",I),t.bs&&V!==(V=72+e.bs/2)&&v(O,"y2",V),t.bs&&F!==(F=36+e.bs/2)&&v(O,"x2",F),t.xs||t.bs){for(Mt=e.xs,n=0;n<Mt.length;n+=1){const r=Fl(e,Mt,n);kt[n]?kt[n].p(t,r):(kt[n]=Gl(0,r),kt[n].c(),kt[n].m(z,et))}for(;n<kt.length;n+=1)kt[n].d(1);kt.length=Mt.length}if(t.bs&&(v(et,"width",e.bs),v(et,"height",e.bs)),t.xs||t.bs||t.Math){for(St=e.xs,n=0;n<St.length;n+=1){const r=Vl(e,St,n);At[n]?At[n].p(t,r):(At[n]=Hl(0,r),At[n].c(),At[n].m(ft,ht))}for(;n<At.length;n+=1)At[n].d(1);At.length=St.length}},d(t){t&&c(n),u(_t,t),u(kt,t),u(At,t)}}}(0,this._state),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor))}i(Xl.prototype,z);var Wl=Xl;const Kl=dc(mc).domain([-1,10]);function Zl(t){return Kl(t)}function Ql(t,e,n){const r=Object.create(t);return r.x=e[n],r}function Jl(t,e,n){const r=Object.create(t);return r.x=e[n],r}function th(t,e,n){const r=Object.create(t);return r.x=e[n],r}function eh(t,e){var n,r,i,a,u,f,d;return{c(){n=l("text"),r=l("tspan"),i=h("f(x) = ?"),u=l("line"),v(r,"font-weight","bold"),v(n,"x",a=20*e.x+6),v(n,"y","90"),v(n,"class","annotation"),v(u,"class","dashed svelte-1gfbgft"),v(u,"x1",f=20*e.x+e.bs/2+6),v(u,"y1","158"),v(u,"x2",d=20*e.x+e.bs/2+6),v(u,"y2","95"),v(u,"stroke","grey")},m(t,e){o(t,n,e),s(n,r),s(r,i),o(t,u,e)},p(t,e){t.xs&&a!==(a=20*e.x+6)&&v(n,"x",a),(t.xs||t.bs)&&f!==(f=20*e.x+e.bs/2+6)&&v(u,"x1",f),(t.xs||t.bs)&&d!==(d=20*e.x+e.bs/2+6)&&v(u,"x2",d)},d(t){t&&(c(n),c(u))}}}function nh(t,e){var n,r,i,a=4==e.x&&eh(0,e);return{c(){a&&a.c(),v(n=l("rect"),"x",r=20*e.x+6),v(n,"y","158"),v(n,"width",e.bs),v(n,"height",e.bs),v(n,"fill",i=Zl(e.x))},m(t,e){a&&a.m(t,e),o(t,n,e)},p(t,e){4==e.x?a?a.p(t,e):((a=eh(0,e)).c(),a.m(n.parentNode,n)):a&&(a.d(1),a=null),t.xs&&r!==(r=20*e.x+6)&&v(n,"x",r),t.bs&&(v(n,"width",e.bs),v(n,"height",e.bs)),t.xs&&i!==(i=Zl(e.x))&&v(n,"fill",i)},d(t){a&&a.d(t),t&&c(n)}}}function rh(t,e){var n,r,i,a,s,u;return{c(){n=l("rect"),a=l("rect"),v(n,"x",r=12*e.x+12),v(n,"y","0"),v(n,"width",e.bs),v(n,"height",e.bs),v(n,"fill",i=Zl(e.x-2)),v(a,"x","0"),v(a,"y",s=12*e.x+12),v(a,"width",e.bs),v(a,"height",e.bs),v(a,"fill",u=Zl(e.x-2))},m(t,e){o(t,n,e),o(t,a,e)},p(t,e){t.xst&&r!==(r=12*e.x+12)&&v(n,"x",r),t.bs&&(v(n,"width",e.bs),v(n,"height",e.bs)),t.xst&&i!==(i=Zl(e.x-2))&&v(n,"fill",i),t.xst&&s!==(s=12*e.x+12)&&v(a,"y",s),t.bs&&(v(a,"width",e.bs),v(a,"height",e.bs)),t.xst&&u!==(u=Zl(e.x-2))&&v(a,"fill",u)},d(t){t&&(c(n),c(a))}}}function ih(t,e){var n,r,i,a;return{c(){n=l("rect"),i=l("rect"),v(n,"x",r=12*e.x+12),v(n,"y","0"),v(n,"width",e.bs),v(n,"height",e.bs),v(n,"fill","rgb(245, 181, 62)"),v(i,"x","0"),v(i,"y",a=12*e.x+12),v(i,"width",e.bs),v(i,"height",e.bs),v(i,"fill","rgb(245, 181, 62)")},m(t,e){o(t,n,e),o(t,i,e)},p(t,e){t.xst&&r!==(r=12*e.x+12)&&v(n,"x",r),t.bs&&(v(n,"width",e.bs),v(n,"height",e.bs)),t.xst&&a!==(a=12*e.x+12)&&v(i,"y",a),t.bs&&(v(i,"width",e.bs),v(i,"height",e.bs))},d(t){t&&(c(n),c(i))}}}function ah(t,e){var n;function r(t){return t.x<2?ih:rh}var i=r(e),a=i(t,e);return{c(){a.c(),n=d()},m(t,e){a.m(t,e),o(t,n,e)},p(e,s){i===(i=r(s))&&a?a.p(e,s):(a.d(1),(a=i(t,s)).c(),a.m(n.parentNode,n))},d(t){a.d(t),t&&c(n)}}}function sh(t,e){var n,r,i,a,s,u;return{c(){n=l("rect"),a=l("rect"),v(n,"x",r=12*e.x+12),v(n,"y","0"),v(n,"width",e.bs),v(n,"height",e.bs),v(n,"fill",i=Zl(e.x)),v(a,"x","0"),v(a,"y",s=12*e.x+12),v(a,"width",e.bs),v(a,"height",e.bs),v(a,"fill",u=Zl(e.x))},m(t,e){o(t,n,e),o(t,a,e)},p(t,e){t.xs&&r!==(r=12*e.x+12)&&v(n,"x",r),t.bs&&(v(n,"width",e.bs),v(n,"height",e.bs)),t.xs&&i!==(i=Zl(e.x))&&v(n,"fill",i),t.xs&&s!==(s=12*e.x+12)&&v(a,"y",s),t.bs&&(v(a,"width",e.bs),v(a,"height",e.bs)),t.xs&&u!==(u=Zl(e.x))&&v(a,"fill",u)},d(t){t&&(c(n),c(a))}}}function oh(t){var e;S(this,t),this._state=i({bs:8,xs:U(0,10),xst:U(0,12)},t.data),this._intro=!0,document.getElementById("svelte-1gfbgft-style")||((e=f("style")).id="svelte-1gfbgft-style",e.textContent=".dashed.svelte-1gfbgft{stroke:rgba(0,0,0,0.4);stroke-dasharray:4}",s(document.head,e)),this._fragment=function(t,e){for(var n,r,i,a,f,d,p,g,m,x,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F,B,Y,$,G,H,X,W,K,Z,Q,J,tt,et,nt,rt,it,at,st,ot,ct,ut,ft,lt,ht,dt,pt,gt,vt,mt,xt,bt,yt,_t,wt,Mt,kt,St,At,Pt,Ct,Nt,Tt,Et,zt,Rt,jt,qt,Lt,Dt,Ot,Ut,It,Vt,Ft,Bt=e.xs,Yt=[],$t=0;$t<Bt.length;$t+=1)Yt[$t]=nh(0,th(e,Bt,$t));var Gt=e.xst,Ht=[];for($t=0;$t<Gt.length;$t+=1)Ht[$t]=ah(t,Jl(e,Gt,$t));var Xt=e.xs,Wt=[];for($t=0;$t<Xt.length;$t+=1)Wt[$t]=sh(0,Ql(e,Xt,$t));return{c(){n=l("svg"),r=l("g"),i=l("rect");for(var t=0;t<Yt.length;t+=1)Yt[t].c();for(a=l("line"),p=l("rect"),g=l("circle"),b=l("line"),w=l("rect"),M=l("circle"),A=l("text"),P=h("Adding training points ("),C=l("tspan"),N=h("■"),T=h(") changes\n    "),E=l("tspan"),z=h("the number of dimensions of the"),R=l("tspan"),j=h("multivariate Guassian distribution."),q=l("g"),L=l("text"),D=l("tspan"),O=h("Covariance matrix"),U=l("g"),I=l("line"),$=l("line"),K=l("g"),Z=l("text"),Q=h("= k("),J=l("tspan"),tt=h("■"),et=h(","),nt=l("tspan"),rt=h("■"),it=h(")"),at=l("text"),st=h("12x12"),ot=l("rect"),t=0;t<Ht.length;t+=1)Ht[t].c();for(ct=l("rect"),ut=l("text"),ft=h("The covariance matrix is\n    "),lt=l("tspan"),ht=h("created by pairwise evaluation"),dt=l("tspan"),pt=h("of the kernel function resulting"),gt=l("tspan"),vt=h("in a 12-dimensional distribution."),mt=l("g"),xt=l("text"),bt=l("tspan"),yt=h("Covariance matrix"),_t=l("g"),wt=l("text"),Mt=l("tspan"),kt=h("conditioning"),St=l("image"),At=l("text"),Pt=h("10x10"),Ct=l("rect"),t=0;t<Wt.length;t+=1)Wt[t].c();var s,o;Nt=l("text"),Tt=h("Through "),Et=l("tspan"),zt=h("conditioning"),Rt=h(" we obtain\n    "),jt=l("tspan"),qt=h("the distribution that describes"),Lt=l("tspan"),Dt=h("the prediction of the function"),Ot=l("tspan"),Ut=h("values for the given "),It=l("tspan"),Vt=h("x"),Ft=h(" values."),v(i,"x","0"),v(i,"y","0"),v(i,"width","200"),v(i,"height","150"),v(i,"fill","rgb(252, 252, 252)"),v(i,"stroke","rgba(0, 0, 0, 0.1)"),v(a,"class","dashed svelte-1gfbgft"),v(a,"x1",f=56+e.bs/2),v(a,"y1","158"),v(a,"x2",d=56+e.bs/2),v(a,"y2","50"),v(p,"x",56),v(p,"y","158"),v(p,"width",e.bs),v(p,"height",e.bs),v(p,"fill","rgb(245, 181, 62)"),v(g,"cx",m=56+e.bs/2),v(g,"cy","50"),v(g,"r",x=e.bs/2),v(g,"fill","rgb(245, 181, 62)"),v(b,"class","dashed svelte-1gfbgft"),v(b,"x1",y=156+e.bs/2),v(b,"y1","158"),v(b,"x2",_=156+e.bs/2),v(b,"y2","40"),v(w,"x",156),v(w,"y","158"),v(w,"width",e.bs),v(w,"height",e.bs),v(w,"fill","rgb(245, 181, 62)"),v(M,"cx",k=156+e.bs/2),v(M,"cy","40"),v(M,"r",S=e.bs/2),v(M,"fill","rgb(245, 181, 62)"),v(C,"fill","rgb(245, 181, 62)"),v(E,"x","0"),v(E,"dy","1.5em"),v(R,"x","0"),v(R,"dy","1.5em"),v(A,"x","0"),v(A,"y","195"),v(A,"class","annotation"),v(r,"transform","translate(1,1)"),v(D,"font-weight","bold"),v(L,"x","0"),v(L,"y","9"),v(L,"class","annotation"),v(I,"class","dashed svelte-1gfbgft"),v(I,"x1",V=24+e.bs/2),v(I,"y1",F=e.bs/2),v(I,"x2",B=24+e.bs/2),v(I,"y2",Y=72+e.bs/2),v($,"class","dashed svelte-1gfbgft"),v($,"y1",G=72+e.bs/2),v($,"x1",H=e.bs/2),v($,"y2",X=72+e.bs/2),v($,"x2",W=24+e.bs/2),v(J,"fill",Zl(3)),v(nt,"fill","rgb(245, 181, 62)"),v(Z,"x","0"),v(Z,"y","0"),v(Z,"class","annotation"),v(K,"transform","translate(34,80)"),v(at,"x","114"),v(at,"y","147"),v(at,"class","annotation"),v(ot,"x","12"),v(ot,"y","12"),v(ot,"width","140"),v(ot,"height","140"),v(ot,"stroke","black"),v(ot,"fill","transparent"),v(ct,"x",24),v(ct,"y",72),v(ct,"width",e.bs),v(ct,"height",e.bs),v(ct,"fill","grey"),v(U,"transform","translate(0,20)"),v(lt,"x","0"),v(lt,"dy","1.5em"),v(dt,"x","0"),v(dt,"dy","1.5em"),v(gt,"x","0"),v(gt,"dy","1.5em"),v(ut,"x","0"),v(ut,"y","195"),v(ut,"class","annotation"),v(q,"transform","translate(260,0)"),v(bt,"font-weight","bold"),v(xt,"x","0"),v(xt,"y","9"),v(xt,"class","annotation"),v(Mt,"fill","rgb(245, 181, 62)"),v(wt,"x","30"),v(wt,"y","42"),v(wt,"class","annotation"),v(St,"x","20"),v(St,"y","27"),v(St,"width","100"),v(St,"height","100"),s="xlink:href",o="images/process.svg",St.setAttributeNS("http://www.w3.org/1999/xlink",s,o),v(At,"x","90"),v(At,"y","123"),v(At,"class","annotation"),v(Ct,"x","12"),v(Ct,"y","12"),v(Ct,"width","116"),v(Ct,"height","116"),v(Ct,"stroke","black"),v(Ct,"fill","transparent"),v(_t,"transform","translate(0,20)"),v(Et,"font-weight","bold"),v(jt,"x","0"),v(jt,"dy","1.5em"),v(Lt,"x","0"),v(Lt,"dy","1.5em"),v(It,"font-style","italic"),v(Ot,"x","0"),v(Ot,"dy","1.5em"),v(Nt,"x","0"),v(Nt,"y","195"),v(Nt,"class","annotation"),v(mt,"transform","translate(490,0)"),v(n,"width","700"),v(n,"height","280")},m(t,e){o(t,n,e),s(n,r),s(r,i);for(var c=0;c<Yt.length;c+=1)Yt[c].m(r,null);for(s(r,a),s(r,p),s(r,g),s(r,b),s(r,w),s(r,M),s(r,A),s(A,P),s(A,C),s(C,N),s(A,T),s(A,E),s(E,z),s(A,R),s(R,j),s(n,q),s(q,L),s(L,D),s(D,O),s(q,U),s(U,I),s(U,$),s(U,K),s(K,Z),s(Z,Q),s(Z,J),s(J,tt),s(Z,et),s(Z,nt),s(nt,rt),s(Z,it),s(U,at),s(at,st),s(U,ot),c=0;c<Ht.length;c+=1)Ht[c].m(U,null);for(s(U,ct),s(q,ut),s(ut,ft),s(ut,lt),s(lt,ht),s(ut,dt),s(dt,pt),s(ut,gt),s(gt,vt),s(n,mt),s(mt,xt),s(xt,bt),s(bt,yt),s(mt,_t),s(_t,wt),s(wt,Mt),s(Mt,kt),s(_t,St),s(_t,At),s(At,Pt),s(_t,Ct),c=0;c<Wt.length;c+=1)Wt[c].m(_t,null);s(mt,Nt),s(Nt,Tt),s(Nt,Et),s(Et,zt),s(Nt,Rt),s(Nt,jt),s(jt,qt),s(Nt,Lt),s(Lt,Dt),s(Nt,Ot),s(Ot,Ut),s(Ot,It),s(It,Vt),s(Ot,Ft)},p(e,n){if(e.xs||e.bs){Bt=n.xs;for(var i=0;i<Bt.length;i+=1){const t=th(n,Bt,i);Yt[i]?Yt[i].p(e,t):(Yt[i]=nh(0,t),Yt[i].c(),Yt[i].m(r,a))}for(;i<Yt.length;i+=1)Yt[i].d(1);Yt.length=Bt.length}if(e.bs&&f!==(f=56+n.bs/2)&&v(a,"x1",f),e.bs&&d!==(d=56+n.bs/2)&&v(a,"x2",d),e.bs&&(v(p,"width",n.bs),v(p,"height",n.bs)),e.bs&&m!==(m=56+n.bs/2)&&v(g,"cx",m),e.bs&&x!==(x=n.bs/2)&&v(g,"r",x),e.bs&&y!==(y=156+n.bs/2)&&v(b,"x1",y),e.bs&&_!==(_=156+n.bs/2)&&v(b,"x2",_),e.bs&&(v(w,"width",n.bs),v(w,"height",n.bs)),e.bs&&k!==(k=156+n.bs/2)&&v(M,"cx",k),e.bs&&S!==(S=n.bs/2)&&v(M,"r",S),e.bs&&V!==(V=24+n.bs/2)&&v(I,"x1",V),e.bs&&F!==(F=n.bs/2)&&v(I,"y1",F),e.bs&&B!==(B=24+n.bs/2)&&v(I,"x2",B),e.bs&&Y!==(Y=72+n.bs/2)&&v(I,"y2",Y),e.bs&&G!==(G=72+n.bs/2)&&v($,"y1",G),e.bs&&H!==(H=n.bs/2)&&v($,"x1",H),e.bs&&X!==(X=72+n.bs/2)&&v($,"y2",X),e.bs&&W!==(W=24+n.bs/2)&&v($,"x2",W),e.xst||e.bs){for(Gt=n.xst,i=0;i<Gt.length;i+=1){const r=Jl(n,Gt,i);Ht[i]?Ht[i].p(e,r):(Ht[i]=ah(t,r),Ht[i].c(),Ht[i].m(U,ct))}for(;i<Ht.length;i+=1)Ht[i].d(1);Ht.length=Gt.length}if(e.bs&&(v(ct,"width",n.bs),v(ct,"height",n.bs)),e.xs||e.bs){for(Xt=n.xs,i=0;i<Xt.length;i+=1){const t=Ql(n,Xt,i);Wt[i]?Wt[i].p(e,t):(Wt[i]=sh(0,t),Wt[i].c(),Wt[i].m(_t,null))}for(;i<Wt.length;i+=1)Wt[i].d(1);Wt.length=Xt.length}},d(t){t&&c(n),u(Yt,t),u(Ht,t),u(Wt,t)}}}(this,this._state),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor))}i(oh.prototype,z);var ch=oh;const uh={kernel:Rf,name:"RBF Kernel",equation:"\\exp \\left( - \\frac{||t-t'||^2}{2 bl^2} \\right)",params:[{name:"Variance σ",value:.8,min:0,max:1},{name:"Length l",description:"the reach of influence on neighbors.",value:.8,min:.01,max:2}]},fh={kernel:jf,name:"Periodic",equation:"\\exp \\left( - \\frac{2 \\sin^2(\\pi |t-t'| / p)}{l^2} \\right)",params:[{name:"Variance σ",value:.9,min:0,max:1},{name:"Length l",description:"the reach of influence on neighbors.",value:.51,min:.01,max:2},{name:"Periodicity p",description:"the distance between repetitions.",value:.31,min:0,max:Math.PI}]},lh=qf,hh=[{name:"Variance σ",value:.15,min:0,max:1},{name:"Variance σ_b",description:"the 'certainty' around C.",value:.1,min:0,max:1},{name:"Offset c",description:"the intersection point of all functions.",value:2,min:-2,max:2}];function dh(t,e){return t.v(e)}var ph={toggleOnOff(){const{active:t}=this.get();t?clearInterval(this.interval):(this.resample(),this.interval=setInterval(()=>{this.resample()},1e3)),this.set({active:!t})},switchKernel(t,e){this.set({kernel:t,params:e,curve:[],shadows:[]}),this.refs.covMat.set({kernel:t,params:e}),this.resample()},switchRBF(){this.switchKernel(uh.kernel,uh.params)},switchPeriodic(){this.switchKernel(fh.kernel,fh.params)},switchLinear(){this.switchKernel(lh,hh)},resample(){const{context:t,curve:e,shadows:n,countDimensions:r,params:i,kernel:a}=this.get();e.length>0&&(n.length>30&&n.shift(),n.push(e));const s=r,[o,c]=t.xDomain(),u=(c-o)/(s-1),f=U(o,c+u,u),l=i.map(t=>t.value),h=Of(a.apply(null,l),f),d=h.sample(),p=h.getSd(),g=h.getMean(),v=X(f,d,p),m=X(f,g,p);this.set({curve:v,shadows:n,meanCurve:m})}};function gh(){clearInterval(this.interval)}function vh({_changed:t,current:e,_previous:n}){const r=re(this.refs.svgArea).transition();r.select(".curve").duration(750).attr("d",e.line(e.curve)),r.select(".zero").transition().duration(750).attr("d",e.zero(e.meanCurve)),r.select(".sdArea").transition().duration(750).attr("d",e.sdArea(e.meanCurve)),r.select(".sdPlus").transition().duration(750).attr("d",e.sdPlus(e.meanCurve)),r.select(".sdMinus").transition().duration(750).attr("d",e.sdMinus(e.meanCurve)),re(this.refs.plus).transition().duration(750).attr("y",e.context.v(2*e.params[0].value)-10),re(this.refs.minus).transition().duration(750).attr("y",e.context.v(2*-e.params[0].value)+15)}function mh(t,e,n){const r=Object.create(t);return r.sp=e[n],r}function xh(t,e){var n,r;return{c(){v(n=l("path"),"d",r=e.sp),v(n,"class","shadowLine svelte-3yo2i9")},m(t,e){o(t,n,e)},p(t,e){t.shadowPaths&&r!==(r=e.sp)&&v(n,"d",r)},d(t){t&&c(n)}}}function bh(t,e){var n,r,i;return{c(){n=l("text"),r=l("tspan"),i=h("(click to start)"),v(r,"fill","rgb(245, 181, 62)"),v(r,"font-style","italic"),v(n,"x","5"),v(n,"y","15"),v(n,"class","annotation")},m(t,e){o(t,n,e),s(n,r),s(r,i)},d(t){t&&c(n)}}}function yh(t,e){var n,r,i;return{c(){n=l("text"),r=l("tspan"),i=h("(click to pause)"),v(r,"fill","rgb(245, 181, 62)"),v(r,"font-style","italic"),v(n,"x","5"),v(n,"y","15"),v(n,"class","annotation")},m(t,e){o(t,n,e),s(n,r),s(r,i)},d(t){t&&c(n)}}}function _h(t){var e;S(this,t),this.refs={},this._state=i({context:new Bu(500,350,[-5,5],[-10,10]),curve:[],shadows:[],active:!1,countDimensions:100,kernel:uh.kernel,name:"RBF Kernel",params:uh.params,meanCurve:[]},t.data),this._recompute({context:1,shadows:1,line:1},this._state),this._intro=!0,this._handlers.update=[vh],this._handlers.destroy=[gh],document.getElementById("svelte-3yo2i9-style")||((e=f("style")).id="svelte-3yo2i9-style",e.textContent=".kernel-grid.svelte-3yo2i9{display:inline-grid;grid-template-columns:auto auto auto auto}.grid-item.svelte-3yo2i9{margin:0.5em}.shadowLine.svelte-3yo2i9{fill:none;stroke:rgba(0,0,0,0.1);stroke-width:2px}",s(document.head,e)),this._fragment=function(t,e){var n,r,i,a,d,m,x,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F={};function B(e){t.switchRBF()}function Y(e){t.switchPeriodic()}function $(e){t.switchLinear()}for(var G=e.shadowPaths,H=[],X=0;X<G.length;X+=1)H[X]=xh(0,mh(e,G,X));function W(t){return t.active?yh:bh}var K=W(e),Z=K(t,e);function Q(e){t.toggleOnOff()}var J={n:e.countDimensions,gridSize:1,width:100,height:100,offset:0};void 0!==e.kernel&&(J.kernel=e.kernel,F.kernel=!0),void 0!==e.params&&(J.params=e.params,F.params=!0);var tt=new Nl({root:t.root,store:t.store,data:J,_bind(e,n){var r={};!F.kernel&&e.kernel&&(r.kernel=n.kernel),!F.params&&e.params&&(r.params=n.params),t._set(r),F={}}});return t.root._beforecreate.push(()=>{tt._bind({kernel:1,params:1},tt.get())}),t.refs.covMat=tt,{c(){n=f("div"),r=f("input"),i=h("\n  "),(a=f("label")).textContent="RBF",d=h(" \n  "),m=f("input"),x=h("\n  "),(b=f("label")).textContent="Periodic",y=h(" \n  "),_=f("input"),w=h("\n  "),(M=f("label")).textContent="Linear",k=h("\n"),S=f("div"),A=f("div"),P=l("svg"),C=l("g");for(var t=0;t<H.length;t+=1)H[t].c();N=l("text"),T=h("y = 0"),z=l("text"),R=h("μ + 2σ"),q=l("text"),L=h("μ - 2σ"),Z.c(),I=h("\n  "),V=f("div"),tt._fragment.c(),p(r,"change",B),v(r,"type","radio"),r.checked="checked",r.id="rbf",r.name="kernel",r.value="RBF",a.htmlFor="rbf",p(m,"change",Y),v(m,"type","radio"),m.id="periodic",m.name="kernel",m.value="Periodic",b.htmlFor="periodic",p(_,"change",$),v(_,"type","radio"),_.id="linear",_.name="kernel",_.value="Linear",M.htmlFor="linear",v(N,"x","5"),v(N,"y",E=dh(e.context,0)-5),v(N,"class","annotation"),v(z,"x",5),v(z,"y",j=dh(e.context,2)-10),v(z,"class","annotation"),v(q,"x",5),v(q,"y",D=dh(e.context,-2)+15),v(q,"class","annotation"),v(P,"class","plot"),v(P,"width",O=e.context.width),v(P,"height",U=e.context.height),p(A,"click",Q),A.className="grid-item svelte-3yo2i9",V.className="grid-item svelte-3yo2i9",S.className="kernel-grid svelte-3yo2i9"},m(e,c){o(e,n,c),s(n,r),s(n,i),s(n,a),s(n,d),s(n,m),s(n,x),s(n,b),s(n,y),s(n,_),s(n,w),s(n,M),o(e,k,c),o(e,S,c),s(S,A),s(A,P),s(P,C);for(var u=0;u<H.length;u+=1)H[u].m(C,null);s(P,N),s(N,T),s(P,z),s(z,R),t.refs.plus=z,s(P,q),s(q,L),t.refs.minus=q,Z.m(P,null),t.refs.svgArea=P,s(S,I),s(S,V),tt._mount(V,null),t.refs.gridMultipleKernel=S},p(n,r){if(e=r,n.shadowPaths){G=e.shadowPaths;for(var i=0;i<G.length;i+=1){const t=mh(e,G,i);H[i]?H[i].p(n,t):(H[i]=xh(0,t),H[i].c(),H[i].m(C,null))}for(;i<H.length;i+=1)H[i].d(1);H.length=G.length}n.context&&E!==(E=dh(e.context,0)-5)&&v(N,"y",E),n.context&&j!==(j=dh(e.context,2)-10)&&v(z,"y",j),n.context&&D!==(D=dh(e.context,-2)+15)&&v(q,"y",D),K!==(K=W(e))&&(Z.d(1),(Z=K(t,e)).c(),Z.m(P,null)),n.context&&O!==(O=e.context.width)&&v(P,"width",O),n.context&&U!==(U=e.context.height)&&v(P,"height",U);var a={};n.countDimensions&&(a.n=e.countDimensions),!F.kernel&&n.kernel&&(a.kernel=e.kernel,F.kernel=void 0!==e.kernel),!F.params&&n.params&&(a.params=e.params,F.params=void 0!==e.params),tt._set(a),F={}},d(e){e&&c(n),g(r,"change",B),g(m,"change",Y),g(_,"change",$),e&&(c(k),c(S)),u(H,e),t.refs.plus===z&&(t.refs.plus=null),t.refs.minus===q&&(t.refs.minus=null),Z.d(),t.refs.svgArea===P&&(t.refs.svgArea=null),g(A,"click",Q),tt.destroy(),t.refs.covMat===tt&&(t.refs.covMat=null),t.refs.gridMultipleKernel===S&&(t.refs.gridMultipleKernel=null)}}}(this,this._state),this.root._oncreate.push(()=>{(function(){this.resample();const{curve:t,line:e,meanCurve:n,sdArea:r,zero:i,sdPlus:a,sdMinus:s}=this.get(),o=re(this.refs.svgArea);o.append("path").data([n]).attr("class","sdArea").attr("stroke","none").attr("fill","rgba(0,0,0,0.05)").style("opacity",.5).attr("d",r),o.append("path").data([n]).attr("class","zero").attr("fill","none").attr("stroke","rgba(0,0,0,0.2)").attr("stroke-width","2px").attr("d",i),o.append("path").data([n]).attr("class","sdPlus").attr("fill","none").attr("stroke","rgba(0,0,0,0.2)").attr("stroke-dasharray","4").attr("stroke-width","2px").attr("d",a),o.append("path").data([n]).attr("class","sdMinus").attr("fill","none").attr("stroke","rgba(0,0,0,0.2)").attr("stroke-dasharray","4").attr("stroke-width","2px").attr("d",s),o.append("path").data([t]).attr("class","curve").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",e)}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(_h.prototype,z),i(_h.prototype,ph),_h.prototype._recompute=function(t,e){t.context&&(this._differs(e.line,e.line=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.line=!0),this._differs(e.zero,e.zero=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.zero=!0),this._differs(e.sdPlus,e.sdPlus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdPlus=!0),this._differs(e.sdMinus,e.sdMinus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]-2*e[2]))}(e))&&(t.sdMinus=!0),this._differs(e.sdArea,e.sdArea=function({context:t}){return Nc().x(e=>t.u(e[0])).y0(e=>t.v(e[1]-2*e[2])).y1(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdArea=!0)),(t.shadows||t.line)&&this._differs(e.shadowPaths,e.shadowPaths=function({shadows:t,line:e}){return t.map(e)}(e))&&(t.shadowPaths=!0)};var wh=_h;function Mh(t,e){return t.v(e)}function kh(t,e){return t.u(e)}var Sh={colorBar(){const t=re(this.refs.covScale),e=this.refs.covMat,{colorsRow:n}=e.get(),{countDimensions:r}=this.get(),i=t.selectAll(".rects");let a=[];return n.length>1?i.style("stroke-width","1px").style("stroke","black").each(function(t,r){const i=n[r],s=e.returnColor(i.cov);a.push(s)}):(i.style("stroke-width","0px").style("stroke","#9A8B7A"),a=Array(r).fill("rgba(0,0,0,0.2)")),a},colorGradient(t,e){const{countDimensions:n}=this.get(),r=re(this.refs.covScale),i=r.selectAll(".gradient > stop"),a=r.selectAll(".gradientBackground > stop");e.length>0?(i.attr("offset",function(t,e){return 100/n*e+"%"}).attr("stop-color",function(e,n){return t[n]}).attr("stop-opacity",1),a.attr("offset",function(t,e){return 100/n*e+"%"}).attr("stop-opacity",function(t,n){return 2*e[n].cov})):(i.attr("stop-opacity",0),a.attr("stop-opacity",1))},resampleFake(){const{curves:t}=this.get();this.set({curves:t})},resample(t){const{context:e,trainingPoints:n,countDimensions:r}=this.get(),{curves:i}=this.get(),a=r,[s,o]=e.xDomain(),c=(o-s)/(a-1),u=U(s,o+c,c),f=n.filter(t=>t.active),l=f.map(t=>t.x),h=f.map(t=>t.y),{params:d,kernel:p,covMatrix:g}=this.refs.covMat.get(),v=d.map(t=>t.value),m=Of(p.apply(null,v),u,l,h),x=m.sample(),b=m.getSd(),y=m.getMean();this.refs.covMat.externalCov(m.cov),this.refs.covMat.set({covMatrix:g});const _=X(u,x,b),w=X(u,y,b);i[t]=_,this.set({curves:i,meanCurve:w})},toggle(t){const{trainingPoints:e}=this.get();e[t].active=!e[t].active,this.set({trainingPoints:e}),this.refs.covMat.set({shouldResample:!0})},createVis(){const{meanCurve:t,sdPlus:e,sdMinus:n,sdArea:r,zero:i,curves:a,line:s,context:o,connectedline:c,countDimensions:u,circleSize:f}=this.get(),l=re(this.refs.graph),h=re(this.refs.covScale);l.append("path").data([t]).attr("class","sdArea").attr("stroke","none").attr("fill","rgba(255,224,255,0.6)").style("fill","url(#masterBackground)").style("opacity",.5).attr("d",r),l.append("path").data([t]).attr("class","zero").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",i),l.append("path").data([t]).attr("class","sdPlus").attr("fill","none").attr("stroke","#fa9fb5").attr("stroke-width","1px").attr("d",e),l.append("path").data([t]).attr("class","sdMinus").attr("fill","none").attr("stroke","#fa9fb5").attr("stroke-width","1px").attr("d",n);const d=l.selectAll("g.circles").data(a);d.exit().remove(),d.enter().append("g").classed("circles",!0).selectAll(".samples").data(function(t){return t}).enter().append("circle").classed("samples",!0).attr("cx",t=>o.u(t[0])).attr("cy",t=>o.v(t[1])).attr("r",f).style("fill","none").style("stroke","black").style("stroke-with",1),h.selectAll("g.lineConnectors").data([t]).exit().remove(),h.selectAll(".lineConnector").data(t).enter().append("path").classed("lineConnector",!0).attr("stroke","black").attr("fill","transparent").style("stroke-width","1px").style("stroke-dasharray",4).attr("d",function(t){const e=o.u(t[0]),n=o.v(t[1]+2*t[2]);return c([[e+1,n],[e+1,12],[e+o.width,12],[e+o.width,10]])});const p=h.append("linearGradient").classed("gradient",!0).attr("x1","0%").attr("y1","0%").attr("x2","100%").attr("y2","0%").attr("id","master"),g=h.append("linearGradient").classed("gradientBackground",!0).attr("x1","0%").attr("y1","0%").attr("x2","100%").attr("y2","0%").attr("id","masterBackground");let v=0;for(let t=0;t<u;t++)p.append("stop").attr("offset",v+"%").attr("stop-color","rgba(0,0,0,0.2)").attr("stop-opacity",1),g.append("stop").attr("offset",v+"%").attr("stop-color","rgb(255,224,255)").attr("stop-opacity",1),v+=100/u*t;h.append("rect").attr("width",o.width).attr("height",o.width/u).attr("x",1).attr("y",o.y(0)-9).style("fill","url(#master)");const m=h.selectAll("g.colorRect").data([a[0]]);m.exit().remove(),m.enter().append("g").classed("colorRect",!0).selectAll(".rects").data(function(t){return t}).enter().append("rect").classed("rects",!0).attr("x",t=>o.u(t[0])).attr("y",o.y(0)).attr("width",o.width/u).attr("height",o.width/u).style("fill","transparent").style("stroke","black").style("stroke-width","1px").style("stroke-opacity",0),l.selectAll(".curve").data(a).enter().append("path").attr("class","curve").attr("fill","none").attr("stroke","rgba(0,0,0,0.2)").attr("stroke-width","2px").attr("d",s)},updateLines(){const{meanCurve:t,curves:e,zero:n,sdArea:r,sdPlus:i,sdMinus:a,line:s}=this.get(),o=re(this.refs.graph);o.select(".zero").transition().duration(750).attr("d",n(t)),o.select(".sdArea").transition().duration(750).attr("d",r(t)),o.select(".sdPlus").transition().duration(750).attr("d",i(t)),o.select(".sdMinus").transition().duration(750).attr("d",a(t)),o.selectAll(".curve").data(e).transition().transition().duration(750).attr("d",s)},updateCircles(){const{curves:t,context:e}=this.get(),{hoveredRowIdx:n,colorsRow:r}=this.refs.covMat.get();re(this.refs.graph).selectAll("g.circles").data(t).selectAll(".samples").data(function(t){return t}).transition().duration(750).attr("cx",t=>e.u(t[0])).attr("cy",t=>e.v(t[1])).attr("stroke-opacity",function(t,e){return r.length>1?r[e].cov:0}).attr("stroke-with",function(t,e){return n===e?"4px":"1px"})},updateGradient(){const t=re(this.refs.covScale),{hoveredRowIdx:e,colorsRow:n,offset:r,gridSize:i}=this.refs.covMat.get(),{meanCurve:a,context:s,countDimensions:o,connectedline:c}=this.get(),u=this.colorBar();t.selectAll(".lineConnector").data(a).attr("d",function(t,n){const a=s.u(t[0]),u=s.v(t[1]+2*t[2]),f=37+i/2+(i+r)*n,l=a+s.width-s.width/(o-1)*n;return c([[a+1,u],[a+1,-16],[l+f,-16],[l+f,e*i]])}).style("stroke-dasharray",function(t,n){return e===n?"none":"4"}).style("stroke-opacity",function(t,r){return n.length>1?e===r?1:n[r].cov:0}).style("stroke-width",function(t,n){return e===n?"2px":"1px"}),this.colorGradient(u,n)}};function Ah({_changed:t,_current:e,_previous:n}){const{shouldResample:r}=this.refs.covMat.get(),{countSamples:i}=this.get(),a=document.getElementById("Posterior").getBoundingClientRect().x,s=this.refs.grid.getBoundingClientRect().left;if(this.refs.annotations.style.left=s-a+"px",r)for(let t=0;t<i;t++)this.resample(t);this.updateLines(),this.updateCircles(),this.updateGradient()}function Ph(t){const{component:e,ctx:n}=this._svelte;e.toggle(n.idx)}function Ch(t,e,n){const r=Object.create(t);return r.pt=e[n],r.idx=n,r}function Nh(t,e){var n,r,i;return{c(){v(n=l("circle"),"cx",r=kh(e.context,e.pt.x)),v(n,"cy",i=Mh(e.context,e.pt.y)),v(n,"r","3"),v(n,"fill","rgba(0,0,0,0.6)")},m(t,e){o(t,n,e)},p(t,e){(t.context||t.trainingPoints)&&r!==(r=kh(e.context,e.pt.x))&&v(n,"cx",r),(t.context||t.trainingPoints)&&i!==(i=Mh(e.context,e.pt.y))&&v(n,"cy",i)},d(t){t&&c(n)}}}function Th(t,e){var n,r,i,a,s=e.pt.active&&Nh(0,e);return{c(){s&&s.c(),(n=l("circle"))._svelte={component:t,ctx:e},p(n,"click",Ph),v(n,"class",r="trainingPoint "+(e.pt.active?"active":"inactive")+" svelte-1p5k5k2"),v(n,"cx",i=kh(e.context,e.pt.x)),v(n,"cy",a=Mh(e.context,e.pt.y)),v(n,"r","6")},m(t,e){s&&s.m(t,e),o(t,n,e)},p(t,o){(e=o).pt.active?s?s.p(t,e):((s=Nh(0,e)).c(),s.m(n.parentNode,n)):s&&(s.d(1),s=null),n._svelte.ctx=e,t.trainingPoints&&r!==(r="trainingPoint "+(e.pt.active?"active":"inactive")+" svelte-1p5k5k2")&&v(n,"class",r),(t.context||t.trainingPoints)&&i!==(i=kh(e.context,e.pt.x))&&v(n,"cx",i),(t.context||t.trainingPoints)&&a!==(a=Mh(e.context,e.pt.y))&&v(n,"cy",a)},d(t){s&&s.d(t),t&&c(n),g(n,"click",Ph)}}}function Eh(t){var e;S(this,t),this.refs={},this._state=i({trainingPoints:[{x:-1.122,y:-1,active:!1},{x:1.122,y:1,active:!1}],context:new Bu(500,300,[-5,5],[-10,10]),curves:[],meanCurve:[],circleSize:0,countDimensions:50,countSamples:1},t.data),this._recompute({_context:1,context:1},this._state),this._intro=!0,this._handlers.update=[Ah],document.getElementById("svelte-1p5k5k2-style")||((e=f("style")).id="svelte-1p5k5k2-style",e.textContent=".svelte-ref-annotations.svelte-1p5k5k2{position:absolute;pointer-events:none;margin:1em;top:0px;left:0px}.kernel-grid.svelte-1p5k5k2{display:inline-grid;grid-template-columns:auto auto auto}.kernel-grid.svelte-1p5k5k2{display:inline-grid;grid-template-columns:auto auto auto}.grid-item.svelte-1p5k5k2{margin:1em}.svelte-ref-zero.svelte-1p5k5k2{stroke:rgba(0, 0, 0, 0.2);stroke-width:1px}.sdLine.svelte-1p5k5k2{fill:none;stroke:rgba(0, 0, 0, 0.2);stroke-width:2px;stroke-dasharray:4}.line.svelte-1p5k5k2{fill:none;stroke:#c51b8a;stroke-width:2px}.samples.svelte-1p5k5k2{stroke:black;stroke-width:1px;stroke-opacity:0}.inactive.svelte-1p5k5k2{fill:transparent;stroke:rgba(0, 0, 0, 0.4);stroke-dasharray:2;stroke-width:2px}.active.svelte-1p5k5k2{fill:transparent;stroke:rgba(0, 0, 0, 0.4);stroke-width:2px}",s(document.head,e)),this._fragment=function(t,e){for(var n,r,i,a,d,m,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O,U,I,V,F,B,Y,$,G,H,X=e.trainingPoints,W=[],K=0;K<X.length;K+=1)W[K]=Th(t,Ch(e,X,K));function Z(e){t.resample(0)}var Q={external:!0,interaction:!0,gridSize:6,offset:0,slider:!1,n:e.countDimensions,width:300,height:300},J=new Nl({root:t.root,store:t.store,data:Q});return t.refs.covMat=J,{c(){n=f("div"),r=f("div"),i=f("div"),a=l("svg"),d=l("g"),m=l("g");for(var t=0;t<W.length;t+=1)W[t].c();b=l("text"),y=h("y = 0"),w=l("line"),A=l("line"),T=l("text"),E=h("μ + 2σ"),R=l("text"),j=h("μ - 2σ"),L=l("text"),D=l("tspan"),O=h("(click to resample)"),F=h("\n    "),B=f("div"),J._fragment.c(),Y=h("\n  "),$=f("div"),G=l("svg"),v(b,"x","5"),v(b,"y",_=Mh(e.context,0)-5),v(b,"class","annotation"),v(w,"x1","0"),v(w,"y1",M=Mh(e.context,0)),v(w,"x2",k=e.context.width),v(w,"y2",S=Mh(e.context,0)),v(w,"class","svelte-1p5k5k2 svelte-ref-zero"),v(A,"x1","0"),v(A,"y1",P=Mh(e.context,0)),v(A,"x2",C=e.context.width),v(A,"y2",N=Mh(e.context,0)),v(T,"x",5),v(T,"y",z=Mh(e.context,2)-10),v(T,"class","annotation"),v(R,"x",5),v(R,"y",q=Mh(e.context,-2)+15),v(R,"class","annotation"),v(D,"fill","rgb(245, 181, 62)"),v(D,"font-style","italic"),v(L,"x",5),v(L,"y",U=e.context.height-5),v(L,"class","annotation"),p(a,"click",Z),v(a,"class","plot"),v(a,"width",I=e.context.width),v(a,"height",V=e.context.height),i.className="grid-item svelte-1p5k5k2",B.className="grid-item svelte-1p5k5k2",r.className="kernel-grid svelte-1p5k5k2",v(G,"width",H=e.context.width),v(G,"height","50"),x(G,"overflow","visible"),$.className="svelte-1p5k5k2 svelte-ref-annotations",n.className="figure",v(n,"xmlns:ref","http://www.w3.org/1999/xhtml")},m(e,c){o(e,n,c),s(n,r),s(r,i),s(i,a),s(a,d),t.refs.graph=d,s(a,m);for(var u=0;u<W.length;u+=1)W[u].m(m,null);s(a,b),s(b,y),s(a,w),t.refs.zero=w,s(a,A),t.refs.mean=A,s(a,T),s(T,E),s(a,R),s(R,j),s(a,L),s(L,D),s(D,O),t.refs.svgArea=a,s(r,F),s(r,B),J._mount(B,null),t.refs.grid=r,s(n,Y),s(n,$),s($,G),t.refs.covScale=G,t.refs.annotations=$},p(e,n){if(e.trainingPoints||e.context){X=n.trainingPoints;for(var r=0;r<X.length;r+=1){const i=Ch(n,X,r);W[r]?W[r].p(e,i):(W[r]=Th(t,i),W[r].c(),W[r].m(m,null))}for(;r<W.length;r+=1)W[r].d(1);W.length=X.length}e.context&&_!==(_=Mh(n.context,0)-5)&&v(b,"y",_),e.context&&M!==(M=Mh(n.context,0))&&v(w,"y1",M),e.context&&k!==(k=n.context.width)&&v(w,"x2",k),e.context&&S!==(S=Mh(n.context,0))&&v(w,"y2",S),e.context&&P!==(P=Mh(n.context,0))&&v(A,"y1",P),e.context&&C!==(C=n.context.width)&&v(A,"x2",C),e.context&&N!==(N=Mh(n.context,0))&&v(A,"y2",N),e.context&&z!==(z=Mh(n.context,2)-10)&&v(T,"y",z),e.context&&q!==(q=Mh(n.context,-2)+15)&&v(R,"y",q),e.context&&U!==(U=n.context.height-5)&&v(L,"y",U),e.context&&I!==(I=n.context.width)&&v(a,"width",I),e.context&&V!==(V=n.context.height)&&v(a,"height",V);var i={};e.countDimensions&&(i.n=n.countDimensions),J._set(i),e.context&&H!==(H=n.context.width)&&v(G,"width",H)},d(e){e&&c(n),t.refs.graph===d&&(t.refs.graph=null),u(W,e),t.refs.zero===w&&(t.refs.zero=null),t.refs.mean===A&&(t.refs.mean=null),g(a,"click",Z),t.refs.svgArea===a&&(t.refs.svgArea=null),J.destroy(),t.refs.covMat===J&&(t.refs.covMat=null),t.refs.grid===r&&(t.refs.grid=null),t.refs.covScale===G&&(t.refs.covScale=null),t.refs.annotations===$&&(t.refs.annotations=null)}}}(this,this._state),this.root._oncreate.push(()=>{(function(){this.resample(0),this.createVis(),this.refs.covMat.on("update",()=>{this.resampleFake()})}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(Eh.prototype,z),i(Eh.prototype,Sh),Eh.prototype._recompute=function(t,e){t._context&&this._differs(e.connectedline,e.connectedline=function({_context:t}){return Cc().curve(iu).x(t=>t[0]).y(t=>t[1])}(e))&&(t.connectedline=!0),t.context&&(this._differs(e.line,e.line=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.line=!0),this._differs(e.zero,e.zero=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.zero=!0),this._differs(e.sdPlus,e.sdPlus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdPlus=!0),this._differs(e.sdMinus,e.sdMinus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]-2*e[2]))}(e))&&(t.sdMinus=!0),this._differs(e.sdArea,e.sdArea=function({context:t}){return Nc().x(e=>t.u(e[0])).y0(e=>t.v(e[1]-2*e[2])).y1(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdArea=!0))};var zh=Eh;function Rh(t,e){return t.v(e)}var jh={createTrainingSet(){const{name:t,i:e}=this.get();let n,r;"Periodic"===t[e]?(n=[-Math.PI,0,Math.PI],r=n.map(t=>Math.sin(.5*Math.PI*t)+.5*t)):"Linear"===t[e]?(n=[-Math.PI,Math.PI],r=[-Math.PI/2,Math.PI/2]):(n=[2*-Math.PI,-Math.PI,0,Math.PI,2*Math.PI],r=n.map(t=>Math.sin(.5*Math.PI*t)+.5*t));const i=n.map((t,e)=>({x:n[e],y:r[e]}));this.set({trainingPoints:i})},resample(t){this.createTrainingSet();const{context:e,countDimensions:n,kernel:r,curves:i,trainingPoints:a}=this.get(),s=n,[o,c]=e.xDomain(),u=(c-o)/(s-1),f=U(o,c+u,u),l=Of(r,f,a.map(t=>t.x),a.map(t=>t.y)),h=l.sample(),d=l.getMean(),p=l.getSd(),g=X(f,h,p),v=X(f,d,p);i[t]=g,this.set({curves:i,meanCurve:v})}};function qh(t){var e,n,r,u,d,p,g,m,x,b,y,_,w,k;S(this,t),this.refs={},this._state=i({context:new Bu(200,200,[-10,10],[-10,10]),curve:[],countDimensions:100,meanCurve:[],curves:[],trainingPoints:[]},t.data),this._recompute({context:1},this._state),this._intro=!0,document.getElementById("svelte-fv79x-style")||((e=f("style")).id="svelte-fv79x-style",e.textContent=".svelte-ref-zero.svelte-fv79x{stroke:rgba(0,0,0,0.2);stroke-width:1px}",s(document.head,e)),this._fragment=(n=this,r=this._state,{c(){u=l("svg"),d=l("g"),p=l("text"),g=h("y = 0"),x=l("line"),v(p,"x","5"),v(p,"y",m=Rh(r.context,0)-5),v(p,"class","annotation"),v(x,"x1","0"),v(x,"y1",b=Rh(r.context,0)),v(x,"x2",y=r.context.width),v(x,"y2",_=Rh(r.context,0)),v(x,"class","svelte-fv79x svelte-ref-zero"),v(u,"class","plot"),v(u,"width",w=r.context.width),v(u,"height",k=r.context.height)},m(t,e){o(t,u,e),s(u,d),s(d,p),s(p,g),s(d,x),n.refs.zero=x,n.refs.graph=d,n.refs.svgArea=u},p(t,e){t.context&&m!==(m=Rh(e.context,0)-5)&&v(p,"y",m),t.context&&b!==(b=Rh(e.context,0))&&v(x,"y1",b),t.context&&y!==(y=e.context.width)&&v(x,"x2",y),t.context&&_!==(_=Rh(e.context,0))&&v(x,"y2",_),t.context&&w!==(w=e.context.width)&&v(u,"width",w),t.context&&k!==(k=e.context.height)&&v(u,"height",k)},d(t){t&&c(u),n.refs.zero===x&&(n.refs.zero=null),n.refs.graph===d&&(n.refs.graph=null),n.refs.svgArea===u&&(n.refs.svgArea=null)}}),this.root._oncreate.push(()=>{(function(){this.resample(0);const{meanCurve:t,zero:e}=this.get();re(this.refs.svgArea).append("path").data([t]).attr("class","zero").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",e)}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(qh.prototype,z),i(qh.prototype,jh),qh.prototype._recompute=function(t,e){t.context&&(this._differs(e.line,e.line=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.line=!0),this._differs(e.zero,e.zero=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.zero=!0),this._differs(e.sdPlus,e.sdPlus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdPlus=!0),this._differs(e.sdMinus,e.sdMinus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]-2*e[2]))}(e))&&(t.sdMinus=!0),this._differs(e.sdArea,e.sdArea=function({context:t}){return Nc().x(e=>t.u(e[0])).y0(e=>t.v(e[1]-2*e[2])).y1(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdArea=!0))};var Lh=qh;const Dh=jf(.8,2.1,2),Oh=qf(.3,.5,0),Uh=(Ih=[Oh,Dh],function(t,e){return Ih.map(function(n){return n.apply(null,[t,e])}).reduce(function(t,e){return t*e},1)});var Ih;const Vh=Lf([Oh,Dh]);function Fh(t,e,n){const r=Object.create(t);return r.k=e[n],r.i=n,r}function Bh(t,e){var n,r,i,a,u,l=e.names[e.i],d={kernel:e.k,name:e.names,id:"",i:e.i},p=new Lh({root:t.root,store:t.store,data:d});return{c(){n=f("div"),p._fragment.c(),r=h("\n      "),i=f("label"),a=h(l),u=h("\n  "),i.className="annotation",v(i,"font-weight","bold"),n.className="grid-item svelte-1sp683y"},m(t,e){o(t,n,e),p._mount(n,null),s(n,r),s(n,i),s(i,a),s(n,u)},p(t,e){var n={};t.kernels&&(n.kernel=e.k),t.names&&(n.name=e.names),p._set(n),t.names&&l!==(l=e.names[e.i])&&m(a,l)},d(t){t&&c(n),p.destroy()}}}function Yh(t){var e;S(this,t),this._state=i({kernels:[Oh,Dh,Vh,Uh],names:["Linear","Periodic","Linear + Periodic","Linear ⋅ Periodic"]},t.data),this._intro=!0,document.getElementById("svelte-1sp683y-style")||((e=f("style")).id="svelte-1sp683y-style",e.textContent=".kernel-grid.svelte-1sp683y{display:inline-grid;grid-template-columns:auto auto auto auto}.grid-item.svelte-1sp683y{margin:1em}",s(document.head,e)),this._fragment=function(t,e){for(var n,r=e.kernels,i=[],a=0;a<r.length;a+=1)i[a]=Bh(t,Fh(e,r,a));return{c(){n=f("div");for(var t=0;t<i.length;t+=1)i[t].c();n.className="kernel-grid svelte-1sp683y"},m(t,e){o(t,n,e);for(var r=0;r<i.length;r+=1)i[r].m(n,null)},p(e,a){if(e.names||e.kernels){r=a.kernels;for(var s=0;s<r.length;s+=1){const o=Fh(a,r,s);i[s]?i[s].p(e,o):(i[s]=Bh(t,o),i[s].c(),i[s].m(n,null))}for(;s<i.length;s+=1)i[s].d(1);i.length=r.length}},d(t){t&&c(n),u(i,t)}}}(this,this._state),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(Yh.prototype,z);var $h=Yh;function Gh(t,e){return t.v(e)}function Hh(t,e){return t.u(e)}var Xh={createTrainingSet(){const t=[.7238,-.3105,.3172,-3.0417,2],e=[!0,!0,!0,!0,!0],n=t.map(t=>Math.sin(6*t)+2*t),r=t.map((r,i)=>({x:t[i],y:n[i],active:e[i]}));this.set({trainingPoints:r})},fkt(){let t=1;const e=Rf(),n=jf(1,3,.8),r=qf(.5,.5,0),i=[],{kernels:a}=this.get();return a[0].active&&(t=e,i[0]=a[0]),a[1].active&&(t=n,i[0]=a[1]),a[2].active&&(t=r,i[0]=a[2]),a[0].active&&a[1].active&&(t=Lf([e,n]),i[0]=a[0],i[1]=a[1]),a[1].active&&a[2].active&&(t=Lf([r,n]),i[0]=a[1],i[1]=a[2]),a[0].active&&a[2].active&&(t=Lf([r,e]),i[0]=a[0],i[1]=a[2]),a[0].active&&a[1].active&&a[2].active&&(t=Lf([r,n,e]),i[0]=a[0],i[1]=a[1],i[2]=a[2]),this.set({currentParams:i}),t},resample(t){const{context:e,trainingPoints:n}=this.get(),{countDimensions:r,currentKernel:i,curves:a}=this.get(),s=r,[o,c]=e.xDomain(),u=(c-o)/(s-1),f=U(o,c+u,u),l=n.filter(t=>t.active),h=Of(i,f,l.map(t=>t.x),l.map(t=>t.y)),d=h.sample(),p=h.getMean(),g=h.getSd();this.refs.covMat.externalCov(h.cov),this.refs.covMat.set({covMatrix:h.cov,kernel:i});const v=X(f,d,g),m=X(f,p,g);a[t]=v,this.set({curves:a,meanCurve:m})},toggle(t){const{trainingPoints:e}=this.get();e[t].active=!e[t].active,this.set({trainingPoints:e})},setFirstClick(t){this.set({firstClick:t})}};function Wh({_changed:t,current:e,_previous:n}){const r=this.fkt();e.currentKernel=r;const i=re(this.refs.graph);if(1!=r){this.set({currentKernel:r});const{shouldResample:t}=this.refs.covMat.get(),{countSamples:n}=this.get();if(t)for(let t=0;t<n;t++)this.resample(t);const{meanCurve:a}=this.get();i.select(".zero").transition().duration(750).attr("d",e.zero(a)).style("opacity",1),i.select(".sdArea").transition().duration(750).attr("d",e.sdArea(a)).style("opacity",1),i.select(".sdPlus").transition().duration(750).attr("d",e.sdPlus(a)).style("opacity",1),i.select(".sdMinus").transition().duration(750).attr("d",e.sdMinus(a)).style("opacity",1),i.selectAll(".curve").data(e.curves).transition().duration(750).attr("d",e.line).style("opacity",1)}else i.select(".zero").transition().duration(750).style("opacity",0),i.select(".sdArea").transition().duration(750).style("opacity",0),i.select(".sdPlus").transition().duration(750).style("opacity",0),i.select(".sdMinus").transition().duration(750).style("opacity",0),i.selectAll(".curve").transition().duration(750).style("opacity",0)}function Kh(t,e,n){const r=Object.create(t);return r.p=e[n],r.i=n,r}function Zh(t,e,n){const r=Object.create(t);return r.pList=e[n],r}function Qh(t){const{component:e,ctx:n}=this._svelte;e.toggle(n.idx)}function Jh(t,e,n){const r=Object.create(t);return r.pt=e[n],r.idx=n,r}function td(t,e,n){const r=Object.create(t);return r.k=e[n],r.each0_value=e,r.k_index=n,r}function ed(t,e){var n,r,i,a,u,l=e.k.name;function d(){e.each0_value[e.k_index].active=r.checked,t.set({kernels:e.kernels})}return{c(){n=f("label"),r=f("input"),a=h(" "),u=h(l),p(r,"change",d),v(r,"type","checkbox"),r.id=i="checkbox"+e.k.name},m(t,i){o(t,n,i),s(n,r),r.checked=e.k.active,s(n,a),s(n,u)},p(t,n){e=n,t.kernels&&(r.checked=e.k.active),t.kernels&&i!==(i="checkbox"+e.k.name)&&(r.id=i),t.kernels&&l!==(l=e.k.name)&&m(u,l)},d(t){t&&c(n),g(r,"change",d)}}}function nd(t,e){var n,r,i;return{c(){v(n=l("circle"),"cx",r=Hh(e.context,e.pt.x)+e.context.width/e.countDimensions/2),v(n,"cy",i=Gh(e.context,e.pt.y)),v(n,"r","3"),v(n,"fill","rgba(0,0,0,0.6)")},m(t,e){o(t,n,e)},p(t,e){(t.context||t.trainingPoints||t.countDimensions)&&r!==(r=Hh(e.context,e.pt.x)+e.context.width/e.countDimensions/2)&&v(n,"cx",r),(t.context||t.trainingPoints)&&i!==(i=Gh(e.context,e.pt.y))&&v(n,"cy",i)},d(t){t&&c(n)}}}function rd(t,e){var n,r,i,a,s=e.pt.active&&nd(0,e);return{c(){s&&s.c(),(n=l("circle"))._svelte={component:t,ctx:e},p(n,"click",Qh),v(n,"class",r="trainingPoint "+(e.pt.active?"active":"inactive")+" svelte-1tsk8kz"),v(n,"cx",i=Hh(e.context,e.pt.x)+e.context.width/e.countDimensions/2),v(n,"cy",a=Gh(e.context,e.pt.y)),v(n,"r","6")},m(t,e){s&&s.m(t,e),o(t,n,e)},p(t,o){(e=o).pt.active?s?s.p(t,e):((s=nd(0,e)).c(),s.m(n.parentNode,n)):s&&(s.d(1),s=null),n._svelte.ctx=e,t.trainingPoints&&r!==(r="trainingPoint "+(e.pt.active?"active":"inactive")+" svelte-1tsk8kz")&&v(n,"class",r),(t.context||t.trainingPoints||t.countDimensions)&&i!==(i=Hh(e.context,e.pt.x)+e.context.width/e.countDimensions/2)&&v(n,"cx",i),(t.context||t.trainingPoints)&&a!==(a=Gh(e.context,e.pt.y))&&v(n,"cy",a)},d(t){s&&s.d(t),t&&c(n),g(n,"click",Qh)}}}function id(t,e){var n,r;return{c(){n=l("text"),r=h("(hover for information)"),v(n,"class","hoverText svelte-1tsk8kz"),v(n,"x",30),v(n,"y","1.2em")},m(t,e){o(t,n,e),s(n,r)},d(t){t&&c(n)}}}function ad(t,e){var n,r,i,a,u=e.p.name,f=e.p.value+", ";return{c(){n=l("tspan"),r=h(u),i=h(" = "),a=h(f),v(n,"fill","rgb(245, 181, 62)"),v(n,"font-style","italic")},m(t,e){o(t,n,e),s(n,r),s(n,i),s(n,a)},p(t,e){t.currentParams&&u!==(u=e.p.name)&&m(r,u),t.currentParams&&f!==(f=e.p.value+", ")&&m(a,f)},d(t){t&&c(n)}}}function sd(t,e){for(var n,r,i,a=e.pList.name,f=e.pList.params,d=[],p=0;p<f.length;p+=1)d[p]=ad(0,Kh(e,f,p));return{c(){n=l("tspan"),r=h(a),i=h(":\n                ");for(var t=0;t<d.length;t+=1)d[t].c();v(n,"x","5"),v(n,"dy","1.5em")},m(t,e){o(t,n,e),s(n,r),s(n,i);for(var a=0;a<d.length;a+=1)d[a].m(n,null)},p(t,e){if(t.currentParams&&a!==(a=e.pList.name)&&m(r,a),t.currentParams){f=e.pList.params;for(var i=0;i<f.length;i+=1){const r=Kh(e,f,i);d[i]?d[i].p(t,r):(d[i]=ad(0,r),d[i].c(),d[i].m(n,null))}for(;i<d.length;i+=1)d[i].d(1);d.length=f.length}},d(t){t&&c(n),u(d,t)}}}function od(t){var e;S(this,t),this.refs={},this._state=i({trainingPoints:[],countDimensions:75,context:new Bu(500,300,[-5,5],[-10,10]),curves:[],circleSize:3,kernels:[{kernel:Rf,name:"RBF",active:!0,params:[{name:"Variance σ",value:1,min:0,max:1},{name:"Length l",value:1,min:0,max:1}]},{name:"Periodic",kernel:jf,active:!1,params:[{name:"Variance σ",value:1,min:0,max:1},{name:"Length l",value:3,min:0,max:1},{name:"P",value:.8,min:0,max:1}]},{name:"Linear",kernel:qf,active:!1,params:[{name:"Variance σ",value:.5,min:0,max:1},{name:"Sigma_b",value:.5,min:0,max:1},{name:"Offset c",value:0,min:-1,max:1}]}],useTrainingData:!1,currentKernel:Rf,currentParams:[],countSamples:3,meanCurve:[],firstClick:!0},t.data),this._recompute({context:1},this._state),this._intro=!0,this._handlers.update=[Wh],document.getElementById("svelte-1tsk8kz-style")||((e=f("style")).id="svelte-1tsk8kz-style",e.textContent="#info.svelte-1tsk8kz g:hover .annotation.svelte-1tsk8kz{display:block}#info.svelte-1tsk8kz g:hover .icon.svelte-1tsk8kz{display:none}#info.svelte-1tsk8kz .annotation.svelte-1tsk8kz{display:none}#info.svelte-1tsk8kz .icon.svelte-1tsk8kz{display:block}.hoverText.svelte-1tsk8kz{fill:rgb(245, 181, 62);font-size:13px;font-style:italic}.kernel-grid.svelte-1tsk8kz{display:inline-grid;grid-template-columns:auto auto auto}.grid-item.svelte-1tsk8kz{margin:1em}.svelte-ref-zero.svelte-1tsk8kz{stroke:rgba(0,0,0,0.2);stroke-width:1px}.sdLine.svelte-1tsk8kz{fill:none;stroke:rgba(0,0,0,0.2);stroke-width:2px;stroke-dasharray:4}.inactive.svelte-1tsk8kz{fill:transparent;stroke:rgba(0, 0, 0, 0.4);stroke-dasharray:2;stroke-width:2px}.active.svelte-1tsk8kz{fill:transparent;stroke:rgba(0, 0, 0, 0.4);stroke-width:2px}",s(document.head,e)),this._fragment=function(t,e){for(var n,r,i,a,d,m,x,b,y,_,w,M,k,S,A,P,C,N,T,E,z,R,j,q,L,D,O=e.kernels,U=[],I=0;I<O.length;I+=1)U[I]=ed(t,td(e,O,I));var V=e.trainingPoints,F=[];for(I=0;I<V.length;I+=1)F[I]=rd(t,Jh(e,V,I));var B=e.firstClick&&id(),Y=e.currentParams,$=[];for(I=0;I<Y.length;I+=1)$[I]=sd(0,Zh(e,Y,I));function G(e){t.setFirstClick(!1)}var H={external:!0,interaction:!1,n:e.countDimensions,width:300,height:300,offset:0,gridSize:4,slider:!1},X=new Nl({root:t.root,store:t.store,data:H});return t.refs.covMat=X,{c(){n=f("div");for(var t=0;t<U.length;t+=1)U[t].c();for(r=h("\n"),i=f("div"),a=f("div"),d=l("svg"),m=l("g"),x=l("g"),t=0;t<F.length;t+=1)F[t].c();for(b=l("text"),y=h("y = 0"),w=l("line"),A=l("svg"),P=l("g"),C=l("g"),N=l("path"),T=l("path"),B&&B.c(),E=l("g"),z=l("text"),t=0;t<$.length;t+=1)$[t].c();L=h("\n  "),D=f("div"),X._fragment.c(),v(n,"xmlns:bind","http://www.w3.org/1999/xhtml"),v(b,"x","5"),v(b,"y",_=Gh(e.context,0)-5),v(b,"class","annotation"),v(w,"x1","0"),v(w,"y1",M=Gh(e.context,0)),v(w,"x2",k=e.context.width),v(w,"y2",S=Gh(e.context,0)),v(w,"class","svelte-1tsk8kz svelte-ref-zero"),v(N,"d","M0 0h24v24H0z"),v(N,"fill","none"),v(T,"d","M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"),v(T,"fill","rgb(245, 181, 62)"),v(C,"class","icon svelte-1tsk8kz"),v(z,"x",5),v(z,"y",0),v(z,"class","annotation svelte-1tsk8kz"),p(A,"mouseover",G),v(A,"id","info"),v(A,"x","5"),v(A,"y",5),v(A,"visibility",R=e.kernels.filter(t=>t.active).length>0?"visible":"hidden"),v(A,"class","svelte-1tsk8kz"),v(d,"class","plot"),v(d,"width",j=e.context.width),v(d,"height",q=e.context.height),a.className="grid-item svelte-1tsk8kz",D.className="grid-item svelte-1tsk8kz",i.className="kernel-grid svelte-1tsk8kz"},m(e,c){o(e,n,c);for(var u=0;u<U.length;u+=1)U[u].m(n,null);for(o(e,r,c),o(e,i,c),s(i,a),s(a,d),s(d,m),t.refs.graph=m,s(d,x),u=0;u<F.length;u+=1)F[u].m(x,null);for(s(d,b),s(b,y),s(d,w),t.refs.zero=w,s(d,A),s(A,P),s(P,C),s(C,N),s(C,T),B&&B.m(C,null),s(P,E),s(E,z),u=0;u<$.length;u+=1)$[u].m(z,null);t.refs.svgArea=d,s(i,L),s(i,D),X._mount(D,null)},p(e,r){if(e.kernels){O=r.kernels;for(var i=0;i<O.length;i+=1){const a=td(r,O,i);U[i]?U[i].p(e,a):(U[i]=ed(t,a),U[i].c(),U[i].m(n,null))}for(;i<U.length;i+=1)U[i].d(1);U.length=O.length}if(e.trainingPoints||e.context||e.countDimensions){for(V=r.trainingPoints,i=0;i<V.length;i+=1){const n=Jh(r,V,i);F[i]?F[i].p(e,n):(F[i]=rd(t,n),F[i].c(),F[i].m(x,null))}for(;i<F.length;i+=1)F[i].d(1);F.length=V.length}if(e.context&&_!==(_=Gh(r.context,0)-5)&&v(b,"y",_),e.context&&M!==(M=Gh(r.context,0))&&v(w,"y1",M),e.context&&k!==(k=r.context.width)&&v(w,"x2",k),e.context&&S!==(S=Gh(r.context,0))&&v(w,"y2",S),r.firstClick?B||((B=id()).c(),B.m(C,null)):B&&(B.d(1),B=null),e.currentParams){for(Y=r.currentParams,i=0;i<Y.length;i+=1){const t=Zh(r,Y,i);$[i]?$[i].p(e,t):($[i]=sd(0,t),$[i].c(),$[i].m(z,null))}for(;i<$.length;i+=1)$[i].d(1);$.length=Y.length}e.kernels&&R!==(R=r.kernels.filter(t=>t.active).length>0?"visible":"hidden")&&v(A,"visibility",R),e.context&&j!==(j=r.context.width)&&v(d,"width",j),e.context&&q!==(q=r.context.height)&&v(d,"height",q);var a={};e.countDimensions&&(a.n=r.countDimensions),X._set(a)},d(e){e&&c(n),u(U,e),e&&(c(r),c(i)),t.refs.graph===m&&(t.refs.graph=null),u(F,e),t.refs.zero===w&&(t.refs.zero=null),B&&B.d(),u($,e),g(A,"mouseover",G),t.refs.svgArea===d&&(t.refs.svgArea=null),X.destroy(),t.refs.covMat===X&&(t.refs.covMat=null)}}}(this,this._state),this.root._oncreate.push(()=>{(function(){const t=this.fkt();this.set({currentKernel:t}),this.createTrainingSet();const{meanCurve:e,sdPlus:n,sdMinus:r,sdArea:i,zero:a,curves:s,line:o}=this.get(),c=re(this.refs.graph);c.append("path").data([e]).attr("class","sdArea").attr("stroke","none").attr("fill","rgba(255,224,255,0.6)").attr("d",i),c.append("path").data([e]).attr("class","zero").attr("fill","none").attr("stroke","#c51b8a").attr("stroke-width","2px").attr("d",a),c.append("path").data([e]).attr("class","sdPlus").attr("fill","none").attr("stroke","#fa9fb5").attr("stroke-width","1px").attr("d",n),c.append("path").data([e]).attr("class","sdMinus").attr("fill","none").attr("stroke","#fa9fb5").attr("stroke-width","1px").attr("d",r),c.selectAll(".curve").data(s).enter().append("path").attr("class","curve").attr("fill","none").attr("stroke","rgba(0,0,0,0.2)").attr("stroke-width","2px").attr("d",o)}).call(this),this.fire("update",{changed:a({},this._state),current:this._state})}),t.target&&(this._fragment.c(),this._mount(t.target,t.anchor),M(this))}i(od.prototype,z),i(od.prototype,Xh),od.prototype._recompute=function(t,e){t.context&&(this._differs(e.line,e.line=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.line=!0),this._differs(e.zero,e.zero=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]))}(e))&&(t.zero=!0),this._differs(e.sdPlus,e.sdPlus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdPlus=!0),this._differs(e.sdMinus,e.sdMinus=function({context:t}){return Cc().x(e=>t.u(e[0])).y(e=>t.v(e[1]-2*e[2]))}(e))&&(t.sdMinus=!0),this._differs(e.sdArea,e.sdArea=function({context:t}){return Nc().x(e=>t.u(e[0])).y0(e=>t.v(e[1]-2*e[2])).y1(e=>t.v(e[1]+2*e[2]))}(e))&&(t.sdArea=!0))};var cd=od;new Wf({target:document.querySelector("#Teaser")}),new pl({target:document.querySelector("#Multivariate")}),new vl({target:document.querySelector("#DimensionSwap")}),new _l({target:document.querySelector("#MarginalizationConditioning")}),new Ol({target:document.querySelector("#MultipleKernels")}),new Wl({target:document.querySelector("#PriorFigure")}),new ch({target:document.querySelector("#PosteriorFigure")}),new wh({target:document.querySelector("#Prior")}),new zh({target:document.querySelector("#Posterior")}),new $h({target:document.querySelector("#KernelCombinationsStatic")}),new cd({target:document.querySelector("#KernelCombinations")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,